
MENU_OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a64  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000958  08004b70  08004b70  00014b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054c8  080054c8  00020034  2**0
                  CONTENTS
  4 .ARM          00000000  080054c8  080054c8  00020034  2**0
                  CONTENTS
  5 .preinit_array 00000000  080054c8  080054c8  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054c8  080054c8  000154c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054cc  080054cc  000154cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  080054d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000898  20000034  08005504  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008cc  08005504  000208cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f939  00000000  00000000  0002005d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020c0  00000000  00000000  0002f996  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da8  00000000  00000000  00031a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d18  00000000  00000000  00032800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c27  00000000  00000000  00033518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001136e  00000000  00000000  0004b13f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b78d  00000000  00000000  0005c4ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e7c3a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003998  00000000  00000000  000e7c90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000034 	.word	0x20000034
 8000128:	00000000 	.word	0x00000000
 800012c:	08004b58 	.word	0x08004b58

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000038 	.word	0x20000038
 8000148:	08004b58 	.word	0x08004b58

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f002 fc6a 	bl	8002a28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f818 	bl	8000188 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8da 	bl	8000310 <MX_GPIO_Init>
  MX_I2C1_Init();
 800015c:	f000 f85a 	bl	8000214 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000160:	f000 f886 	bl	8000270 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000164:	2201      	movs	r2, #1
 8000166:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800016a:	4806      	ldr	r0, [pc, #24]	; (8000184 <main+0x38>)
 800016c:	f002 ff8b 	bl	8003086 <HAL_GPIO_WritePin>

  // OLED init
  ssd1306_Init();
 8000170:	f002 f97e 	bl	8002470 <ssd1306_Init>
  ssd1306_Fill(Black);
 8000174:	2000      	movs	r0, #0
 8000176:	f002 f9e7 	bl	8002548 <ssd1306_Fill>
  ssd1306_UpdateScreen();
 800017a:	f002 fa07 	bl	800258c <ssd1306_UpdateScreen>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  menu();
 800017e:	f002 f929 	bl	80023d4 <menu>
 8000182:	e7fc      	b.n	800017e <main+0x32>
 8000184:	40011000 	.word	0x40011000

08000188 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b090      	sub	sp, #64	; 0x40
 800018c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800018e:	f107 0318 	add.w	r3, r7, #24
 8000192:	2228      	movs	r2, #40	; 0x28
 8000194:	2100      	movs	r1, #0
 8000196:	4618      	mov	r0, r3
 8000198:	f004 fc80 	bl	8004a9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800019c:	1d3b      	adds	r3, r7, #4
 800019e:	2200      	movs	r2, #0
 80001a0:	601a      	str	r2, [r3, #0]
 80001a2:	605a      	str	r2, [r3, #4]
 80001a4:	609a      	str	r2, [r3, #8]
 80001a6:	60da      	str	r2, [r3, #12]
 80001a8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001aa:	2301      	movs	r3, #1
 80001ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001b4:	2300      	movs	r3, #0
 80001b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001b8:	2301      	movs	r3, #1
 80001ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001bc:	2302      	movs	r3, #2
 80001be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001c6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001cc:	f107 0318 	add.w	r3, r7, #24
 80001d0:	4618      	mov	r0, r3
 80001d2:	f003 fbed 	bl	80039b0 <HAL_RCC_OscConfig>
 80001d6:	4603      	mov	r3, r0
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d001      	beq.n	80001e0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001dc:	f000 f920 	bl	8000420 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001e0:	230f      	movs	r3, #15
 80001e2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001e4:	2302      	movs	r3, #2
 80001e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001e8:	2300      	movs	r3, #0
 80001ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001f2:	2300      	movs	r3, #0
 80001f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001f6:	1d3b      	adds	r3, r7, #4
 80001f8:	2102      	movs	r1, #2
 80001fa:	4618      	mov	r0, r3
 80001fc:	f003 fe58 	bl	8003eb0 <HAL_RCC_ClockConfig>
 8000200:	4603      	mov	r3, r0
 8000202:	2b00      	cmp	r3, #0
 8000204:	d001      	beq.n	800020a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000206:	f000 f90b 	bl	8000420 <Error_Handler>
  }
}
 800020a:	bf00      	nop
 800020c:	3740      	adds	r7, #64	; 0x40
 800020e:	46bd      	mov	sp, r7
 8000210:	bd80      	pop	{r7, pc}
	...

08000214 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000218:	4b12      	ldr	r3, [pc, #72]	; (8000264 <MX_I2C1_Init+0x50>)
 800021a:	4a13      	ldr	r2, [pc, #76]	; (8000268 <MX_I2C1_Init+0x54>)
 800021c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800021e:	4b11      	ldr	r3, [pc, #68]	; (8000264 <MX_I2C1_Init+0x50>)
 8000220:	4a12      	ldr	r2, [pc, #72]	; (800026c <MX_I2C1_Init+0x58>)
 8000222:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000224:	4b0f      	ldr	r3, [pc, #60]	; (8000264 <MX_I2C1_Init+0x50>)
 8000226:	2200      	movs	r2, #0
 8000228:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800022a:	4b0e      	ldr	r3, [pc, #56]	; (8000264 <MX_I2C1_Init+0x50>)
 800022c:	2200      	movs	r2, #0
 800022e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000230:	4b0c      	ldr	r3, [pc, #48]	; (8000264 <MX_I2C1_Init+0x50>)
 8000232:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000236:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000238:	4b0a      	ldr	r3, [pc, #40]	; (8000264 <MX_I2C1_Init+0x50>)
 800023a:	2200      	movs	r2, #0
 800023c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800023e:	4b09      	ldr	r3, [pc, #36]	; (8000264 <MX_I2C1_Init+0x50>)
 8000240:	2200      	movs	r2, #0
 8000242:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000244:	4b07      	ldr	r3, [pc, #28]	; (8000264 <MX_I2C1_Init+0x50>)
 8000246:	2200      	movs	r2, #0
 8000248:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800024a:	4b06      	ldr	r3, [pc, #24]	; (8000264 <MX_I2C1_Init+0x50>)
 800024c:	2200      	movs	r2, #0
 800024e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000250:	4804      	ldr	r0, [pc, #16]	; (8000264 <MX_I2C1_Init+0x50>)
 8000252:	f002 ff53 	bl	80030fc <HAL_I2C_Init>
 8000256:	4603      	mov	r3, r0
 8000258:	2b00      	cmp	r3, #0
 800025a:	d001      	beq.n	8000260 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800025c:	f000 f8e0 	bl	8000420 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000260:	bf00      	nop
 8000262:	bd80      	pop	{r7, pc}
 8000264:	20000460 	.word	0x20000460
 8000268:	40005400 	.word	0x40005400
 800026c:	00061a80 	.word	0x00061a80

08000270 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b086      	sub	sp, #24
 8000274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000276:	f107 0308 	add.w	r3, r7, #8
 800027a:	2200      	movs	r2, #0
 800027c:	601a      	str	r2, [r3, #0]
 800027e:	605a      	str	r2, [r3, #4]
 8000280:	609a      	str	r2, [r3, #8]
 8000282:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000284:	463b      	mov	r3, r7
 8000286:	2200      	movs	r2, #0
 8000288:	601a      	str	r2, [r3, #0]
 800028a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800028c:	4b1e      	ldr	r3, [pc, #120]	; (8000308 <MX_TIM1_Init+0x98>)
 800028e:	4a1f      	ldr	r2, [pc, #124]	; (800030c <MX_TIM1_Init+0x9c>)
 8000290:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6400;
 8000292:	4b1d      	ldr	r3, [pc, #116]	; (8000308 <MX_TIM1_Init+0x98>)
 8000294:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8000298:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800029a:	4b1b      	ldr	r3, [pc, #108]	; (8000308 <MX_TIM1_Init+0x98>)
 800029c:	2200      	movs	r2, #0
 800029e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 80002a0:	4b19      	ldr	r3, [pc, #100]	; (8000308 <MX_TIM1_Init+0x98>)
 80002a2:	2264      	movs	r2, #100	; 0x64
 80002a4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002a6:	4b18      	ldr	r3, [pc, #96]	; (8000308 <MX_TIM1_Init+0x98>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80002ac:	4b16      	ldr	r3, [pc, #88]	; (8000308 <MX_TIM1_Init+0x98>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80002b2:	4b15      	ldr	r3, [pc, #84]	; (8000308 <MX_TIM1_Init+0x98>)
 80002b4:	2280      	movs	r2, #128	; 0x80
 80002b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80002b8:	4813      	ldr	r0, [pc, #76]	; (8000308 <MX_TIM1_Init+0x98>)
 80002ba:	f003 ff7f 	bl	80041bc <HAL_TIM_Base_Init>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d001      	beq.n	80002c8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80002c4:	f000 f8ac 	bl	8000420 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80002ce:	f107 0308 	add.w	r3, r7, #8
 80002d2:	4619      	mov	r1, r3
 80002d4:	480c      	ldr	r0, [pc, #48]	; (8000308 <MX_TIM1_Init+0x98>)
 80002d6:	f004 f949 	bl	800456c <HAL_TIM_ConfigClockSource>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d001      	beq.n	80002e4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80002e0:	f000 f89e 	bl	8000420 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 80002e4:	2310      	movs	r3, #16
 80002e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002e8:	2300      	movs	r3, #0
 80002ea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80002ec:	463b      	mov	r3, r7
 80002ee:	4619      	mov	r1, r3
 80002f0:	4805      	ldr	r0, [pc, #20]	; (8000308 <MX_TIM1_Init+0x98>)
 80002f2:	f004 fb25 	bl	8004940 <HAL_TIMEx_MasterConfigSynchronization>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80002fc:	f000 f890 	bl	8000420 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000300:	bf00      	nop
 8000302:	3718      	adds	r7, #24
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}
 8000308:	200004b4 	.word	0x200004b4
 800030c:	40012c00 	.word	0x40012c00

08000310 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b088      	sub	sp, #32
 8000314:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000316:	f107 0310 	add.w	r3, r7, #16
 800031a:	2200      	movs	r2, #0
 800031c:	601a      	str	r2, [r3, #0]
 800031e:	605a      	str	r2, [r3, #4]
 8000320:	609a      	str	r2, [r3, #8]
 8000322:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000324:	4b39      	ldr	r3, [pc, #228]	; (800040c <MX_GPIO_Init+0xfc>)
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	4a38      	ldr	r2, [pc, #224]	; (800040c <MX_GPIO_Init+0xfc>)
 800032a:	f043 0310 	orr.w	r3, r3, #16
 800032e:	6193      	str	r3, [r2, #24]
 8000330:	4b36      	ldr	r3, [pc, #216]	; (800040c <MX_GPIO_Init+0xfc>)
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	f003 0310 	and.w	r3, r3, #16
 8000338:	60fb      	str	r3, [r7, #12]
 800033a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800033c:	4b33      	ldr	r3, [pc, #204]	; (800040c <MX_GPIO_Init+0xfc>)
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	4a32      	ldr	r2, [pc, #200]	; (800040c <MX_GPIO_Init+0xfc>)
 8000342:	f043 0320 	orr.w	r3, r3, #32
 8000346:	6193      	str	r3, [r2, #24]
 8000348:	4b30      	ldr	r3, [pc, #192]	; (800040c <MX_GPIO_Init+0xfc>)
 800034a:	699b      	ldr	r3, [r3, #24]
 800034c:	f003 0320 	and.w	r3, r3, #32
 8000350:	60bb      	str	r3, [r7, #8]
 8000352:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000354:	4b2d      	ldr	r3, [pc, #180]	; (800040c <MX_GPIO_Init+0xfc>)
 8000356:	699b      	ldr	r3, [r3, #24]
 8000358:	4a2c      	ldr	r2, [pc, #176]	; (800040c <MX_GPIO_Init+0xfc>)
 800035a:	f043 0308 	orr.w	r3, r3, #8
 800035e:	6193      	str	r3, [r2, #24]
 8000360:	4b2a      	ldr	r3, [pc, #168]	; (800040c <MX_GPIO_Init+0xfc>)
 8000362:	699b      	ldr	r3, [r3, #24]
 8000364:	f003 0308 	and.w	r3, r3, #8
 8000368:	607b      	str	r3, [r7, #4]
 800036a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800036c:	4b27      	ldr	r3, [pc, #156]	; (800040c <MX_GPIO_Init+0xfc>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	4a26      	ldr	r2, [pc, #152]	; (800040c <MX_GPIO_Init+0xfc>)
 8000372:	f043 0304 	orr.w	r3, r3, #4
 8000376:	6193      	str	r3, [r2, #24]
 8000378:	4b24      	ldr	r3, [pc, #144]	; (800040c <MX_GPIO_Init+0xfc>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	f003 0304 	and.w	r3, r3, #4
 8000380:	603b      	str	r3, [r7, #0]
 8000382:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000384:	2200      	movs	r2, #0
 8000386:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800038a:	4821      	ldr	r0, [pc, #132]	; (8000410 <MX_GPIO_Init+0x100>)
 800038c:	f002 fe7b 	bl	8003086 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000390:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000394:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000396:	2301      	movs	r3, #1
 8000398:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800039a:	2300      	movs	r3, #0
 800039c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800039e:	2302      	movs	r3, #2
 80003a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003a2:	f107 0310 	add.w	r3, r7, #16
 80003a6:	4619      	mov	r1, r3
 80003a8:	4819      	ldr	r0, [pc, #100]	; (8000410 <MX_GPIO_Init+0x100>)
 80003aa:	f002 fcd1 	bl	8002d50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80003ae:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80003b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003b4:	4b17      	ldr	r3, [pc, #92]	; (8000414 <MX_GPIO_Init+0x104>)
 80003b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003b8:	2301      	movs	r3, #1
 80003ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003bc:	f107 0310 	add.w	r3, r7, #16
 80003c0:	4619      	mov	r1, r3
 80003c2:	4815      	ldr	r0, [pc, #84]	; (8000418 <MX_GPIO_Init+0x108>)
 80003c4:	f002 fcc4 	bl	8002d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80003c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003ce:	4b11      	ldr	r3, [pc, #68]	; (8000414 <MX_GPIO_Init+0x104>)
 80003d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003d2:	2301      	movs	r3, #1
 80003d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003d6:	f107 0310 	add.w	r3, r7, #16
 80003da:	4619      	mov	r1, r3
 80003dc:	480f      	ldr	r0, [pc, #60]	; (800041c <MX_GPIO_Init+0x10c>)
 80003de:	f002 fcb7 	bl	8002d50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80003e2:	2200      	movs	r2, #0
 80003e4:	2100      	movs	r1, #0
 80003e6:	2017      	movs	r0, #23
 80003e8:	f002 fc7b 	bl	8002ce2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80003ec:	2017      	movs	r0, #23
 80003ee:	f002 fc94 	bl	8002d1a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80003f2:	2200      	movs	r2, #0
 80003f4:	2100      	movs	r1, #0
 80003f6:	2028      	movs	r0, #40	; 0x28
 80003f8:	f002 fc73 	bl	8002ce2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003fc:	2028      	movs	r0, #40	; 0x28
 80003fe:	f002 fc8c 	bl	8002d1a <HAL_NVIC_EnableIRQ>

}
 8000402:	bf00      	nop
 8000404:	3720      	adds	r7, #32
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	40021000 	.word	0x40021000
 8000410:	40011000 	.word	0x40011000
 8000414:	10110000 	.word	0x10110000
 8000418:	40010c00 	.word	0x40010c00
 800041c:	40010800 	.word	0x40010800

08000420 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000424:	b672      	cpsid	i
}
 8000426:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000428:	e7fe      	b.n	8000428 <Error_Handler+0x8>
	...

0800042c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800042c:	b480      	push	{r7}
 800042e:	b085      	sub	sp, #20
 8000430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000432:	4b15      	ldr	r3, [pc, #84]	; (8000488 <HAL_MspInit+0x5c>)
 8000434:	699b      	ldr	r3, [r3, #24]
 8000436:	4a14      	ldr	r2, [pc, #80]	; (8000488 <HAL_MspInit+0x5c>)
 8000438:	f043 0301 	orr.w	r3, r3, #1
 800043c:	6193      	str	r3, [r2, #24]
 800043e:	4b12      	ldr	r3, [pc, #72]	; (8000488 <HAL_MspInit+0x5c>)
 8000440:	699b      	ldr	r3, [r3, #24]
 8000442:	f003 0301 	and.w	r3, r3, #1
 8000446:	60bb      	str	r3, [r7, #8]
 8000448:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800044a:	4b0f      	ldr	r3, [pc, #60]	; (8000488 <HAL_MspInit+0x5c>)
 800044c:	69db      	ldr	r3, [r3, #28]
 800044e:	4a0e      	ldr	r2, [pc, #56]	; (8000488 <HAL_MspInit+0x5c>)
 8000450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000454:	61d3      	str	r3, [r2, #28]
 8000456:	4b0c      	ldr	r3, [pc, #48]	; (8000488 <HAL_MspInit+0x5c>)
 8000458:	69db      	ldr	r3, [r3, #28]
 800045a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800045e:	607b      	str	r3, [r7, #4]
 8000460:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000462:	4b0a      	ldr	r3, [pc, #40]	; (800048c <HAL_MspInit+0x60>)
 8000464:	685b      	ldr	r3, [r3, #4]
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800046e:	60fb      	str	r3, [r7, #12]
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000476:	60fb      	str	r3, [r7, #12]
 8000478:	4a04      	ldr	r2, [pc, #16]	; (800048c <HAL_MspInit+0x60>)
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800047e:	bf00      	nop
 8000480:	3714      	adds	r7, #20
 8000482:	46bd      	mov	sp, r7
 8000484:	bc80      	pop	{r7}
 8000486:	4770      	bx	lr
 8000488:	40021000 	.word	0x40021000
 800048c:	40010000 	.word	0x40010000

08000490 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b088      	sub	sp, #32
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000498:	f107 0310 	add.w	r3, r7, #16
 800049c:	2200      	movs	r2, #0
 800049e:	601a      	str	r2, [r3, #0]
 80004a0:	605a      	str	r2, [r3, #4]
 80004a2:	609a      	str	r2, [r3, #8]
 80004a4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	4a15      	ldr	r2, [pc, #84]	; (8000500 <HAL_I2C_MspInit+0x70>)
 80004ac:	4293      	cmp	r3, r2
 80004ae:	d123      	bne.n	80004f8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004b0:	4b14      	ldr	r3, [pc, #80]	; (8000504 <HAL_I2C_MspInit+0x74>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	4a13      	ldr	r2, [pc, #76]	; (8000504 <HAL_I2C_MspInit+0x74>)
 80004b6:	f043 0308 	orr.w	r3, r3, #8
 80004ba:	6193      	str	r3, [r2, #24]
 80004bc:	4b11      	ldr	r3, [pc, #68]	; (8000504 <HAL_I2C_MspInit+0x74>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	f003 0308 	and.w	r3, r3, #8
 80004c4:	60fb      	str	r3, [r7, #12]
 80004c6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80004c8:	23c0      	movs	r3, #192	; 0xc0
 80004ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004cc:	2312      	movs	r3, #18
 80004ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004d0:	2303      	movs	r3, #3
 80004d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004d4:	f107 0310 	add.w	r3, r7, #16
 80004d8:	4619      	mov	r1, r3
 80004da:	480b      	ldr	r0, [pc, #44]	; (8000508 <HAL_I2C_MspInit+0x78>)
 80004dc:	f002 fc38 	bl	8002d50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80004e0:	4b08      	ldr	r3, [pc, #32]	; (8000504 <HAL_I2C_MspInit+0x74>)
 80004e2:	69db      	ldr	r3, [r3, #28]
 80004e4:	4a07      	ldr	r2, [pc, #28]	; (8000504 <HAL_I2C_MspInit+0x74>)
 80004e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004ea:	61d3      	str	r3, [r2, #28]
 80004ec:	4b05      	ldr	r3, [pc, #20]	; (8000504 <HAL_I2C_MspInit+0x74>)
 80004ee:	69db      	ldr	r3, [r3, #28]
 80004f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004f4:	60bb      	str	r3, [r7, #8]
 80004f6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80004f8:	bf00      	nop
 80004fa:	3720      	adds	r7, #32
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	40005400 	.word	0x40005400
 8000504:	40021000 	.word	0x40021000
 8000508:	40010c00 	.word	0x40010c00

0800050c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a0d      	ldr	r2, [pc, #52]	; (8000550 <HAL_TIM_Base_MspInit+0x44>)
 800051a:	4293      	cmp	r3, r2
 800051c:	d113      	bne.n	8000546 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800051e:	4b0d      	ldr	r3, [pc, #52]	; (8000554 <HAL_TIM_Base_MspInit+0x48>)
 8000520:	699b      	ldr	r3, [r3, #24]
 8000522:	4a0c      	ldr	r2, [pc, #48]	; (8000554 <HAL_TIM_Base_MspInit+0x48>)
 8000524:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000528:	6193      	str	r3, [r2, #24]
 800052a:	4b0a      	ldr	r3, [pc, #40]	; (8000554 <HAL_TIM_Base_MspInit+0x48>)
 800052c:	699b      	ldr	r3, [r3, #24]
 800052e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000532:	60fb      	str	r3, [r7, #12]
 8000534:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000536:	2200      	movs	r2, #0
 8000538:	2100      	movs	r1, #0
 800053a:	2019      	movs	r0, #25
 800053c:	f002 fbd1 	bl	8002ce2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000540:	2019      	movs	r0, #25
 8000542:	f002 fbea 	bl	8002d1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000546:	bf00      	nop
 8000548:	3710      	adds	r7, #16
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	40012c00 	.word	0x40012c00
 8000554:	40021000 	.word	0x40021000

08000558 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800055c:	e7fe      	b.n	800055c <NMI_Handler+0x4>

0800055e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800055e:	b480      	push	{r7}
 8000560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000562:	e7fe      	b.n	8000562 <HardFault_Handler+0x4>

08000564 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000568:	e7fe      	b.n	8000568 <MemManage_Handler+0x4>

0800056a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800056a:	b480      	push	{r7}
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800056e:	e7fe      	b.n	800056e <BusFault_Handler+0x4>

08000570 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000574:	e7fe      	b.n	8000574 <UsageFault_Handler+0x4>

08000576 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000576:	b480      	push	{r7}
 8000578:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800057a:	bf00      	nop
 800057c:	46bd      	mov	sp, r7
 800057e:	bc80      	pop	{r7}
 8000580:	4770      	bx	lr

08000582 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000582:	b480      	push	{r7}
 8000584:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000586:	bf00      	nop
 8000588:	46bd      	mov	sp, r7
 800058a:	bc80      	pop	{r7}
 800058c:	4770      	bx	lr

0800058e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800058e:	b480      	push	{r7}
 8000590:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000592:	bf00      	nop
 8000594:	46bd      	mov	sp, r7
 8000596:	bc80      	pop	{r7}
 8000598:	4770      	bx	lr

0800059a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800059a:	b580      	push	{r7, lr}
 800059c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800059e:	f002 fa89 	bl	8002ab4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
	...

080005a8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	// Detect "DOWN" button
	if(block_interrupt_form_up_and_down_buttons == false)				// Block wen function running
 80005ac:	4b0f      	ldr	r3, [pc, #60]	; (80005ec <EXTI9_5_IRQHandler+0x44>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	f083 0301 	eor.w	r3, r3, #1
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d012      	beq.n	80005e0 <EXTI9_5_IRQHandler+0x38>
	{
		if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_8))						// If interrupt from GPIOA PIN_8
 80005ba:	4b0d      	ldr	r3, [pc, #52]	; (80005f0 <EXTI9_5_IRQHandler+0x48>)
 80005bc:	695b      	ldr	r3, [r3, #20]
 80005be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d00c      	beq.n	80005e0 <EXTI9_5_IRQHandler+0x38>
		{
			if(button_processed_status == doesent_detected)
 80005c6:	4b0b      	ldr	r3, [pc, #44]	; (80005f4 <EXTI9_5_IRQHandler+0x4c>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	461a      	mov	r2, r3
 80005cc:	4b0a      	ldr	r3, [pc, #40]	; (80005f8 <EXTI9_5_IRQHandler+0x50>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	429a      	cmp	r2, r3
 80005d2:	d105      	bne.n	80005e0 <EXTI9_5_IRQHandler+0x38>
			{
				HAL_TIM_Base_Start_IT(&htim1);							// Turn on Timer 1
 80005d4:	4809      	ldr	r0, [pc, #36]	; (80005fc <EXTI9_5_IRQHandler+0x54>)
 80005d6:	f003 fe41 	bl	800425c <HAL_TIM_Base_Start_IT>
				button_processed_status = detected;						// For interrupt work only one time
 80005da:	4b07      	ldr	r3, [pc, #28]	; (80005f8 <EXTI9_5_IRQHandler+0x50>)
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
			}
		}
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80005e0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80005e4:	f002 fd68 	bl	80030b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80005e8:	bf00      	nop
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20000054 	.word	0x20000054
 80005f0:	40010400 	.word	0x40010400
 80005f4:	20000000 	.word	0x20000000
 80005f8:	20000004 	.word	0x20000004
 80005fc:	200004b4 	.word	0x200004b4

08000600 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
	if(button_processed_status == detected)							// If pressed button was detected by external interrupts
 8000604:	4b37      	ldr	r3, [pc, #220]	; (80006e4 <TIM1_UP_IRQHandler+0xe4>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d165      	bne.n	80006d8 <TIM1_UP_IRQHandler+0xd8>
		{
			if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) == 0)    			// If "UP" button was pressed
 800060c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000610:	4835      	ldr	r0, [pc, #212]	; (80006e8 <TIM1_UP_IRQHandler+0xe8>)
 8000612:	f002 fd21 	bl	8003058 <HAL_GPIO_ReadPin>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d118      	bne.n	800064e <TIM1_UP_IRQHandler+0x4e>
			{
				/*
				 * If every time when timer interrupt, delay_time will increment
				 * for avoid bounce button
				 */
				delay_time++;
 800061c:	4b33      	ldr	r3, [pc, #204]	; (80006ec <TIM1_UP_IRQHandler+0xec>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	3301      	adds	r3, #1
 8000622:	4a32      	ldr	r2, [pc, #200]	; (80006ec <TIM1_UP_IRQHandler+0xec>)
 8000624:	6013      	str	r3, [r2, #0]

				if(delay_time >= dalay_duration)						// if button pressed more than dalay_duration time it mean button was pressed
 8000626:	4b32      	ldr	r3, [pc, #200]	; (80006f0 <TIM1_UP_IRQHandler+0xf0>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	461a      	mov	r2, r3
 800062c:	4b2f      	ldr	r3, [pc, #188]	; (80006ec <TIM1_UP_IRQHandler+0xec>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	429a      	cmp	r2, r3
 8000632:	dc51      	bgt.n	80006d8 <TIM1_UP_IRQHandler+0xd8>
				{
					button_processed_status = 1;						// Flag for interrupts
 8000634:	4b2b      	ldr	r3, [pc, #172]	; (80006e4 <TIM1_UP_IRQHandler+0xe4>)
 8000636:	2201      	movs	r2, #1
 8000638:	601a      	str	r2, [r3, #0]
					HAL_TIM_Base_Stop_IT(&htim1);						// Stop timer, because timer has done work above, and timer don't need
 800063a:	482e      	ldr	r0, [pc, #184]	; (80006f4 <TIM1_UP_IRQHandler+0xf4>)
 800063c:	f003 fe60 	bl	8004300 <HAL_TIM_Base_Stop_IT>

					button_status = BOTTON_UP;
 8000640:	4b2d      	ldr	r3, [pc, #180]	; (80006f8 <TIM1_UP_IRQHandler+0xf8>)
 8000642:	2201      	movs	r2, #1
 8000644:	701a      	strb	r2, [r3, #0]
					delay_time = 0;
 8000646:	4b29      	ldr	r3, [pc, #164]	; (80006ec <TIM1_UP_IRQHandler+0xec>)
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	e044      	b.n	80006d8 <TIM1_UP_IRQHandler+0xd8>
				}
			}

			else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == 0)   			 	// If "DOWN" button was pressed
 800064e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000652:	482a      	ldr	r0, [pc, #168]	; (80006fc <TIM1_UP_IRQHandler+0xfc>)
 8000654:	f002 fd00 	bl	8003058 <HAL_GPIO_ReadPin>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d118      	bne.n	8000690 <TIM1_UP_IRQHandler+0x90>
			{
				/*
				* If every time when timer interrupt, delay_time will increment
				* for avoid bounce button
				*/
				delay_time++;
 800065e:	4b23      	ldr	r3, [pc, #140]	; (80006ec <TIM1_UP_IRQHandler+0xec>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	3301      	adds	r3, #1
 8000664:	4a21      	ldr	r2, [pc, #132]	; (80006ec <TIM1_UP_IRQHandler+0xec>)
 8000666:	6013      	str	r3, [r2, #0]

				if(delay_time >= dalay_duration)						// if button pressed more than dalay_duration time it mean button was pressed
 8000668:	4b21      	ldr	r3, [pc, #132]	; (80006f0 <TIM1_UP_IRQHandler+0xf0>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	461a      	mov	r2, r3
 800066e:	4b1f      	ldr	r3, [pc, #124]	; (80006ec <TIM1_UP_IRQHandler+0xec>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	429a      	cmp	r2, r3
 8000674:	dc30      	bgt.n	80006d8 <TIM1_UP_IRQHandler+0xd8>
				{
					button_processed_status = 1;						// Flag for interrupts
 8000676:	4b1b      	ldr	r3, [pc, #108]	; (80006e4 <TIM1_UP_IRQHandler+0xe4>)
 8000678:	2201      	movs	r2, #1
 800067a:	601a      	str	r2, [r3, #0]
					HAL_TIM_Base_Stop_IT(&htim1);						// Stop timer, because timer has done work above, and timer don't need
 800067c:	481d      	ldr	r0, [pc, #116]	; (80006f4 <TIM1_UP_IRQHandler+0xf4>)
 800067e:	f003 fe3f 	bl	8004300 <HAL_TIM_Base_Stop_IT>

					button_status = BUTTON_DOWN;
 8000682:	4b1d      	ldr	r3, [pc, #116]	; (80006f8 <TIM1_UP_IRQHandler+0xf8>)
 8000684:	2203      	movs	r2, #3
 8000686:	701a      	strb	r2, [r3, #0]
					delay_time = 0;
 8000688:	4b18      	ldr	r3, [pc, #96]	; (80006ec <TIM1_UP_IRQHandler+0xec>)
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	e023      	b.n	80006d8 <TIM1_UP_IRQHandler+0xd8>
				}
			}

			else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == 0)   			// If "ENTER" button was pressed
 8000690:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000694:	4814      	ldr	r0, [pc, #80]	; (80006e8 <TIM1_UP_IRQHandler+0xe8>)
 8000696:	f002 fcdf 	bl	8003058 <HAL_GPIO_ReadPin>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d118      	bne.n	80006d2 <TIM1_UP_IRQHandler+0xd2>
			{
				/*
				* If every time when timer interrupt, delay_time will increment
				* for avoid bounce button
				*/
				delay_time++;
 80006a0:	4b12      	ldr	r3, [pc, #72]	; (80006ec <TIM1_UP_IRQHandler+0xec>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	3301      	adds	r3, #1
 80006a6:	4a11      	ldr	r2, [pc, #68]	; (80006ec <TIM1_UP_IRQHandler+0xec>)
 80006a8:	6013      	str	r3, [r2, #0]

				if(delay_time >= dalay_duration)						// if button pressed more than dalay_duration time it mean button was pressed
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <TIM1_UP_IRQHandler+0xf0>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	461a      	mov	r2, r3
 80006b0:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <TIM1_UP_IRQHandler+0xec>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	429a      	cmp	r2, r3
 80006b6:	dc0f      	bgt.n	80006d8 <TIM1_UP_IRQHandler+0xd8>
				{
					button_processed_status = 1;
 80006b8:	4b0a      	ldr	r3, [pc, #40]	; (80006e4 <TIM1_UP_IRQHandler+0xe4>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	601a      	str	r2, [r3, #0]
					button_status = BUTTON_ENTER;
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <TIM1_UP_IRQHandler+0xf8>)
 80006c0:	2202      	movs	r2, #2
 80006c2:	701a      	strb	r2, [r3, #0]
					delay_time = 0;
 80006c4:	4b09      	ldr	r3, [pc, #36]	; (80006ec <TIM1_UP_IRQHandler+0xec>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
					HAL_TIM_Base_Stop_IT(&htim1);						// Stop timer, because timer has done work above, and timer don't need
 80006ca:	480a      	ldr	r0, [pc, #40]	; (80006f4 <TIM1_UP_IRQHandler+0xf4>)
 80006cc:	f003 fe18 	bl	8004300 <HAL_TIM_Base_Stop_IT>
 80006d0:	e002      	b.n	80006d8 <TIM1_UP_IRQHandler+0xd8>
				}
			}
			else
			{
				delay_time = 0;
 80006d2:	4b06      	ldr	r3, [pc, #24]	; (80006ec <TIM1_UP_IRQHandler+0xec>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
			}

		}
  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80006d8:	4806      	ldr	r0, [pc, #24]	; (80006f4 <TIM1_UP_IRQHandler+0xf4>)
 80006da:	f003 fe3f 	bl	800435c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	20000004 	.word	0x20000004
 80006e8:	40010c00 	.word	0x40010c00
 80006ec:	20000050 	.word	0x20000050
 80006f0:	20000001 	.word	0x20000001
 80006f4:	200004b4 	.word	0x200004b4
 80006f8:	20000055 	.word	0x20000055
 80006fc:	40010800 	.word	0x40010800

08000700 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if(block_interrupt_form_up_and_down_buttons == false)				// Block wen function running
 8000704:	4b1b      	ldr	r3, [pc, #108]	; (8000774 <EXTI15_10_IRQHandler+0x74>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	f083 0301 	eor.w	r3, r3, #1
 800070c:	b2db      	uxtb	r3, r3
 800070e:	2b00      	cmp	r3, #0
 8000710:	d012      	beq.n	8000738 <EXTI15_10_IRQHandler+0x38>
		{
			// Detect "UP" button
			if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_14))	// If interrupt from GPIOB PIN_14
 8000712:	4b19      	ldr	r3, [pc, #100]	; (8000778 <EXTI15_10_IRQHandler+0x78>)
 8000714:	695b      	ldr	r3, [r3, #20]
 8000716:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800071a:	2b00      	cmp	r3, #0
 800071c:	d00c      	beq.n	8000738 <EXTI15_10_IRQHandler+0x38>
			{
				if(button_processed_status == doesent_detected)
 800071e:	4b17      	ldr	r3, [pc, #92]	; (800077c <EXTI15_10_IRQHandler+0x7c>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	461a      	mov	r2, r3
 8000724:	4b16      	ldr	r3, [pc, #88]	; (8000780 <EXTI15_10_IRQHandler+0x80>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	429a      	cmp	r2, r3
 800072a:	d105      	bne.n	8000738 <EXTI15_10_IRQHandler+0x38>
				{
					HAL_TIM_Base_Start_IT(&htim1);		// Turn on Timer 1
 800072c:	4815      	ldr	r0, [pc, #84]	; (8000784 <EXTI15_10_IRQHandler+0x84>)
 800072e:	f003 fd95 	bl	800425c <HAL_TIM_Base_Start_IT>
					button_processed_status = detected;						// For interrupt work only one time
 8000732:	4b13      	ldr	r3, [pc, #76]	; (8000780 <EXTI15_10_IRQHandler+0x80>)
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
				}
			}
		}

		// Detect "ENTER" button
		if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_15))	// If interrupt from GPIOB PIN_15
 8000738:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <EXTI15_10_IRQHandler+0x78>)
 800073a:	695b      	ldr	r3, [r3, #20]
 800073c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000740:	2b00      	cmp	r3, #0
 8000742:	d00c      	beq.n	800075e <EXTI15_10_IRQHandler+0x5e>
		{
			if(button_processed_status == doesent_detected)
 8000744:	4b0d      	ldr	r3, [pc, #52]	; (800077c <EXTI15_10_IRQHandler+0x7c>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	461a      	mov	r2, r3
 800074a:	4b0d      	ldr	r3, [pc, #52]	; (8000780 <EXTI15_10_IRQHandler+0x80>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	429a      	cmp	r2, r3
 8000750:	d105      	bne.n	800075e <EXTI15_10_IRQHandler+0x5e>
			{
				HAL_TIM_Base_Start_IT(&htim1);		// Turn on Timer 1
 8000752:	480c      	ldr	r0, [pc, #48]	; (8000784 <EXTI15_10_IRQHandler+0x84>)
 8000754:	f003 fd82 	bl	800425c <HAL_TIM_Base_Start_IT>
				button_processed_status = detected;						// For interrupt work only one time
 8000758:	4b09      	ldr	r3, [pc, #36]	; (8000780 <EXTI15_10_IRQHandler+0x80>)
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
			}
		}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800075e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000762:	f002 fca9 	bl	80030b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000766:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800076a:	f002 fca5 	bl	80030b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000054 	.word	0x20000054
 8000778:	40010400 	.word	0x40010400
 800077c:	20000000 	.word	0x20000000
 8000780:	20000004 	.word	0x20000004
 8000784:	200004b4 	.word	0x200004b4

08000788 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	bc80      	pop	{r7}
 8000792:	4770      	bx	lr

08000794 <scroll_bar>:
/*
This function print scrollbar on right part of OLED.

 */
void scroll_bar(void)
{
 8000794:	b590      	push	{r4, r7, lr}
 8000796:	b089      	sub	sp, #36	; 0x24
 8000798:	af02      	add	r7, sp, #8
	// Work size scrollbar
	uint16_t start_x_scrollbar = 124;
 800079a:	237c      	movs	r3, #124	; 0x7c
 800079c:	81fb      	strh	r3, [r7, #14]
	uint16_t start_y_scrollbar = 17;
 800079e:	2311      	movs	r3, #17
 80007a0:	81bb      	strh	r3, [r7, #12]
	uint16_t active_width = 3;
 80007a2:	2303      	movs	r3, #3
 80007a4:	817b      	strh	r3, [r7, #10]
	uint16_t lenght_all_scrollbar = 48;
 80007a6:	2330      	movs	r3, #48	; 0x30
 80007a8:	813b      	strh	r3, [r7, #8]

	uint8_t menu_items_counter = 1;
 80007aa:	2301      	movs	r3, #1
 80007ac:	75fb      	strb	r3, [r7, #23]
	// Знайти скільки емементві в меню. Відповідно до кількості елементів вирахоується довжини скролбару
	// 1. Скопіювати показник на меню в буффер
	// 2. Піднятися до останнього елемента меню
	// 3. Інкрементувати лічильник "menu_items_counter" елементів меню, до останього елемента меню

	MenuItem_t * currentItem_buff = currentItem;
 80007ae:	4b32      	ldr	r3, [pc, #200]	; (8000878 <scroll_bar+0xe4>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	613b      	str	r3, [r7, #16]

	if ((currentItem_buff -> up) != 0)							// Step up if existing up
 80007b4:	693b      	ldr	r3, [r7, #16]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d006      	beq.n	80007ca <scroll_bar+0x36>
	{
		do{
			currentItem_buff = currentItem_buff -> up;			// Step up to the top of menu
 80007bc:	693b      	ldr	r3, [r7, #16]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	613b      	str	r3, [r7, #16]
		}
		while ((currentItem_buff -> up) != 0);					// If the top of item doesen't found
 80007c2:	693b      	ldr	r3, [r7, #16]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d1f8      	bne.n	80007bc <scroll_bar+0x28>
	}

	if ((currentItem_buff -> up) == 0)							// If found top of menu item
 80007ca:	693b      	ldr	r3, [r7, #16]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d109      	bne.n	80007e6 <scroll_bar+0x52>
	{
		do{
			currentItem_buff = currentItem_buff -> down;
 80007d2:	693b      	ldr	r3, [r7, #16]
 80007d4:	685b      	ldr	r3, [r3, #4]
 80007d6:	613b      	str	r3, [r7, #16]
			menu_items_counter++;								// Count how many list on menu
 80007d8:	7dfb      	ldrb	r3, [r7, #23]
 80007da:	3301      	adds	r3, #1
 80007dc:	75fb      	strb	r3, [r7, #23]
		}
		while ((currentItem_buff -> down) != 0);
 80007de:	693b      	ldr	r3, [r7, #16]
 80007e0:	685b      	ldr	r3, [r3, #4]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d1f5      	bne.n	80007d2 <scroll_bar+0x3e>
	}
	 // Очистити частину керану де є скролбар
	ssd1306FillRect(start_x_scrollbar, start_y_scrollbar, active_width, lenght_all_scrollbar - 2, Black);
 80007e6:	89fb      	ldrh	r3, [r7, #14]
 80007e8:	b2d8      	uxtb	r0, r3
 80007ea:	89bb      	ldrh	r3, [r7, #12]
 80007ec:	b2d9      	uxtb	r1, r3
 80007ee:	897b      	ldrh	r3, [r7, #10]
 80007f0:	b2da      	uxtb	r2, r3
 80007f2:	893b      	ldrh	r3, [r7, #8]
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	3b02      	subs	r3, #2
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	2400      	movs	r4, #0
 80007fc:	9400      	str	r4, [sp, #0]
 80007fe:	f002 f8b6 	bl	800296e <ssd1306FillRect>

	// Вивести подовгастий квадрат на край екрану
	ssd1306_DrawRectangle(start_x_scrollbar - 1, start_y_scrollbar - 1, start_x_scrollbar + active_width, 63, White);
 8000802:	89fb      	ldrh	r3, [r7, #14]
 8000804:	b2db      	uxtb	r3, r3
 8000806:	3b01      	subs	r3, #1
 8000808:	b2d8      	uxtb	r0, r3
 800080a:	89bb      	ldrh	r3, [r7, #12]
 800080c:	b2db      	uxtb	r3, r3
 800080e:	3b01      	subs	r3, #1
 8000810:	b2d9      	uxtb	r1, r3
 8000812:	89fb      	ldrh	r3, [r7, #14]
 8000814:	b2da      	uxtb	r2, r3
 8000816:	897b      	ldrh	r3, [r7, #10]
 8000818:	b2db      	uxtb	r3, r3
 800081a:	4413      	add	r3, r2
 800081c:	b2da      	uxtb	r2, r3
 800081e:	2301      	movs	r3, #1
 8000820:	9300      	str	r3, [sp, #0]
 8000822:	233f      	movs	r3, #63	; 0x3f
 8000824:	f002 f86c 	bl	8002900 <ssd1306_DrawRectangle>
	ssd1306_UpdateScreen();
 8000828:	f001 feb0 	bl	800258c <ssd1306_UpdateScreen>

	 // Print scroling line
	int id_for_line = currentItem -> id;				// Скопіювати порядковий номер меню
 800082c:	4b12      	ldr	r3, [pc, #72]	; (8000878 <scroll_bar+0xe4>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	7c1b      	ldrb	r3, [r3, #16]
 8000832:	607b      	str	r3, [r7, #4]
	// Print scroling line
	uint16_t line_lenght = (lenght_all_scrollbar/menu_items_counter + 1);					   	// Довжина лінії яка відповідає одному меню
 8000834:	893a      	ldrh	r2, [r7, #8]
 8000836:	7dfb      	ldrb	r3, [r7, #23]
 8000838:	fb92 f3f3 	sdiv	r3, r2, r3
 800083c:	b29b      	uxth	r3, r3
 800083e:	3301      	adds	r3, #1
 8000840:	807b      	strh	r3, [r7, #2]
	uint16_t start_lenght = 16 + ((id_for_line - 1)*line_lenght);								// Початок лінії
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	3b01      	subs	r3, #1
 8000846:	b29b      	uxth	r3, r3
 8000848:	887a      	ldrh	r2, [r7, #2]
 800084a:	fb02 f303 	mul.w	r3, r2, r3
 800084e:	b29b      	uxth	r3, r3
 8000850:	3310      	adds	r3, #16
 8000852:	803b      	strh	r3, [r7, #0]
	// Print active scrollbar part (line)
	ssd1306FillRect(start_x_scrollbar, start_lenght, active_width, line_lenght, White);
 8000854:	89fb      	ldrh	r3, [r7, #14]
 8000856:	b2d8      	uxtb	r0, r3
 8000858:	883b      	ldrh	r3, [r7, #0]
 800085a:	b2d9      	uxtb	r1, r3
 800085c:	897b      	ldrh	r3, [r7, #10]
 800085e:	b2da      	uxtb	r2, r3
 8000860:	887b      	ldrh	r3, [r7, #2]
 8000862:	b2db      	uxtb	r3, r3
 8000864:	2401      	movs	r4, #1
 8000866:	9400      	str	r4, [sp, #0]
 8000868:	f002 f881 	bl	800296e <ssd1306FillRect>

	ssd1306_UpdateScreen();
 800086c:	f001 fe8e 	bl	800258c <ssd1306_UpdateScreen>
}
 8000870:	bf00      	nop
 8000872:	371c      	adds	r7, #28
 8000874:	46bd      	mov	sp, r7
 8000876:	bd90      	pop	{r4, r7, pc}
 8000878:	2000000c 	.word	0x2000000c

0800087c <print_rectangle_on_head>:
// ----------------------------------------------------------------------------------------
void print_rectangle_on_head(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af02      	add	r7, sp, #8
	ssd1306_DrawRectangle(0, 0, 127 , 15, White);
 8000882:	2301      	movs	r3, #1
 8000884:	9300      	str	r3, [sp, #0]
 8000886:	230f      	movs	r3, #15
 8000888:	227f      	movs	r2, #127	; 0x7f
 800088a:	2100      	movs	r1, #0
 800088c:	2000      	movs	r0, #0
 800088e:	f002 f837 	bl	8002900 <ssd1306_DrawRectangle>
	ssd1306_UpdateScreen();
 8000892:	f001 fe7b 	bl	800258c <ssd1306_UpdateScreen>
}
 8000896:	bf00      	nop
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <clear_menu_items>:
// ----------------------------------------------------------------------------------------
// Clear some menu items.
void clear_menu_items (bool first, bool second, bool third, bool fourth)
{
 800089c:	b590      	push	{r4, r7, lr}
 800089e:	b089      	sub	sp, #36	; 0x24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4604      	mov	r4, r0
 80008a4:	4608      	mov	r0, r1
 80008a6:	4611      	mov	r1, r2
 80008a8:	461a      	mov	r2, r3
 80008aa:	4623      	mov	r3, r4
 80008ac:	71fb      	strb	r3, [r7, #7]
 80008ae:	4603      	mov	r3, r0
 80008b0:	71bb      	strb	r3, [r7, #6]
 80008b2:	460b      	mov	r3, r1
 80008b4:	717b      	strb	r3, [r7, #5]
 80008b6:	4613      	mov	r3, r2
 80008b8:	713b      	strb	r3, [r7, #4]
	uint8_t start_row_x = 15;
 80008ba:	230f      	movs	r3, #15
 80008bc:	77fb      	strb	r3, [r7, #31]
	char str[16] = "              ";   // Must be 15
 80008be:	4b2c      	ldr	r3, [pc, #176]	; (8000970 <clear_menu_items+0xd4>)
 80008c0:	f107 040c 	add.w	r4, r7, #12
 80008c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008c6:	c407      	stmia	r4!, {r0, r1, r2}
 80008c8:	8023      	strh	r3, [r4, #0]
 80008ca:	3402      	adds	r4, #2
 80008cc:	0c1b      	lsrs	r3, r3, #16
 80008ce:	7023      	strb	r3, [r4, #0]
 80008d0:	2300      	movs	r3, #0
 80008d2:	76fb      	strb	r3, [r7, #27]

	if(first == true)
 80008d4:	79fb      	ldrb	r3, [r7, #7]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d00e      	beq.n	80008f8 <clear_menu_items+0x5c>
	{
		ssd1306_SetCursor(start_row_x, first_menu_row);
 80008da:	4b26      	ldr	r3, [pc, #152]	; (8000974 <clear_menu_items+0xd8>)
 80008dc:	881b      	ldrh	r3, [r3, #0]
 80008de:	b2da      	uxtb	r2, r3
 80008e0:	7ffb      	ldrb	r3, [r7, #31]
 80008e2:	4611      	mov	r1, r2
 80008e4:	4618      	mov	r0, r3
 80008e6:	f001 ff87 	bl	80027f8 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 80008ea:	4a23      	ldr	r2, [pc, #140]	; (8000978 <clear_menu_items+0xdc>)
 80008ec:	f107 000c 	add.w	r0, r7, #12
 80008f0:	2301      	movs	r3, #1
 80008f2:	ca06      	ldmia	r2, {r1, r2}
 80008f4:	f001 ff5a 	bl	80027ac <ssd1306_WriteString>
	}
	if(second == true)
 80008f8:	79bb      	ldrb	r3, [r7, #6]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d00e      	beq.n	800091c <clear_menu_items+0x80>
	{
		ssd1306_SetCursor(start_row_x, second_menu_row);
 80008fe:	4b1f      	ldr	r3, [pc, #124]	; (800097c <clear_menu_items+0xe0>)
 8000900:	881b      	ldrh	r3, [r3, #0]
 8000902:	b2da      	uxtb	r2, r3
 8000904:	7ffb      	ldrb	r3, [r7, #31]
 8000906:	4611      	mov	r1, r2
 8000908:	4618      	mov	r0, r3
 800090a:	f001 ff75 	bl	80027f8 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 800090e:	4a1a      	ldr	r2, [pc, #104]	; (8000978 <clear_menu_items+0xdc>)
 8000910:	f107 000c 	add.w	r0, r7, #12
 8000914:	2301      	movs	r3, #1
 8000916:	ca06      	ldmia	r2, {r1, r2}
 8000918:	f001 ff48 	bl	80027ac <ssd1306_WriteString>
	}
	if(first == true)
 800091c:	79fb      	ldrb	r3, [r7, #7]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d00e      	beq.n	8000940 <clear_menu_items+0xa4>
	{
		ssd1306_SetCursor(start_row_x, third_menu_row);
 8000922:	4b17      	ldr	r3, [pc, #92]	; (8000980 <clear_menu_items+0xe4>)
 8000924:	881b      	ldrh	r3, [r3, #0]
 8000926:	b2da      	uxtb	r2, r3
 8000928:	7ffb      	ldrb	r3, [r7, #31]
 800092a:	4611      	mov	r1, r2
 800092c:	4618      	mov	r0, r3
 800092e:	f001 ff63 	bl	80027f8 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8000932:	4a11      	ldr	r2, [pc, #68]	; (8000978 <clear_menu_items+0xdc>)
 8000934:	f107 000c 	add.w	r0, r7, #12
 8000938:	2301      	movs	r3, #1
 800093a:	ca06      	ldmia	r2, {r1, r2}
 800093c:	f001 ff36 	bl	80027ac <ssd1306_WriteString>
	}
	if(fourth == true)
 8000940:	793b      	ldrb	r3, [r7, #4]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d00e      	beq.n	8000964 <clear_menu_items+0xc8>
	{
		ssd1306_SetCursor(start_row_x, fourth_menu_row);
 8000946:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <clear_menu_items+0xe8>)
 8000948:	881b      	ldrh	r3, [r3, #0]
 800094a:	b2da      	uxtb	r2, r3
 800094c:	7ffb      	ldrb	r3, [r7, #31]
 800094e:	4611      	mov	r1, r2
 8000950:	4618      	mov	r0, r3
 8000952:	f001 ff51 	bl	80027f8 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8000956:	4a08      	ldr	r2, [pc, #32]	; (8000978 <clear_menu_items+0xdc>)
 8000958:	f107 000c 	add.w	r0, r7, #12
 800095c:	2301      	movs	r3, #1
 800095e:	ca06      	ldmia	r2, {r1, r2}
 8000960:	f001 ff24 	bl	80027ac <ssd1306_WriteString>
	}
	ssd1306_UpdateScreen();
 8000964:	f001 fe12 	bl	800258c <ssd1306_UpdateScreen>
}
 8000968:	bf00      	nop
 800096a:	3724      	adds	r7, #36	; 0x24
 800096c:	46bd      	mov	sp, r7
 800096e:	bd90      	pop	{r4, r7, pc}
 8000970:	08004b70 	.word	0x08004b70
 8000974:	20000014 	.word	0x20000014
 8000978:	20000024 	.word	0x20000024
 800097c:	20000016 	.word	0x20000016
 8000980:	20000018 	.word	0x20000018
 8000984:	2000001a 	.word	0x2000001a

08000988 <print_rows_on_oled_if_up>:
// ----------------------------------------------------------------------------------------
void print_rows_on_oled_if_up(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b086      	sub	sp, #24
 800098c:	af00      	add	r7, sp, #0
	char str[16] = {0};
 800098e:	2300      	movs	r3, #0
 8000990:	603b      	str	r3, [r7, #0]
 8000992:	1d3b      	adds	r3, r7, #4
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]

	clear_menu_items (true , true , true , true );
 800099c:	2301      	movs	r3, #1
 800099e:	2201      	movs	r2, #1
 80009a0:	2101      	movs	r1, #1
 80009a2:	2001      	movs	r0, #1
 80009a4:	f7ff ff7a 	bl	800089c <clear_menu_items>

	print_rectangle_on_head();
 80009a8:	f7ff ff68 	bl	800087c <print_rectangle_on_head>

	// Print pointer on first item menu
	ssd1306_SetCursor(0, first_menu_row);
 80009ac:	4b2c      	ldr	r3, [pc, #176]	; (8000a60 <print_rows_on_oled_if_up+0xd8>)
 80009ae:	881b      	ldrh	r3, [r3, #0]
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	4619      	mov	r1, r3
 80009b4:	2000      	movs	r0, #0
 80009b6:	f001 ff1f 	bl	80027f8 <ssd1306_SetCursor>
	ssd1306_WriteString(str_pointer,  Font_7x10, White);
 80009ba:	4a2a      	ldr	r2, [pc, #168]	; (8000a64 <print_rows_on_oled_if_up+0xdc>)
 80009bc:	2301      	movs	r3, #1
 80009be:	ca06      	ldmia	r2, {r1, r2}
 80009c0:	4829      	ldr	r0, [pc, #164]	; (8000a68 <print_rows_on_oled_if_up+0xe0>)
 80009c2:	f001 fef3 	bl	80027ac <ssd1306_WriteString>

	MenuItem_t * currentItem_buff_up = currentItem;				// Create buffer on selected current item pointer.
 80009c6:	4b29      	ldr	r3, [pc, #164]	; (8000a6c <print_rows_on_oled_if_up+0xe4>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	617b      	str	r3, [r7, #20]
	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 80009cc:	4b24      	ldr	r3, [pc, #144]	; (8000a60 <print_rows_on_oled_if_up+0xd8>)
 80009ce:	881b      	ldrh	r3, [r3, #0]
 80009d0:	74fb      	strb	r3, [r7, #19]
 80009d2:	e035      	b.n	8000a40 <print_rows_on_oled_if_up+0xb8>
	{
		// Print number of menu item
		itoa(currentItem_buff_up -> id, str, 10);
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	7c1b      	ldrb	r3, [r3, #16]
 80009d8:	4618      	mov	r0, r3
 80009da:	463b      	mov	r3, r7
 80009dc:	220a      	movs	r2, #10
 80009de:	4619      	mov	r1, r3
 80009e0:	f004 f85a 	bl	8004a98 <itoa>
		ssd1306_SetCursor(start_print_id_menu_x, row);
 80009e4:	4b22      	ldr	r3, [pc, #136]	; (8000a70 <print_rows_on_oled_if_up+0xe8>)
 80009e6:	881b      	ldrh	r3, [r3, #0]
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	7cfa      	ldrb	r2, [r7, #19]
 80009ec:	4611      	mov	r1, r2
 80009ee:	4618      	mov	r0, r3
 80009f0:	f001 ff02 	bl	80027f8 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 80009f4:	4a1b      	ldr	r2, [pc, #108]	; (8000a64 <print_rows_on_oled_if_up+0xdc>)
 80009f6:	4638      	mov	r0, r7
 80009f8:	2301      	movs	r3, #1
 80009fa:	ca06      	ldmia	r2, {r1, r2}
 80009fc:	f001 fed6 	bl	80027ac <ssd1306_WriteString>

		// Print name of menu item
		strncpy(str, currentItem_buff_up -> name, 15);
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	6959      	ldr	r1, [r3, #20]
 8000a04:	463b      	mov	r3, r7
 8000a06:	220f      	movs	r2, #15
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f004 f84f 	bl	8004aac <strncpy>
		ssd1306_SetCursor(start_print_name_menu_x, row);
 8000a0e:	4b19      	ldr	r3, [pc, #100]	; (8000a74 <print_rows_on_oled_if_up+0xec>)
 8000a10:	881b      	ldrh	r3, [r3, #0]
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	7cfa      	ldrb	r2, [r7, #19]
 8000a16:	4611      	mov	r1, r2
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f001 feed 	bl	80027f8 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8000a1e:	4a11      	ldr	r2, [pc, #68]	; (8000a64 <print_rows_on_oled_if_up+0xdc>)
 8000a20:	4638      	mov	r0, r7
 8000a22:	2301      	movs	r3, #1
 8000a24:	ca06      	ldmia	r2, {r1, r2}
 8000a26:	f001 fec1 	bl	80027ac <ssd1306_WriteString>

		currentItem_buff_up = currentItem_buff_up -> down;		// Make a step down
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	617b      	str	r3, [r7, #20]

		// Print only existing items
		if(currentItem_buff_up == 0)							// If no next item
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d00b      	beq.n	8000a4e <print_rows_on_oled_if_up+0xc6>
	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 8000a36:	4b10      	ldr	r3, [pc, #64]	; (8000a78 <print_rows_on_oled_if_up+0xf0>)
 8000a38:	781a      	ldrb	r2, [r3, #0]
 8000a3a:	7cfb      	ldrb	r3, [r7, #19]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	74fb      	strb	r3, [r7, #19]
 8000a40:	7cfb      	ldrb	r3, [r7, #19]
 8000a42:	b29a      	uxth	r2, r3
 8000a44:	4b0d      	ldr	r3, [pc, #52]	; (8000a7c <print_rows_on_oled_if_up+0xf4>)
 8000a46:	881b      	ldrh	r3, [r3, #0]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d9c3      	bls.n	80009d4 <print_rows_on_oled_if_up+0x4c>
 8000a4c:	e000      	b.n	8000a50 <print_rows_on_oled_if_up+0xc8>
		{
			break;
 8000a4e:	bf00      	nop
		}
	}
	ssd1306_UpdateScreen();
 8000a50:	f001 fd9c 	bl	800258c <ssd1306_UpdateScreen>
	scroll_bar();
 8000a54:	f7ff fe9e 	bl	8000794 <scroll_bar>
}
 8000a58:	bf00      	nop
 8000a5a:	3718      	adds	r7, #24
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20000014 	.word	0x20000014
 8000a64:	20000024 	.word	0x20000024
 8000a68:	20000010 	.word	0x20000010
 8000a6c:	2000000c 	.word	0x2000000c
 8000a70:	2000001e 	.word	0x2000001e
 8000a74:	20000020 	.word	0x20000020
 8000a78:	2000001c 	.word	0x2000001c
 8000a7c:	2000001a 	.word	0x2000001a

08000a80 <print_rows_on_oled_if_down>:
// ----------------------------------------------------------------------------------------
void print_rows_on_oled_if_down(void)	// print text menu item
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b086      	sub	sp, #24
 8000a84:	af00      	add	r7, sp, #0
	char str[16] = {0};
 8000a86:	2300      	movs	r3, #0
 8000a88:	603b      	str	r3, [r7, #0]
 8000a8a:	1d3b      	adds	r3, r7, #4
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]

	clear_menu_items (true , true , true , true );
 8000a94:	2301      	movs	r3, #1
 8000a96:	2201      	movs	r2, #1
 8000a98:	2101      	movs	r1, #1
 8000a9a:	2001      	movs	r0, #1
 8000a9c:	f7ff fefe 	bl	800089c <clear_menu_items>

	print_rectangle_on_head();
 8000aa0:	f7ff feec 	bl	800087c <print_rectangle_on_head>

	// Print pointer on first item menu
	ssd1306_SetCursor(0, first_menu_row);
 8000aa4:	4b2f      	ldr	r3, [pc, #188]	; (8000b64 <print_rows_on_oled_if_down+0xe4>)
 8000aa6:	881b      	ldrh	r3, [r3, #0]
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	4619      	mov	r1, r3
 8000aac:	2000      	movs	r0, #0
 8000aae:	f001 fea3 	bl	80027f8 <ssd1306_SetCursor>
	ssd1306_WriteString(str_pointer,  Font_7x10, White);
 8000ab2:	4a2d      	ldr	r2, [pc, #180]	; (8000b68 <print_rows_on_oled_if_down+0xe8>)
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	ca06      	ldmia	r2, {r1, r2}
 8000ab8:	482c      	ldr	r0, [pc, #176]	; (8000b6c <print_rows_on_oled_if_down+0xec>)
 8000aba:	f001 fe77 	bl	80027ac <ssd1306_WriteString>

	MenuItem_t * currentItem_buff = currentItem;
 8000abe:	4b2c      	ldr	r3, [pc, #176]	; (8000b70 <print_rows_on_oled_if_down+0xf0>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	617b      	str	r3, [r7, #20]
	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 8000ac4:	4b27      	ldr	r3, [pc, #156]	; (8000b64 <print_rows_on_oled_if_down+0xe4>)
 8000ac6:	881b      	ldrh	r3, [r3, #0]
 8000ac8:	74fb      	strb	r3, [r7, #19]
 8000aca:	e03b      	b.n	8000b44 <print_rows_on_oled_if_down+0xc4>
	{
		// Print number of menu item
        itoa(currentItem_buff -> id, str, 10);
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	7c1b      	ldrb	r3, [r3, #16]
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	463b      	mov	r3, r7
 8000ad4:	220a      	movs	r2, #10
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	f003 ffde 	bl	8004a98 <itoa>
		ssd1306_SetCursor(start_print_id_menu_x, row);
 8000adc:	4b25      	ldr	r3, [pc, #148]	; (8000b74 <print_rows_on_oled_if_down+0xf4>)
 8000ade:	881b      	ldrh	r3, [r3, #0]
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	7cfa      	ldrb	r2, [r7, #19]
 8000ae4:	4611      	mov	r1, r2
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f001 fe86 	bl	80027f8 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8000aec:	4a1e      	ldr	r2, [pc, #120]	; (8000b68 <print_rows_on_oled_if_down+0xe8>)
 8000aee:	4638      	mov	r0, r7
 8000af0:	2301      	movs	r3, #1
 8000af2:	ca06      	ldmia	r2, {r1, r2}
 8000af4:	f001 fe5a 	bl	80027ac <ssd1306_WriteString>

		// Print name of menu item
		memset(str, 0, sizeof(str));
 8000af8:	463b      	mov	r3, r7
 8000afa:	2210      	movs	r2, #16
 8000afc:	2100      	movs	r1, #0
 8000afe:	4618      	mov	r0, r3
 8000b00:	f003 ffcc 	bl	8004a9c <memset>
	    strncpy(str, currentItem_buff -> name, 15);
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	6959      	ldr	r1, [r3, #20]
 8000b08:	463b      	mov	r3, r7
 8000b0a:	220f      	movs	r2, #15
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f003 ffcd 	bl	8004aac <strncpy>
	    ssd1306_SetCursor(start_print_name_menu_x, row);
 8000b12:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <print_rows_on_oled_if_down+0xf8>)
 8000b14:	881b      	ldrh	r3, [r3, #0]
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	7cfa      	ldrb	r2, [r7, #19]
 8000b1a:	4611      	mov	r1, r2
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f001 fe6b 	bl	80027f8 <ssd1306_SetCursor>
	    ssd1306_WriteString(str,  Font_7x10, White);
 8000b22:	4a11      	ldr	r2, [pc, #68]	; (8000b68 <print_rows_on_oled_if_down+0xe8>)
 8000b24:	4638      	mov	r0, r7
 8000b26:	2301      	movs	r3, #1
 8000b28:	ca06      	ldmia	r2, {r1, r2}
 8000b2a:	f001 fe3f 	bl	80027ac <ssd1306_WriteString>

	    currentItem_buff = currentItem_buff -> down;			// Make a step down
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	617b      	str	r3, [r7, #20]

	    // Print only existing items
	    if(currentItem_buff == 0)		 						// If no next item
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d00b      	beq.n	8000b52 <print_rows_on_oled_if_down+0xd2>
	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 8000b3a:	4b10      	ldr	r3, [pc, #64]	; (8000b7c <print_rows_on_oled_if_down+0xfc>)
 8000b3c:	781a      	ldrb	r2, [r3, #0]
 8000b3e:	7cfb      	ldrb	r3, [r7, #19]
 8000b40:	4413      	add	r3, r2
 8000b42:	74fb      	strb	r3, [r7, #19]
 8000b44:	7cfb      	ldrb	r3, [r7, #19]
 8000b46:	b29a      	uxth	r2, r3
 8000b48:	4b0d      	ldr	r3, [pc, #52]	; (8000b80 <print_rows_on_oled_if_down+0x100>)
 8000b4a:	881b      	ldrh	r3, [r3, #0]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d9bd      	bls.n	8000acc <print_rows_on_oled_if_down+0x4c>
 8000b50:	e000      	b.n	8000b54 <print_rows_on_oled_if_down+0xd4>
	    {
	    	break;
 8000b52:	bf00      	nop
	    }
	 }
	 ssd1306_UpdateScreen();
 8000b54:	f001 fd1a 	bl	800258c <ssd1306_UpdateScreen>
	 scroll_bar();
 8000b58:	f7ff fe1c 	bl	8000794 <scroll_bar>
}
 8000b5c:	bf00      	nop
 8000b5e:	3718      	adds	r7, #24
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20000014 	.word	0x20000014
 8000b68:	20000024 	.word	0x20000024
 8000b6c:	20000010 	.word	0x20000010
 8000b70:	2000000c 	.word	0x2000000c
 8000b74:	2000001e 	.word	0x2000001e
 8000b78:	20000020 	.word	0x20000020
 8000b7c:	2000001c 	.word	0x2000001c
 8000b80:	2000001a 	.word	0x2000001a

08000b84 <print_menu_init>:
// ----------------------------------------------------------------------------------------
// Print first 4 items of menu (only first time)
void print_menu_init(void)
{
 8000b84:	b590      	push	{r4, r7, lr}
 8000b86:	b089      	sub	sp, #36	; 0x24
 8000b88:	af00      	add	r7, sp, #0
	MenuItem_t * currentItem_buff = currentItem;
 8000b8a:	4b41      	ldr	r3, [pc, #260]	; (8000c90 <print_menu_init+0x10c>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	61fb      	str	r3, [r7, #28]

	print_rectangle_on_head();
 8000b90:	f7ff fe74 	bl	800087c <print_rectangle_on_head>

	//Print selected name of menu
	char str[20] = ">> MAIN MENU <<";
 8000b94:	4b3f      	ldr	r3, [pc, #252]	; (8000c94 <print_menu_init+0x110>)
 8000b96:	1d3c      	adds	r4, r7, #4
 8000b98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b9a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	617b      	str	r3, [r7, #20]
	ssd1306_SetCursor(10, 3);
 8000ba2:	2103      	movs	r1, #3
 8000ba4:	200a      	movs	r0, #10
 8000ba6:	f001 fe27 	bl	80027f8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8000baa:	4a3b      	ldr	r2, [pc, #236]	; (8000c98 <print_menu_init+0x114>)
 8000bac:	1d38      	adds	r0, r7, #4
 8000bae:	2301      	movs	r3, #1
 8000bb0:	ca06      	ldmia	r2, {r1, r2}
 8000bb2:	f001 fdfb 	bl	80027ac <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8000bb6:	f001 fce9 	bl	800258c <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	2214      	movs	r2, #20
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f003 ff6b 	bl	8004a9c <memset>

	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 8000bc6:	4b35      	ldr	r3, [pc, #212]	; (8000c9c <print_menu_init+0x118>)
 8000bc8:	881b      	ldrh	r3, [r3, #0]
 8000bca:	76fb      	strb	r3, [r7, #27]
 8000bcc:	e051      	b.n	8000c72 <print_menu_init+0xee>
	{
		if(row == first_menu_row)
 8000bce:	7efb      	ldrb	r3, [r7, #27]
 8000bd0:	b29a      	uxth	r2, r3
 8000bd2:	4b32      	ldr	r3, [pc, #200]	; (8000c9c <print_menu_init+0x118>)
 8000bd4:	881b      	ldrh	r3, [r3, #0]
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	d10d      	bne.n	8000bf6 <print_menu_init+0x72>
		{
			// Print pointer on menu (On top)
			char str_pointer[4] = "->";
 8000bda:	f643 632d 	movw	r3, #15917	; 0x3e2d
 8000bde:	603b      	str	r3, [r7, #0]
			ssd1306_SetCursor(0, row);
 8000be0:	7efb      	ldrb	r3, [r7, #27]
 8000be2:	4619      	mov	r1, r3
 8000be4:	2000      	movs	r0, #0
 8000be6:	f001 fe07 	bl	80027f8 <ssd1306_SetCursor>
			ssd1306_WriteString(str_pointer,  Font_7x10, White);
 8000bea:	4a2b      	ldr	r2, [pc, #172]	; (8000c98 <print_menu_init+0x114>)
 8000bec:	4638      	mov	r0, r7
 8000bee:	2301      	movs	r3, #1
 8000bf0:	ca06      	ldmia	r2, {r1, r2}
 8000bf2:	f001 fddb 	bl	80027ac <ssd1306_WriteString>
		}
		// Print number of menu item
		itoa(currentItem_buff -> id, str, 10);
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	7c1b      	ldrb	r3, [r3, #16]
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	1d3b      	adds	r3, r7, #4
 8000bfe:	220a      	movs	r2, #10
 8000c00:	4619      	mov	r1, r3
 8000c02:	f003 ff49 	bl	8004a98 <itoa>
		ssd1306_SetCursor(start_print_id_menu_x, row);
 8000c06:	4b26      	ldr	r3, [pc, #152]	; (8000ca0 <print_menu_init+0x11c>)
 8000c08:	881b      	ldrh	r3, [r3, #0]
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	7efa      	ldrb	r2, [r7, #27]
 8000c0e:	4611      	mov	r1, r2
 8000c10:	4618      	mov	r0, r3
 8000c12:	f001 fdf1 	bl	80027f8 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8000c16:	4a20      	ldr	r2, [pc, #128]	; (8000c98 <print_menu_init+0x114>)
 8000c18:	1d38      	adds	r0, r7, #4
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	ca06      	ldmia	r2, {r1, r2}
 8000c1e:	f001 fdc5 	bl	80027ac <ssd1306_WriteString>
		memset(str, 0, sizeof(str));
 8000c22:	1d3b      	adds	r3, r7, #4
 8000c24:	2214      	movs	r2, #20
 8000c26:	2100      	movs	r1, #0
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f003 ff37 	bl	8004a9c <memset>

		// Print menu of menu item
		strncpy(str, currentItem_buff -> name, 15);
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	6959      	ldr	r1, [r3, #20]
 8000c32:	1d3b      	adds	r3, r7, #4
 8000c34:	220f      	movs	r2, #15
 8000c36:	4618      	mov	r0, r3
 8000c38:	f003 ff38 	bl	8004aac <strncpy>
		ssd1306_SetCursor(start_print_name_menu_x, row);
 8000c3c:	4b19      	ldr	r3, [pc, #100]	; (8000ca4 <print_menu_init+0x120>)
 8000c3e:	881b      	ldrh	r3, [r3, #0]
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	7efa      	ldrb	r2, [r7, #27]
 8000c44:	4611      	mov	r1, r2
 8000c46:	4618      	mov	r0, r3
 8000c48:	f001 fdd6 	bl	80027f8 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8000c4c:	4a12      	ldr	r2, [pc, #72]	; (8000c98 <print_menu_init+0x114>)
 8000c4e:	1d38      	adds	r0, r7, #4
 8000c50:	2301      	movs	r3, #1
 8000c52:	ca06      	ldmia	r2, {r1, r2}
 8000c54:	f001 fdaa 	bl	80027ac <ssd1306_WriteString>

		ssd1306_UpdateScreen();
 8000c58:	f001 fc98 	bl	800258c <ssd1306_UpdateScreen>

		currentItem_buff = currentItem_buff -> down;
 8000c5c:	69fb      	ldr	r3, [r7, #28]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	61fb      	str	r3, [r7, #28]

		if(currentItem_buff == 0)						// If no menu item
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d00b      	beq.n	8000c80 <print_menu_init+0xfc>
	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 8000c68:	4b0f      	ldr	r3, [pc, #60]	; (8000ca8 <print_menu_init+0x124>)
 8000c6a:	781a      	ldrb	r2, [r3, #0]
 8000c6c:	7efb      	ldrb	r3, [r7, #27]
 8000c6e:	4413      	add	r3, r2
 8000c70:	76fb      	strb	r3, [r7, #27]
 8000c72:	7efb      	ldrb	r3, [r7, #27]
 8000c74:	b29a      	uxth	r2, r3
 8000c76:	4b0d      	ldr	r3, [pc, #52]	; (8000cac <print_menu_init+0x128>)
 8000c78:	881b      	ldrh	r3, [r3, #0]
 8000c7a:	429a      	cmp	r2, r3
 8000c7c:	d9a7      	bls.n	8000bce <print_menu_init+0x4a>
 8000c7e:	e000      	b.n	8000c82 <print_menu_init+0xfe>
		{
			break;
 8000c80:	bf00      	nop
		}
	}
	scroll_bar();
 8000c82:	f7ff fd87 	bl	8000794 <scroll_bar>
}
 8000c86:	bf00      	nop
 8000c88:	3724      	adds	r7, #36	; 0x24
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd90      	pop	{r4, r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	2000000c 	.word	0x2000000c
 8000c94:	08004b80 	.word	0x08004b80
 8000c98:	20000024 	.word	0x20000024
 8000c9c:	20000014 	.word	0x20000014
 8000ca0:	2000001e 	.word	0x2000001e
 8000ca4:	20000020 	.word	0x20000020
 8000ca8:	2000001c 	.word	0x2000001c
 8000cac:	2000001a 	.word	0x2000001a

08000cb0 <action>:
// ----------------------------------------------------------------------------------------
void action(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b088      	sub	sp, #32
 8000cb4:	af00      	add	r7, sp, #0
	char str[16] = {0};
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	607b      	str	r3, [r7, #4]
 8000cba:	f107 0308 	add.w	r3, r7, #8
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	605a      	str	r2, [r3, #4]
 8000cc4:	609a      	str	r2, [r3, #8]

	clearn_oled();
 8000cc6:	f001 fbb1 	bl	800242c <clearn_oled>

	print_rectangle_on_head();
 8000cca:	f7ff fdd7 	bl	800087c <print_rectangle_on_head>

	//Print selected name of menu on top of OLED
	MenuItem_t * currentItem_buff_parent = currentItem;
 8000cce:	4b40      	ldr	r3, [pc, #256]	; (8000dd0 <action+0x120>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	617b      	str	r3, [r7, #20]
	currentItem_buff_parent = currentItem_buff_parent -> parent;
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	617b      	str	r3, [r7, #20]

	strncpy(str, currentItem_buff_parent -> name, 15);
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	6959      	ldr	r1, [r3, #20]
 8000cde:	1d3b      	adds	r3, r7, #4
 8000ce0:	220f      	movs	r2, #15
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f003 fee2 	bl	8004aac <strncpy>
	ssd1306_SetCursor(10, 3);
 8000ce8:	2103      	movs	r1, #3
 8000cea:	200a      	movs	r0, #10
 8000cec:	f001 fd84 	bl	80027f8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8000cf0:	4a38      	ldr	r2, [pc, #224]	; (8000dd4 <action+0x124>)
 8000cf2:	1d38      	adds	r0, r7, #4
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	ca06      	ldmia	r2, {r1, r2}
 8000cf8:	f001 fd58 	bl	80027ac <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8000cfc:	f001 fc46 	bl	800258c <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8000d00:	1d3b      	adds	r3, r7, #4
 8000d02:	2210      	movs	r2, #16
 8000d04:	2100      	movs	r1, #0
 8000d06:	4618      	mov	r0, r3
 8000d08:	f003 fec8 	bl	8004a9c <memset>

	MenuItem_t * currentItem_buff = currentItem;
 8000d0c:	4b30      	ldr	r3, [pc, #192]	; (8000dd0 <action+0x120>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	61fb      	str	r3, [r7, #28]

	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 8000d12:	4b31      	ldr	r3, [pc, #196]	; (8000dd8 <action+0x128>)
 8000d14:	881b      	ldrh	r3, [r3, #0]
 8000d16:	76fb      	strb	r3, [r7, #27]
 8000d18:	e04b      	b.n	8000db2 <action+0x102>
	{
		if(row == first_menu_row)
 8000d1a:	7efb      	ldrb	r3, [r7, #27]
 8000d1c:	b29a      	uxth	r2, r3
 8000d1e:	4b2e      	ldr	r3, [pc, #184]	; (8000dd8 <action+0x128>)
 8000d20:	881b      	ldrh	r3, [r3, #0]
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d10d      	bne.n	8000d42 <action+0x92>
		{
			// Print pointer on menu
			char str_pointer[4] = "->";
 8000d26:	f643 632d 	movw	r3, #15917	; 0x3e2d
 8000d2a:	603b      	str	r3, [r7, #0]
			ssd1306_SetCursor(0, row);
 8000d2c:	7efb      	ldrb	r3, [r7, #27]
 8000d2e:	4619      	mov	r1, r3
 8000d30:	2000      	movs	r0, #0
 8000d32:	f001 fd61 	bl	80027f8 <ssd1306_SetCursor>
			ssd1306_WriteString(str_pointer,  Font_7x10, White);
 8000d36:	4a27      	ldr	r2, [pc, #156]	; (8000dd4 <action+0x124>)
 8000d38:	4638      	mov	r0, r7
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	ca06      	ldmia	r2, {r1, r2}
 8000d3e:	f001 fd35 	bl	80027ac <ssd1306_WriteString>
		}
		// Print number of menu item
		itoa(currentItem_buff -> id, str, 10);
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	7c1b      	ldrb	r3, [r3, #16]
 8000d46:	4618      	mov	r0, r3
 8000d48:	1d3b      	adds	r3, r7, #4
 8000d4a:	220a      	movs	r2, #10
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	f003 fea3 	bl	8004a98 <itoa>
		ssd1306_SetCursor(start_print_id_menu_x, row);
 8000d52:	4b22      	ldr	r3, [pc, #136]	; (8000ddc <action+0x12c>)
 8000d54:	881b      	ldrh	r3, [r3, #0]
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	7efa      	ldrb	r2, [r7, #27]
 8000d5a:	4611      	mov	r1, r2
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f001 fd4b 	bl	80027f8 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8000d62:	4a1c      	ldr	r2, [pc, #112]	; (8000dd4 <action+0x124>)
 8000d64:	1d38      	adds	r0, r7, #4
 8000d66:	2301      	movs	r3, #1
 8000d68:	ca06      	ldmia	r2, {r1, r2}
 8000d6a:	f001 fd1f 	bl	80027ac <ssd1306_WriteString>

		// Print menu of menu item
		strncpy(str, currentItem_buff -> name, 15);
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	6959      	ldr	r1, [r3, #20]
 8000d72:	1d3b      	adds	r3, r7, #4
 8000d74:	220f      	movs	r2, #15
 8000d76:	4618      	mov	r0, r3
 8000d78:	f003 fe98 	bl	8004aac <strncpy>
		ssd1306_SetCursor(start_print_name_menu_x, row);
 8000d7c:	4b18      	ldr	r3, [pc, #96]	; (8000de0 <action+0x130>)
 8000d7e:	881b      	ldrh	r3, [r3, #0]
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	7efa      	ldrb	r2, [r7, #27]
 8000d84:	4611      	mov	r1, r2
 8000d86:	4618      	mov	r0, r3
 8000d88:	f001 fd36 	bl	80027f8 <ssd1306_SetCursor>
		ssd1306_WriteString(str,  Font_7x10, White);
 8000d8c:	4a11      	ldr	r2, [pc, #68]	; (8000dd4 <action+0x124>)
 8000d8e:	1d38      	adds	r0, r7, #4
 8000d90:	2301      	movs	r3, #1
 8000d92:	ca06      	ldmia	r2, {r1, r2}
 8000d94:	f001 fd0a 	bl	80027ac <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000d98:	f001 fbf8 	bl	800258c <ssd1306_UpdateScreen>

		currentItem_buff = currentItem_buff -> down;
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	61fb      	str	r3, [r7, #28]
		if(currentItem_buff == 0)
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d00b      	beq.n	8000dc0 <action+0x110>
	for (uint8_t row = first_menu_row; row <= fourth_menu_row; row = row + row_step)
 8000da8:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <action+0x134>)
 8000daa:	781a      	ldrb	r2, [r3, #0]
 8000dac:	7efb      	ldrb	r3, [r7, #27]
 8000dae:	4413      	add	r3, r2
 8000db0:	76fb      	strb	r3, [r7, #27]
 8000db2:	7efb      	ldrb	r3, [r7, #27]
 8000db4:	b29a      	uxth	r2, r3
 8000db6:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <action+0x138>)
 8000db8:	881b      	ldrh	r3, [r3, #0]
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	d9ad      	bls.n	8000d1a <action+0x6a>
 8000dbe:	e000      	b.n	8000dc2 <action+0x112>
		{
			break;
 8000dc0:	bf00      	nop
		}
	}
	scroll_bar();
 8000dc2:	f7ff fce7 	bl	8000794 <scroll_bar>
}
 8000dc6:	bf00      	nop
 8000dc8:	3720      	adds	r7, #32
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	2000000c 	.word	0x2000000c
 8000dd4:	20000024 	.word	0x20000024
 8000dd8:	20000014 	.word	0x20000014
 8000ddc:	2000001e 	.word	0x2000001e
 8000de0:	20000020 	.word	0x20000020
 8000de4:	2000001c 	.word	0x2000001c
 8000de8:	2000001a 	.word	0x2000001a

08000dec <return_from_menu>:
// ----------------------------------------------------------------------------------------
void return_from_menu(void)
{
 8000dec:	b590      	push	{r4, r7, lr}
 8000dee:	b087      	sub	sp, #28
 8000df0:	af00      	add	r7, sp, #0
	currentItem = &items[0];											// Jump to main menu
 8000df2:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <return_from_menu+0x44>)
 8000df4:	4a0f      	ldr	r2, [pc, #60]	; (8000e34 <return_from_menu+0x48>)
 8000df6:	601a      	str	r2, [r3, #0]
	clearn_oled();
 8000df8:	f001 fb18 	bl	800242c <clearn_oled>

	// Print "MAIN MENU:"
	char str[20] = ">> MAIN MENU <<";
 8000dfc:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <return_from_menu+0x4c>)
 8000dfe:	1d3c      	adds	r4, r7, #4
 8000e00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000e06:	2300      	movs	r3, #0
 8000e08:	617b      	str	r3, [r7, #20]
	ssd1306_SetCursor(10, 3);
 8000e0a:	2103      	movs	r1, #3
 8000e0c:	200a      	movs	r0, #10
 8000e0e:	f001 fcf3 	bl	80027f8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8000e12:	4a0a      	ldr	r2, [pc, #40]	; (8000e3c <return_from_menu+0x50>)
 8000e14:	1d38      	adds	r0, r7, #4
 8000e16:	2301      	movs	r3, #1
 8000e18:	ca06      	ldmia	r2, {r1, r2}
 8000e1a:	f001 fcc7 	bl	80027ac <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8000e1e:	f001 fbb5 	bl	800258c <ssd1306_UpdateScreen>

	print_menu_init();													// Print all start menu
 8000e22:	f7ff feaf 	bl	8000b84 <print_menu_init>
}
 8000e26:	bf00      	nop
 8000e28:	371c      	adds	r7, #28
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd90      	pop	{r4, r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	2000000c 	.word	0x2000000c
 8000e34:	200007cc 	.word	0x200007cc
 8000e38:	08004b80 	.word	0x08004b80
 8000e3c:	20000024 	.word	0x20000024

08000e40 <do_it_function_menu_1>:
// ----------------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
void do_it_function_menu_1(void)
{
 8000e40:	b590      	push	{r4, r7, lr}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
	clearn_oled();
 8000e46:	f001 faf1 	bl	800242c <clearn_oled>

	// Print selected name of menu
	char str[16] = {0};
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	603b      	str	r3, [r7, #0]
 8000e4e:	1d3b      	adds	r3, r7, #4
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8000e58:	4b2a      	ldr	r3, [pc, #168]	; (8000f04 <do_it_function_menu_1+0xc4>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	6959      	ldr	r1, [r3, #20]
 8000e5e:	463b      	mov	r3, r7
 8000e60:	220f      	movs	r2, #15
 8000e62:	4618      	mov	r0, r3
 8000e64:	f003 fe22 	bl	8004aac <strncpy>
	ssd1306_SetCursor(10, 3);
 8000e68:	2103      	movs	r1, #3
 8000e6a:	200a      	movs	r0, #10
 8000e6c:	f001 fcc4 	bl	80027f8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8000e70:	4a25      	ldr	r2, [pc, #148]	; (8000f08 <do_it_function_menu_1+0xc8>)
 8000e72:	4638      	mov	r0, r7
 8000e74:	2301      	movs	r3, #1
 8000e76:	ca06      	ldmia	r2, {r1, r2}
 8000e78:	f001 fc98 	bl	80027ac <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8000e7c:	f001 fb86 	bl	800258c <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8000e80:	463b      	mov	r3, r7
 8000e82:	2210      	movs	r2, #16
 8000e84:	2100      	movs	r1, #0
 8000e86:	4618      	mov	r0, r3
 8000e88:	f003 fe08 	bl	8004a9c <memset>

	strncpy(str, "Doing something 1", sizeof(str));
 8000e8c:	4b1f      	ldr	r3, [pc, #124]	; (8000f0c <do_it_function_menu_1+0xcc>)
 8000e8e:	463c      	mov	r4, r7
 8000e90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	ssd1306_SetCursor(0, first_menu_row);
 8000e96:	4b1e      	ldr	r3, [pc, #120]	; (8000f10 <do_it_function_menu_1+0xd0>)
 8000e98:	881b      	ldrh	r3, [r3, #0]
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	f001 fcaa 	bl	80027f8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8000ea4:	4a18      	ldr	r2, [pc, #96]	; (8000f08 <do_it_function_menu_1+0xc8>)
 8000ea6:	4638      	mov	r0, r7
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	ca06      	ldmia	r2, {r1, r2}
 8000eac:	f001 fc7e 	bl	80027ac <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8000eb0:	f001 fb6c 	bl	800258c <ssd1306_UpdateScreen>

	button_status = BOTTON_DOESENT_PRESS;
 8000eb4:	4b17      	ldr	r3, [pc, #92]	; (8000f14 <do_it_function_menu_1+0xd4>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 8000eba:	4b17      	ldr	r3, [pc, #92]	; (8000f18 <do_it_function_menu_1+0xd8>)
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	701a      	strb	r2, [r3, #0]
	do{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ec6:	4815      	ldr	r0, [pc, #84]	; (8000f1c <do_it_function_menu_1+0xdc>)
 8000ec8:	f002 f8dd 	bl	8003086 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8000ecc:	20c8      	movs	r0, #200	; 0xc8
 8000ece:	f001 fe0d 	bl	8002aec <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ed8:	4810      	ldr	r0, [pc, #64]	; (8000f1c <do_it_function_menu_1+0xdc>)
 8000eda:	f002 f8d4 	bl	8003086 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8000ede:	20c8      	movs	r0, #200	; 0xc8
 8000ee0:	f001 fe04 	bl	8002aec <HAL_Delay>

	}while (button_status != BUTTON_ENTER);
 8000ee4:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <do_it_function_menu_1+0xd4>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b02      	cmp	r3, #2
 8000eea:	d1e9      	bne.n	8000ec0 <do_it_function_menu_1+0x80>
	block_interrupt_form_up_and_down_buttons = false;
 8000eec:	4b0a      	ldr	r3, [pc, #40]	; (8000f18 <do_it_function_menu_1+0xd8>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_1[0];										// Set global pointer on first menu
 8000ef2:	4b04      	ldr	r3, [pc, #16]	; (8000f04 <do_it_function_menu_1+0xc4>)
 8000ef4:	4a0a      	ldr	r2, [pc, #40]	; (8000f20 <do_it_function_menu_1+0xe0>)
 8000ef6:	601a      	str	r2, [r3, #0]
	action();															// Print items on OLED
 8000ef8:	f7ff feda 	bl	8000cb0 <action>
}
 8000efc:	bf00      	nop
 8000efe:	3714      	adds	r7, #20
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd90      	pop	{r4, r7, pc}
 8000f04:	2000000c 	.word	0x2000000c
 8000f08:	20000024 	.word	0x20000024
 8000f0c:	08004b94 	.word	0x08004b94
 8000f10:	20000014 	.word	0x20000014
 8000f14:	20000055 	.word	0x20000055
 8000f18:	20000054 	.word	0x20000054
 8000f1c:	40011000 	.word	0x40011000
 8000f20:	200006d0 	.word	0x200006d0

08000f24 <items_menu_1_set_par_1>:
// ----------------------------------------------------------------------------------------
void items_menu_1_set_par_1(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
	clearn_oled();
 8000f2a:	f001 fa7f 	bl	800242c <clearn_oled>

	// Print selected name of menu
	char str[16] = {0};
 8000f2e:	2300      	movs	r3, #0
 8000f30:	603b      	str	r3, [r7, #0]
 8000f32:	1d3b      	adds	r3, r7, #4
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8000f3c:	4b22      	ldr	r3, [pc, #136]	; (8000fc8 <items_menu_1_set_par_1+0xa4>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	6959      	ldr	r1, [r3, #20]
 8000f42:	463b      	mov	r3, r7
 8000f44:	220f      	movs	r2, #15
 8000f46:	4618      	mov	r0, r3
 8000f48:	f003 fdb0 	bl	8004aac <strncpy>
	ssd1306_SetCursor(10, 3);
 8000f4c:	2103      	movs	r1, #3
 8000f4e:	200a      	movs	r0, #10
 8000f50:	f001 fc52 	bl	80027f8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8000f54:	4a1d      	ldr	r2, [pc, #116]	; (8000fcc <items_menu_1_set_par_1+0xa8>)
 8000f56:	4638      	mov	r0, r7
 8000f58:	2301      	movs	r3, #1
 8000f5a:	ca06      	ldmia	r2, {r1, r2}
 8000f5c:	f001 fc26 	bl	80027ac <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8000f60:	f001 fb14 	bl	800258c <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8000f64:	463b      	mov	r3, r7
 8000f66:	2210      	movs	r2, #16
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f003 fd96 	bl	8004a9c <memset>

	strncpy(str, "Set parametr 1", sizeof(str));
 8000f70:	463b      	mov	r3, r7
 8000f72:	2210      	movs	r2, #16
 8000f74:	4916      	ldr	r1, [pc, #88]	; (8000fd0 <items_menu_1_set_par_1+0xac>)
 8000f76:	4618      	mov	r0, r3
 8000f78:	f003 fd98 	bl	8004aac <strncpy>
	ssd1306_SetCursor(0, first_menu_row);
 8000f7c:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <items_menu_1_set_par_1+0xb0>)
 8000f7e:	881b      	ldrh	r3, [r3, #0]
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	4619      	mov	r1, r3
 8000f84:	2000      	movs	r0, #0
 8000f86:	f001 fc37 	bl	80027f8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8000f8a:	4a10      	ldr	r2, [pc, #64]	; (8000fcc <items_menu_1_set_par_1+0xa8>)
 8000f8c:	4638      	mov	r0, r7
 8000f8e:	2301      	movs	r3, #1
 8000f90:	ca06      	ldmia	r2, {r1, r2}
 8000f92:	f001 fc0b 	bl	80027ac <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8000f96:	f001 faf9 	bl	800258c <ssd1306_UpdateScreen>

	button_status = BOTTON_DOESENT_PRESS;
 8000f9a:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <items_menu_1_set_par_1+0xb4>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 8000fa0:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <items_menu_1_set_par_1+0xb8>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	701a      	strb	r2, [r3, #0]
	do{
		// Doing settings <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

	}while (button_status != BUTTON_ENTER);
 8000fa6:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <items_menu_1_set_par_1+0xb4>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	d1fb      	bne.n	8000fa6 <items_menu_1_set_par_1+0x82>
	block_interrupt_form_up_and_down_buttons = false;
 8000fae:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <items_menu_1_set_par_1+0xb8>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_1[0];										// Set global pointer on first menu
 8000fb4:	4b04      	ldr	r3, [pc, #16]	; (8000fc8 <items_menu_1_set_par_1+0xa4>)
 8000fb6:	4a0a      	ldr	r2, [pc, #40]	; (8000fe0 <items_menu_1_set_par_1+0xbc>)
 8000fb8:	601a      	str	r2, [r3, #0]
	action();															// Print items on OLED
 8000fba:	f7ff fe79 	bl	8000cb0 <action>
}
 8000fbe:	bf00      	nop
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	2000000c 	.word	0x2000000c
 8000fcc:	20000024 	.word	0x20000024
 8000fd0:	08004ba8 	.word	0x08004ba8
 8000fd4:	20000014 	.word	0x20000014
 8000fd8:	20000055 	.word	0x20000055
 8000fdc:	20000054 	.word	0x20000054
 8000fe0:	200006d0 	.word	0x200006d0

08000fe4 <items_menu_1_set_par_2>:
// ----------------------------------------------------------------------------------------
void items_menu_1_set_par_2(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
	clearn_oled();
 8000fea:	f001 fa1f 	bl	800242c <clearn_oled>

	// Print selected name of menu
	char str[16] = {0};
 8000fee:	2300      	movs	r3, #0
 8000ff0:	603b      	str	r3, [r7, #0]
 8000ff2:	1d3b      	adds	r3, r7, #4
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8000ffc:	4b22      	ldr	r3, [pc, #136]	; (8001088 <items_menu_1_set_par_2+0xa4>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	6959      	ldr	r1, [r3, #20]
 8001002:	463b      	mov	r3, r7
 8001004:	220f      	movs	r2, #15
 8001006:	4618      	mov	r0, r3
 8001008:	f003 fd50 	bl	8004aac <strncpy>
	ssd1306_SetCursor(10, 3);
 800100c:	2103      	movs	r1, #3
 800100e:	200a      	movs	r0, #10
 8001010:	f001 fbf2 	bl	80027f8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8001014:	4a1d      	ldr	r2, [pc, #116]	; (800108c <items_menu_1_set_par_2+0xa8>)
 8001016:	4638      	mov	r0, r7
 8001018:	2301      	movs	r3, #1
 800101a:	ca06      	ldmia	r2, {r1, r2}
 800101c:	f001 fbc6 	bl	80027ac <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001020:	f001 fab4 	bl	800258c <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8001024:	463b      	mov	r3, r7
 8001026:	2210      	movs	r2, #16
 8001028:	2100      	movs	r1, #0
 800102a:	4618      	mov	r0, r3
 800102c:	f003 fd36 	bl	8004a9c <memset>

	strncpy(str, "Set parametr 2", sizeof(str));
 8001030:	463b      	mov	r3, r7
 8001032:	2210      	movs	r2, #16
 8001034:	4916      	ldr	r1, [pc, #88]	; (8001090 <items_menu_1_set_par_2+0xac>)
 8001036:	4618      	mov	r0, r3
 8001038:	f003 fd38 	bl	8004aac <strncpy>
	ssd1306_SetCursor(0, first_menu_row);
 800103c:	4b15      	ldr	r3, [pc, #84]	; (8001094 <items_menu_1_set_par_2+0xb0>)
 800103e:	881b      	ldrh	r3, [r3, #0]
 8001040:	b2db      	uxtb	r3, r3
 8001042:	4619      	mov	r1, r3
 8001044:	2000      	movs	r0, #0
 8001046:	f001 fbd7 	bl	80027f8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 800104a:	4a10      	ldr	r2, [pc, #64]	; (800108c <items_menu_1_set_par_2+0xa8>)
 800104c:	4638      	mov	r0, r7
 800104e:	2301      	movs	r3, #1
 8001050:	ca06      	ldmia	r2, {r1, r2}
 8001052:	f001 fbab 	bl	80027ac <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001056:	f001 fa99 	bl	800258c <ssd1306_UpdateScreen>

	button_status = BOTTON_DOESENT_PRESS;
 800105a:	4b0f      	ldr	r3, [pc, #60]	; (8001098 <items_menu_1_set_par_2+0xb4>)
 800105c:	2200      	movs	r2, #0
 800105e:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 8001060:	4b0e      	ldr	r3, [pc, #56]	; (800109c <items_menu_1_set_par_2+0xb8>)
 8001062:	2201      	movs	r2, #1
 8001064:	701a      	strb	r2, [r3, #0]
	do{
		// Doing settings <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	}while (button_status != BUTTON_ENTER);
 8001066:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <items_menu_1_set_par_2+0xb4>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2b02      	cmp	r3, #2
 800106c:	d1fb      	bne.n	8001066 <items_menu_1_set_par_2+0x82>
	block_interrupt_form_up_and_down_buttons = false;
 800106e:	4b0b      	ldr	r3, [pc, #44]	; (800109c <items_menu_1_set_par_2+0xb8>)
 8001070:	2200      	movs	r2, #0
 8001072:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_1[0];										// Set global pointer on first menu
 8001074:	4b04      	ldr	r3, [pc, #16]	; (8001088 <items_menu_1_set_par_2+0xa4>)
 8001076:	4a0a      	ldr	r2, [pc, #40]	; (80010a0 <items_menu_1_set_par_2+0xbc>)
 8001078:	601a      	str	r2, [r3, #0]
	action();															// Print items on OLED
 800107a:	f7ff fe19 	bl	8000cb0 <action>
}
 800107e:	bf00      	nop
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	2000000c 	.word	0x2000000c
 800108c:	20000024 	.word	0x20000024
 8001090:	08004bb8 	.word	0x08004bb8
 8001094:	20000014 	.word	0x20000014
 8001098:	20000055 	.word	0x20000055
 800109c:	20000054 	.word	0x20000054
 80010a0:	200006d0 	.word	0x200006d0

080010a4 <items_menu_1_set_par_3>:
// ----------------------------------------------------------------------------------------
void items_menu_1_set_par_3(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
	clearn_oled();
 80010aa:	f001 f9bf 	bl	800242c <clearn_oled>

	// Print selected name of menu
	char str[16] = {0};
 80010ae:	2300      	movs	r3, #0
 80010b0:	603b      	str	r3, [r7, #0]
 80010b2:	1d3b      	adds	r3, r7, #4
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 80010bc:	4b22      	ldr	r3, [pc, #136]	; (8001148 <items_menu_1_set_par_3+0xa4>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	6959      	ldr	r1, [r3, #20]
 80010c2:	463b      	mov	r3, r7
 80010c4:	220f      	movs	r2, #15
 80010c6:	4618      	mov	r0, r3
 80010c8:	f003 fcf0 	bl	8004aac <strncpy>
	ssd1306_SetCursor(10, 3);
 80010cc:	2103      	movs	r1, #3
 80010ce:	200a      	movs	r0, #10
 80010d0:	f001 fb92 	bl	80027f8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 80010d4:	4a1d      	ldr	r2, [pc, #116]	; (800114c <items_menu_1_set_par_3+0xa8>)
 80010d6:	4638      	mov	r0, r7
 80010d8:	2301      	movs	r3, #1
 80010da:	ca06      	ldmia	r2, {r1, r2}
 80010dc:	f001 fb66 	bl	80027ac <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80010e0:	f001 fa54 	bl	800258c <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 80010e4:	463b      	mov	r3, r7
 80010e6:	2210      	movs	r2, #16
 80010e8:	2100      	movs	r1, #0
 80010ea:	4618      	mov	r0, r3
 80010ec:	f003 fcd6 	bl	8004a9c <memset>

	strncpy(str, "Set parametr 3", sizeof(str));
 80010f0:	463b      	mov	r3, r7
 80010f2:	2210      	movs	r2, #16
 80010f4:	4916      	ldr	r1, [pc, #88]	; (8001150 <items_menu_1_set_par_3+0xac>)
 80010f6:	4618      	mov	r0, r3
 80010f8:	f003 fcd8 	bl	8004aac <strncpy>
	ssd1306_SetCursor(0, first_menu_row);
 80010fc:	4b15      	ldr	r3, [pc, #84]	; (8001154 <items_menu_1_set_par_3+0xb0>)
 80010fe:	881b      	ldrh	r3, [r3, #0]
 8001100:	b2db      	uxtb	r3, r3
 8001102:	4619      	mov	r1, r3
 8001104:	2000      	movs	r0, #0
 8001106:	f001 fb77 	bl	80027f8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 800110a:	4a10      	ldr	r2, [pc, #64]	; (800114c <items_menu_1_set_par_3+0xa8>)
 800110c:	4638      	mov	r0, r7
 800110e:	2301      	movs	r3, #1
 8001110:	ca06      	ldmia	r2, {r1, r2}
 8001112:	f001 fb4b 	bl	80027ac <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001116:	f001 fa39 	bl	800258c <ssd1306_UpdateScreen>

	button_status = BOTTON_DOESENT_PRESS;
 800111a:	4b0f      	ldr	r3, [pc, #60]	; (8001158 <items_menu_1_set_par_3+0xb4>)
 800111c:	2200      	movs	r2, #0
 800111e:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 8001120:	4b0e      	ldr	r3, [pc, #56]	; (800115c <items_menu_1_set_par_3+0xb8>)
 8001122:	2201      	movs	r2, #1
 8001124:	701a      	strb	r2, [r3, #0]
	do{
		// Doing settings <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	}while (button_status != BUTTON_ENTER);
 8001126:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <items_menu_1_set_par_3+0xb4>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	2b02      	cmp	r3, #2
 800112c:	d1fb      	bne.n	8001126 <items_menu_1_set_par_3+0x82>
	block_interrupt_form_up_and_down_buttons = false;
 800112e:	4b0b      	ldr	r3, [pc, #44]	; (800115c <items_menu_1_set_par_3+0xb8>)
 8001130:	2200      	movs	r2, #0
 8001132:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_1[0];										// Set global pointer on first menu
 8001134:	4b04      	ldr	r3, [pc, #16]	; (8001148 <items_menu_1_set_par_3+0xa4>)
 8001136:	4a0a      	ldr	r2, [pc, #40]	; (8001160 <items_menu_1_set_par_3+0xbc>)
 8001138:	601a      	str	r2, [r3, #0]
	action();															// Print items on OLED
 800113a:	f7ff fdb9 	bl	8000cb0 <action>
}
 800113e:	bf00      	nop
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	2000000c 	.word	0x2000000c
 800114c:	20000024 	.word	0x20000024
 8001150:	08004bc8 	.word	0x08004bc8
 8001154:	20000014 	.word	0x20000014
 8001158:	20000055 	.word	0x20000055
 800115c:	20000054 	.word	0x20000054
 8001160:	200006d0 	.word	0x200006d0

08001164 <do_it_function_menu_2>:
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
void do_it_function_menu_2(void)
{
 8001164:	b590      	push	{r4, r7, lr}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
	clearn_oled();
 800116a:	f001 f95f 	bl	800242c <clearn_oled>

	// Print selected name of menu
	char str[16] = {0};
 800116e:	2300      	movs	r3, #0
 8001170:	603b      	str	r3, [r7, #0]
 8001172:	1d3b      	adds	r3, r7, #4
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 800117c:	4b2a      	ldr	r3, [pc, #168]	; (8001228 <do_it_function_menu_2+0xc4>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	6959      	ldr	r1, [r3, #20]
 8001182:	463b      	mov	r3, r7
 8001184:	220f      	movs	r2, #15
 8001186:	4618      	mov	r0, r3
 8001188:	f003 fc90 	bl	8004aac <strncpy>
	ssd1306_SetCursor(10, 3);
 800118c:	2103      	movs	r1, #3
 800118e:	200a      	movs	r0, #10
 8001190:	f001 fb32 	bl	80027f8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8001194:	4a25      	ldr	r2, [pc, #148]	; (800122c <do_it_function_menu_2+0xc8>)
 8001196:	4638      	mov	r0, r7
 8001198:	2301      	movs	r3, #1
 800119a:	ca06      	ldmia	r2, {r1, r2}
 800119c:	f001 fb06 	bl	80027ac <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80011a0:	f001 f9f4 	bl	800258c <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 80011a4:	463b      	mov	r3, r7
 80011a6:	2210      	movs	r2, #16
 80011a8:	2100      	movs	r1, #0
 80011aa:	4618      	mov	r0, r3
 80011ac:	f003 fc76 	bl	8004a9c <memset>

	strncpy(str, "Doing something 2", sizeof(str));
 80011b0:	4b1f      	ldr	r3, [pc, #124]	; (8001230 <do_it_function_menu_2+0xcc>)
 80011b2:	463c      	mov	r4, r7
 80011b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	ssd1306_SetCursor(0, first_menu_row);
 80011ba:	4b1e      	ldr	r3, [pc, #120]	; (8001234 <do_it_function_menu_2+0xd0>)
 80011bc:	881b      	ldrh	r3, [r3, #0]
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	4619      	mov	r1, r3
 80011c2:	2000      	movs	r0, #0
 80011c4:	f001 fb18 	bl	80027f8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 80011c8:	4a18      	ldr	r2, [pc, #96]	; (800122c <do_it_function_menu_2+0xc8>)
 80011ca:	4638      	mov	r0, r7
 80011cc:	2301      	movs	r3, #1
 80011ce:	ca06      	ldmia	r2, {r1, r2}
 80011d0:	f001 faec 	bl	80027ac <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80011d4:	f001 f9da 	bl	800258c <ssd1306_UpdateScreen>

	button_status = BOTTON_DOESENT_PRESS;
 80011d8:	4b17      	ldr	r3, [pc, #92]	; (8001238 <do_it_function_menu_2+0xd4>)
 80011da:	2200      	movs	r2, #0
 80011dc:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 80011de:	4b17      	ldr	r3, [pc, #92]	; (800123c <do_it_function_menu_2+0xd8>)
 80011e0:	2201      	movs	r2, #1
 80011e2:	701a      	strb	r2, [r3, #0]
	do{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80011e4:	2200      	movs	r2, #0
 80011e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011ea:	4815      	ldr	r0, [pc, #84]	; (8001240 <do_it_function_menu_2+0xdc>)
 80011ec:	f001 ff4b 	bl	8003086 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 80011f0:	2032      	movs	r0, #50	; 0x32
 80011f2:	f001 fc7b 	bl	8002aec <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80011f6:	2201      	movs	r2, #1
 80011f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011fc:	4810      	ldr	r0, [pc, #64]	; (8001240 <do_it_function_menu_2+0xdc>)
 80011fe:	f001 ff42 	bl	8003086 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8001202:	2032      	movs	r0, #50	; 0x32
 8001204:	f001 fc72 	bl	8002aec <HAL_Delay>
	}while (button_status != BUTTON_ENTER);
 8001208:	4b0b      	ldr	r3, [pc, #44]	; (8001238 <do_it_function_menu_2+0xd4>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	2b02      	cmp	r3, #2
 800120e:	d1e9      	bne.n	80011e4 <do_it_function_menu_2+0x80>
	block_interrupt_form_up_and_down_buttons = false;
 8001210:	4b0a      	ldr	r3, [pc, #40]	; (800123c <do_it_function_menu_2+0xd8>)
 8001212:	2200      	movs	r2, #0
 8001214:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_2[0];										// Set global pointer on first menu
 8001216:	4b04      	ldr	r3, [pc, #16]	; (8001228 <do_it_function_menu_2+0xc4>)
 8001218:	4a0a      	ldr	r2, [pc, #40]	; (8001244 <do_it_function_menu_2+0xe0>)
 800121a:	601a      	str	r2, [r3, #0]
	action();															// Print items on OLED
 800121c:	f7ff fd48 	bl	8000cb0 <action>
}
 8001220:	bf00      	nop
 8001222:	3714      	adds	r7, #20
 8001224:	46bd      	mov	sp, r7
 8001226:	bd90      	pop	{r4, r7, pc}
 8001228:	2000000c 	.word	0x2000000c
 800122c:	20000024 	.word	0x20000024
 8001230:	08004bd8 	.word	0x08004bd8
 8001234:	20000014 	.word	0x20000014
 8001238:	20000055 	.word	0x20000055
 800123c:	20000054 	.word	0x20000054
 8001240:	40011000 	.word	0x40011000
 8001244:	200004fc 	.word	0x200004fc

08001248 <items_menu_2_set_par_1>:
// ----------------------------------------------------------------------------------------
void items_menu_2_set_par_1(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
	clearn_oled();
 800124e:	f001 f8ed 	bl	800242c <clearn_oled>

	// Print selected name of menu
	char str[16] = {0};
 8001252:	2300      	movs	r3, #0
 8001254:	603b      	str	r3, [r7, #0]
 8001256:	1d3b      	adds	r3, r7, #4
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8001260:	4b22      	ldr	r3, [pc, #136]	; (80012ec <items_menu_2_set_par_1+0xa4>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	6959      	ldr	r1, [r3, #20]
 8001266:	463b      	mov	r3, r7
 8001268:	220f      	movs	r2, #15
 800126a:	4618      	mov	r0, r3
 800126c:	f003 fc1e 	bl	8004aac <strncpy>
	ssd1306_SetCursor(10, 3);
 8001270:	2103      	movs	r1, #3
 8001272:	200a      	movs	r0, #10
 8001274:	f001 fac0 	bl	80027f8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8001278:	4a1d      	ldr	r2, [pc, #116]	; (80012f0 <items_menu_2_set_par_1+0xa8>)
 800127a:	4638      	mov	r0, r7
 800127c:	2301      	movs	r3, #1
 800127e:	ca06      	ldmia	r2, {r1, r2}
 8001280:	f001 fa94 	bl	80027ac <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001284:	f001 f982 	bl	800258c <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8001288:	463b      	mov	r3, r7
 800128a:	2210      	movs	r2, #16
 800128c:	2100      	movs	r1, #0
 800128e:	4618      	mov	r0, r3
 8001290:	f003 fc04 	bl	8004a9c <memset>

	strncpy(str, "Set parametr 1", sizeof(str));
 8001294:	463b      	mov	r3, r7
 8001296:	2210      	movs	r2, #16
 8001298:	4916      	ldr	r1, [pc, #88]	; (80012f4 <items_menu_2_set_par_1+0xac>)
 800129a:	4618      	mov	r0, r3
 800129c:	f003 fc06 	bl	8004aac <strncpy>
	ssd1306_SetCursor(0, first_menu_row);
 80012a0:	4b15      	ldr	r3, [pc, #84]	; (80012f8 <items_menu_2_set_par_1+0xb0>)
 80012a2:	881b      	ldrh	r3, [r3, #0]
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	4619      	mov	r1, r3
 80012a8:	2000      	movs	r0, #0
 80012aa:	f001 faa5 	bl	80027f8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 80012ae:	4a10      	ldr	r2, [pc, #64]	; (80012f0 <items_menu_2_set_par_1+0xa8>)
 80012b0:	4638      	mov	r0, r7
 80012b2:	2301      	movs	r3, #1
 80012b4:	ca06      	ldmia	r2, {r1, r2}
 80012b6:	f001 fa79 	bl	80027ac <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80012ba:	f001 f967 	bl	800258c <ssd1306_UpdateScreen>

	button_status = BOTTON_DOESENT_PRESS;
 80012be:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <items_menu_2_set_par_1+0xb4>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 80012c4:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <items_menu_2_set_par_1+0xb8>)
 80012c6:	2201      	movs	r2, #1
 80012c8:	701a      	strb	r2, [r3, #0]
	do{
		// Doing settings <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	}while (button_status != BUTTON_ENTER);
 80012ca:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <items_menu_2_set_par_1+0xb4>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d1fb      	bne.n	80012ca <items_menu_2_set_par_1+0x82>
	block_interrupt_form_up_and_down_buttons = false;
 80012d2:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <items_menu_2_set_par_1+0xb8>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_2[0];										// Set global pointer on first menu
 80012d8:	4b04      	ldr	r3, [pc, #16]	; (80012ec <items_menu_2_set_par_1+0xa4>)
 80012da:	4a0a      	ldr	r2, [pc, #40]	; (8001304 <items_menu_2_set_par_1+0xbc>)
 80012dc:	601a      	str	r2, [r3, #0]
	action();															// Print items on OLED
 80012de:	f7ff fce7 	bl	8000cb0 <action>
}
 80012e2:	bf00      	nop
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	2000000c 	.word	0x2000000c
 80012f0:	20000024 	.word	0x20000024
 80012f4:	08004ba8 	.word	0x08004ba8
 80012f8:	20000014 	.word	0x20000014
 80012fc:	20000055 	.word	0x20000055
 8001300:	20000054 	.word	0x20000054
 8001304:	200004fc 	.word	0x200004fc

08001308 <do_it_function_menu_3>:
// ----------------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
void do_it_function_menu_3(void)
{
 8001308:	b590      	push	{r4, r7, lr}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
	clearn_oled();
 800130e:	f001 f88d 	bl	800242c <clearn_oled>

	// Print selected name of menu
	char str[16] = {0};
 8001312:	2300      	movs	r3, #0
 8001314:	603b      	str	r3, [r7, #0]
 8001316:	1d3b      	adds	r3, r7, #4
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8001320:	4b2b      	ldr	r3, [pc, #172]	; (80013d0 <do_it_function_menu_3+0xc8>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	6959      	ldr	r1, [r3, #20]
 8001326:	463b      	mov	r3, r7
 8001328:	220f      	movs	r2, #15
 800132a:	4618      	mov	r0, r3
 800132c:	f003 fbbe 	bl	8004aac <strncpy>
	ssd1306_SetCursor(10, 3);
 8001330:	2103      	movs	r1, #3
 8001332:	200a      	movs	r0, #10
 8001334:	f001 fa60 	bl	80027f8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8001338:	4a26      	ldr	r2, [pc, #152]	; (80013d4 <do_it_function_menu_3+0xcc>)
 800133a:	4638      	mov	r0, r7
 800133c:	2301      	movs	r3, #1
 800133e:	ca06      	ldmia	r2, {r1, r2}
 8001340:	f001 fa34 	bl	80027ac <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001344:	f001 f922 	bl	800258c <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8001348:	463b      	mov	r3, r7
 800134a:	2210      	movs	r2, #16
 800134c:	2100      	movs	r1, #0
 800134e:	4618      	mov	r0, r3
 8001350:	f003 fba4 	bl	8004a9c <memset>

	strncpy(str, "Doing something 3", sizeof(str));
 8001354:	4b20      	ldr	r3, [pc, #128]	; (80013d8 <do_it_function_menu_3+0xd0>)
 8001356:	463c      	mov	r4, r7
 8001358:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800135a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	ssd1306_SetCursor(0, first_menu_row);
 800135e:	4b1f      	ldr	r3, [pc, #124]	; (80013dc <do_it_function_menu_3+0xd4>)
 8001360:	881b      	ldrh	r3, [r3, #0]
 8001362:	b2db      	uxtb	r3, r3
 8001364:	4619      	mov	r1, r3
 8001366:	2000      	movs	r0, #0
 8001368:	f001 fa46 	bl	80027f8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 800136c:	4a19      	ldr	r2, [pc, #100]	; (80013d4 <do_it_function_menu_3+0xcc>)
 800136e:	4638      	mov	r0, r7
 8001370:	2301      	movs	r3, #1
 8001372:	ca06      	ldmia	r2, {r1, r2}
 8001374:	f001 fa1a 	bl	80027ac <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001378:	f001 f908 	bl	800258c <ssd1306_UpdateScreen>

	button_status = BOTTON_DOESENT_PRESS;
 800137c:	4b18      	ldr	r3, [pc, #96]	; (80013e0 <do_it_function_menu_3+0xd8>)
 800137e:	2200      	movs	r2, #0
 8001380:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 8001382:	4b18      	ldr	r3, [pc, #96]	; (80013e4 <do_it_function_menu_3+0xdc>)
 8001384:	2201      	movs	r2, #1
 8001386:	701a      	strb	r2, [r3, #0]
	do{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001388:	2200      	movs	r2, #0
 800138a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800138e:	4816      	ldr	r0, [pc, #88]	; (80013e8 <do_it_function_menu_3+0xe0>)
 8001390:	f001 fe79 	bl	8003086 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8001394:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001398:	f001 fba8 	bl	8002aec <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800139c:	2201      	movs	r2, #1
 800139e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013a2:	4811      	ldr	r0, [pc, #68]	; (80013e8 <do_it_function_menu_3+0xe0>)
 80013a4:	f001 fe6f 	bl	8003086 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 80013a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013ac:	f001 fb9e 	bl	8002aec <HAL_Delay>

	}while (button_status != BUTTON_ENTER);
 80013b0:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <do_it_function_menu_3+0xd8>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d1e7      	bne.n	8001388 <do_it_function_menu_3+0x80>
	block_interrupt_form_up_and_down_buttons = false;
 80013b8:	4b0a      	ldr	r3, [pc, #40]	; (80013e4 <do_it_function_menu_3+0xdc>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_3[0];										// Set global pointer on first menu
 80013be:	4b04      	ldr	r3, [pc, #16]	; (80013d0 <do_it_function_menu_3+0xc8>)
 80013c0:	4a0a      	ldr	r2, [pc, #40]	; (80013ec <do_it_function_menu_3+0xe4>)
 80013c2:	601a      	str	r2, [r3, #0]
	action();															// Print items on OLED
 80013c4:	f7ff fc74 	bl	8000cb0 <action>
}
 80013c8:	bf00      	nop
 80013ca:	3714      	adds	r7, #20
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd90      	pop	{r4, r7, pc}
 80013d0:	2000000c 	.word	0x2000000c
 80013d4:	20000024 	.word	0x20000024
 80013d8:	08004bec 	.word	0x08004bec
 80013dc:	20000014 	.word	0x20000014
 80013e0:	20000055 	.word	0x20000055
 80013e4:	20000054 	.word	0x20000054
 80013e8:	40011000 	.word	0x40011000
 80013ec:	20000784 	.word	0x20000784

080013f0 <do_it_function_menu_4>:
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
// ----------------------------------------------------------------------------------------
void do_it_function_menu_4(void)
{
 80013f0:	b590      	push	{r4, r7, lr}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
	clearn_oled();
 80013f6:	f001 f819 	bl	800242c <clearn_oled>

	// Print selected name of menu
	char str[16] = {0};
 80013fa:	2300      	movs	r3, #0
 80013fc:	603b      	str	r3, [r7, #0]
 80013fe:	1d3b      	adds	r3, r7, #4
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8001408:	4b2b      	ldr	r3, [pc, #172]	; (80014b8 <do_it_function_menu_4+0xc8>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	6959      	ldr	r1, [r3, #20]
 800140e:	463b      	mov	r3, r7
 8001410:	220f      	movs	r2, #15
 8001412:	4618      	mov	r0, r3
 8001414:	f003 fb4a 	bl	8004aac <strncpy>
	ssd1306_SetCursor(10, 3);
 8001418:	2103      	movs	r1, #3
 800141a:	200a      	movs	r0, #10
 800141c:	f001 f9ec 	bl	80027f8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8001420:	4a26      	ldr	r2, [pc, #152]	; (80014bc <do_it_function_menu_4+0xcc>)
 8001422:	4638      	mov	r0, r7
 8001424:	2301      	movs	r3, #1
 8001426:	ca06      	ldmia	r2, {r1, r2}
 8001428:	f001 f9c0 	bl	80027ac <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800142c:	f001 f8ae 	bl	800258c <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8001430:	463b      	mov	r3, r7
 8001432:	2210      	movs	r2, #16
 8001434:	2100      	movs	r1, #0
 8001436:	4618      	mov	r0, r3
 8001438:	f003 fb30 	bl	8004a9c <memset>

	strncpy(str, "Doing something 4", sizeof(str));
 800143c:	4b20      	ldr	r3, [pc, #128]	; (80014c0 <do_it_function_menu_4+0xd0>)
 800143e:	463c      	mov	r4, r7
 8001440:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001442:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	ssd1306_SetCursor(0, first_menu_row);
 8001446:	4b1f      	ldr	r3, [pc, #124]	; (80014c4 <do_it_function_menu_4+0xd4>)
 8001448:	881b      	ldrh	r3, [r3, #0]
 800144a:	b2db      	uxtb	r3, r3
 800144c:	4619      	mov	r1, r3
 800144e:	2000      	movs	r0, #0
 8001450:	f001 f9d2 	bl	80027f8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8001454:	4a19      	ldr	r2, [pc, #100]	; (80014bc <do_it_function_menu_4+0xcc>)
 8001456:	4638      	mov	r0, r7
 8001458:	2301      	movs	r3, #1
 800145a:	ca06      	ldmia	r2, {r1, r2}
 800145c:	f001 f9a6 	bl	80027ac <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001460:	f001 f894 	bl	800258c <ssd1306_UpdateScreen>

	button_status = BOTTON_DOESENT_PRESS;
 8001464:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <do_it_function_menu_4+0xd8>)
 8001466:	2200      	movs	r2, #0
 8001468:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 800146a:	4b18      	ldr	r3, [pc, #96]	; (80014cc <do_it_function_menu_4+0xdc>)
 800146c:	2201      	movs	r2, #1
 800146e:	701a      	strb	r2, [r3, #0]
	do{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001470:	2200      	movs	r2, #0
 8001472:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001476:	4816      	ldr	r0, [pc, #88]	; (80014d0 <do_it_function_menu_4+0xe0>)
 8001478:	f001 fe05 	bl	8003086 <HAL_GPIO_WritePin>
		HAL_Delay(20);
 800147c:	2014      	movs	r0, #20
 800147e:	f001 fb35 	bl	8002aec <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001482:	2201      	movs	r2, #1
 8001484:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001488:	4811      	ldr	r0, [pc, #68]	; (80014d0 <do_it_function_menu_4+0xe0>)
 800148a:	f001 fdfc 	bl	8003086 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 800148e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001492:	f001 fb2b 	bl	8002aec <HAL_Delay>

	}while (button_status != BUTTON_ENTER);
 8001496:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <do_it_function_menu_4+0xd8>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	2b02      	cmp	r3, #2
 800149c:	d1e8      	bne.n	8001470 <do_it_function_menu_4+0x80>
	block_interrupt_form_up_and_down_buttons = false;
 800149e:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <do_it_function_menu_4+0xdc>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_4[0];										// Set global pointer on first menu
 80014a4:	4b04      	ldr	r3, [pc, #16]	; (80014b8 <do_it_function_menu_4+0xc8>)
 80014a6:	4a0b      	ldr	r2, [pc, #44]	; (80014d4 <do_it_function_menu_4+0xe4>)
 80014a8:	601a      	str	r2, [r3, #0]
	action();
 80014aa:	f7ff fc01 	bl	8000cb0 <action>
}
 80014ae:	bf00      	nop
 80014b0:	3714      	adds	r7, #20
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd90      	pop	{r4, r7, pc}
 80014b6:	bf00      	nop
 80014b8:	2000000c 	.word	0x2000000c
 80014bc:	20000024 	.word	0x20000024
 80014c0:	08004c00 	.word	0x08004c00
 80014c4:	20000014 	.word	0x20000014
 80014c8:	20000055 	.word	0x20000055
 80014cc:	20000054 	.word	0x20000054
 80014d0:	40011000 	.word	0x40011000
 80014d4:	20000568 	.word	0x20000568

080014d8 <items_menu_4_set_par_1>:
// ----------------------------------------------------------------------------------------
void items_menu_4_set_par_1(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
	clearn_oled();
 80014de:	f000 ffa5 	bl	800242c <clearn_oled>

	// Print selected name of menu
	char str[16] = {0};
 80014e2:	2300      	movs	r3, #0
 80014e4:	603b      	str	r3, [r7, #0]
 80014e6:	1d3b      	adds	r3, r7, #4
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 80014f0:	4b22      	ldr	r3, [pc, #136]	; (800157c <items_menu_4_set_par_1+0xa4>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	6959      	ldr	r1, [r3, #20]
 80014f6:	463b      	mov	r3, r7
 80014f8:	220f      	movs	r2, #15
 80014fa:	4618      	mov	r0, r3
 80014fc:	f003 fad6 	bl	8004aac <strncpy>
	ssd1306_SetCursor(10, 3);
 8001500:	2103      	movs	r1, #3
 8001502:	200a      	movs	r0, #10
 8001504:	f001 f978 	bl	80027f8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8001508:	4a1d      	ldr	r2, [pc, #116]	; (8001580 <items_menu_4_set_par_1+0xa8>)
 800150a:	4638      	mov	r0, r7
 800150c:	2301      	movs	r3, #1
 800150e:	ca06      	ldmia	r2, {r1, r2}
 8001510:	f001 f94c 	bl	80027ac <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001514:	f001 f83a 	bl	800258c <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8001518:	463b      	mov	r3, r7
 800151a:	2210      	movs	r2, #16
 800151c:	2100      	movs	r1, #0
 800151e:	4618      	mov	r0, r3
 8001520:	f003 fabc 	bl	8004a9c <memset>

	strncpy(str, "Set parametr 1", sizeof(str));
 8001524:	463b      	mov	r3, r7
 8001526:	2210      	movs	r2, #16
 8001528:	4916      	ldr	r1, [pc, #88]	; (8001584 <items_menu_4_set_par_1+0xac>)
 800152a:	4618      	mov	r0, r3
 800152c:	f003 fabe 	bl	8004aac <strncpy>
	ssd1306_SetCursor(0, first_menu_row);
 8001530:	4b15      	ldr	r3, [pc, #84]	; (8001588 <items_menu_4_set_par_1+0xb0>)
 8001532:	881b      	ldrh	r3, [r3, #0]
 8001534:	b2db      	uxtb	r3, r3
 8001536:	4619      	mov	r1, r3
 8001538:	2000      	movs	r0, #0
 800153a:	f001 f95d 	bl	80027f8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 800153e:	4a10      	ldr	r2, [pc, #64]	; (8001580 <items_menu_4_set_par_1+0xa8>)
 8001540:	4638      	mov	r0, r7
 8001542:	2301      	movs	r3, #1
 8001544:	ca06      	ldmia	r2, {r1, r2}
 8001546:	f001 f931 	bl	80027ac <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800154a:	f001 f81f 	bl	800258c <ssd1306_UpdateScreen>

	button_status = BOTTON_DOESENT_PRESS;
 800154e:	4b0f      	ldr	r3, [pc, #60]	; (800158c <items_menu_4_set_par_1+0xb4>)
 8001550:	2200      	movs	r2, #0
 8001552:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 8001554:	4b0e      	ldr	r3, [pc, #56]	; (8001590 <items_menu_4_set_par_1+0xb8>)
 8001556:	2201      	movs	r2, #1
 8001558:	701a      	strb	r2, [r3, #0]
	do{
		// Doing settings <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	}while (button_status != BUTTON_ENTER);
 800155a:	4b0c      	ldr	r3, [pc, #48]	; (800158c <items_menu_4_set_par_1+0xb4>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	2b02      	cmp	r3, #2
 8001560:	d1fb      	bne.n	800155a <items_menu_4_set_par_1+0x82>
	block_interrupt_form_up_and_down_buttons = false;
 8001562:	4b0b      	ldr	r3, [pc, #44]	; (8001590 <items_menu_4_set_par_1+0xb8>)
 8001564:	2200      	movs	r2, #0
 8001566:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_4[0];										// Set global pointer on first menu
 8001568:	4b04      	ldr	r3, [pc, #16]	; (800157c <items_menu_4_set_par_1+0xa4>)
 800156a:	4a0a      	ldr	r2, [pc, #40]	; (8001594 <items_menu_4_set_par_1+0xbc>)
 800156c:	601a      	str	r2, [r3, #0]
	action();															// Print items on OLED
 800156e:	f7ff fb9f 	bl	8000cb0 <action>
}
 8001572:	bf00      	nop
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	2000000c 	.word	0x2000000c
 8001580:	20000024 	.word	0x20000024
 8001584:	08004ba8 	.word	0x08004ba8
 8001588:	20000014 	.word	0x20000014
 800158c:	20000055 	.word	0x20000055
 8001590:	20000054 	.word	0x20000054
 8001594:	20000568 	.word	0x20000568

08001598 <items_menu_4_set_par_2>:
// ----------------------------------------------------------------------------------------
void items_menu_4_set_par_2(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
	clearn_oled();
 800159e:	f000 ff45 	bl	800242c <clearn_oled>

	// Print selected name of menu
	char str[16] = {0};
 80015a2:	2300      	movs	r3, #0
 80015a4:	603b      	str	r3, [r7, #0]
 80015a6:	1d3b      	adds	r3, r7, #4
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 80015b0:	4b22      	ldr	r3, [pc, #136]	; (800163c <items_menu_4_set_par_2+0xa4>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	6959      	ldr	r1, [r3, #20]
 80015b6:	463b      	mov	r3, r7
 80015b8:	220f      	movs	r2, #15
 80015ba:	4618      	mov	r0, r3
 80015bc:	f003 fa76 	bl	8004aac <strncpy>
	ssd1306_SetCursor(10, 3);
 80015c0:	2103      	movs	r1, #3
 80015c2:	200a      	movs	r0, #10
 80015c4:	f001 f918 	bl	80027f8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 80015c8:	4a1d      	ldr	r2, [pc, #116]	; (8001640 <items_menu_4_set_par_2+0xa8>)
 80015ca:	4638      	mov	r0, r7
 80015cc:	2301      	movs	r3, #1
 80015ce:	ca06      	ldmia	r2, {r1, r2}
 80015d0:	f001 f8ec 	bl	80027ac <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80015d4:	f000 ffda 	bl	800258c <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 80015d8:	463b      	mov	r3, r7
 80015da:	2210      	movs	r2, #16
 80015dc:	2100      	movs	r1, #0
 80015de:	4618      	mov	r0, r3
 80015e0:	f003 fa5c 	bl	8004a9c <memset>

	strncpy(str, "Set parametr 2", sizeof(str));
 80015e4:	463b      	mov	r3, r7
 80015e6:	2210      	movs	r2, #16
 80015e8:	4916      	ldr	r1, [pc, #88]	; (8001644 <items_menu_4_set_par_2+0xac>)
 80015ea:	4618      	mov	r0, r3
 80015ec:	f003 fa5e 	bl	8004aac <strncpy>
	ssd1306_SetCursor(0, first_menu_row);
 80015f0:	4b15      	ldr	r3, [pc, #84]	; (8001648 <items_menu_4_set_par_2+0xb0>)
 80015f2:	881b      	ldrh	r3, [r3, #0]
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	4619      	mov	r1, r3
 80015f8:	2000      	movs	r0, #0
 80015fa:	f001 f8fd 	bl	80027f8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 80015fe:	4a10      	ldr	r2, [pc, #64]	; (8001640 <items_menu_4_set_par_2+0xa8>)
 8001600:	4638      	mov	r0, r7
 8001602:	2301      	movs	r3, #1
 8001604:	ca06      	ldmia	r2, {r1, r2}
 8001606:	f001 f8d1 	bl	80027ac <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800160a:	f000 ffbf 	bl	800258c <ssd1306_UpdateScreen>

	button_status = BOTTON_DOESENT_PRESS;
 800160e:	4b0f      	ldr	r3, [pc, #60]	; (800164c <items_menu_4_set_par_2+0xb4>)
 8001610:	2200      	movs	r2, #0
 8001612:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 8001614:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <items_menu_4_set_par_2+0xb8>)
 8001616:	2201      	movs	r2, #1
 8001618:	701a      	strb	r2, [r3, #0]
	do{
		// Doing settings <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	}while (button_status != BUTTON_ENTER);
 800161a:	4b0c      	ldr	r3, [pc, #48]	; (800164c <items_menu_4_set_par_2+0xb4>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	2b02      	cmp	r3, #2
 8001620:	d1fb      	bne.n	800161a <items_menu_4_set_par_2+0x82>
	block_interrupt_form_up_and_down_buttons = false;
 8001622:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <items_menu_4_set_par_2+0xb8>)
 8001624:	2200      	movs	r2, #0
 8001626:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_4[0];										// Set global pointer on first menu
 8001628:	4b04      	ldr	r3, [pc, #16]	; (800163c <items_menu_4_set_par_2+0xa4>)
 800162a:	4a0a      	ldr	r2, [pc, #40]	; (8001654 <items_menu_4_set_par_2+0xbc>)
 800162c:	601a      	str	r2, [r3, #0]
	action();															// Print items on OLED
 800162e:	f7ff fb3f 	bl	8000cb0 <action>
}
 8001632:	bf00      	nop
 8001634:	3710      	adds	r7, #16
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	2000000c 	.word	0x2000000c
 8001640:	20000024 	.word	0x20000024
 8001644:	08004bb8 	.word	0x08004bb8
 8001648:	20000014 	.word	0x20000014
 800164c:	20000055 	.word	0x20000055
 8001650:	20000054 	.word	0x20000054
 8001654:	20000568 	.word	0x20000568

08001658 <items_menu_4_set_par_3>:
// ----------------------------------------------------------------------------------------
void items_menu_4_set_par_3(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
	clearn_oled();
 800165e:	f000 fee5 	bl	800242c <clearn_oled>

	// Print selected name of menu
	char str[16] = {0};
 8001662:	2300      	movs	r3, #0
 8001664:	603b      	str	r3, [r7, #0]
 8001666:	1d3b      	adds	r3, r7, #4
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8001670:	4b22      	ldr	r3, [pc, #136]	; (80016fc <items_menu_4_set_par_3+0xa4>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6959      	ldr	r1, [r3, #20]
 8001676:	463b      	mov	r3, r7
 8001678:	220f      	movs	r2, #15
 800167a:	4618      	mov	r0, r3
 800167c:	f003 fa16 	bl	8004aac <strncpy>
	ssd1306_SetCursor(10, 3);
 8001680:	2103      	movs	r1, #3
 8001682:	200a      	movs	r0, #10
 8001684:	f001 f8b8 	bl	80027f8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8001688:	4a1d      	ldr	r2, [pc, #116]	; (8001700 <items_menu_4_set_par_3+0xa8>)
 800168a:	4638      	mov	r0, r7
 800168c:	2301      	movs	r3, #1
 800168e:	ca06      	ldmia	r2, {r1, r2}
 8001690:	f001 f88c 	bl	80027ac <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001694:	f000 ff7a 	bl	800258c <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8001698:	463b      	mov	r3, r7
 800169a:	2210      	movs	r2, #16
 800169c:	2100      	movs	r1, #0
 800169e:	4618      	mov	r0, r3
 80016a0:	f003 f9fc 	bl	8004a9c <memset>

	strncpy(str, "Set parametr 3", sizeof(str));
 80016a4:	463b      	mov	r3, r7
 80016a6:	2210      	movs	r2, #16
 80016a8:	4916      	ldr	r1, [pc, #88]	; (8001704 <items_menu_4_set_par_3+0xac>)
 80016aa:	4618      	mov	r0, r3
 80016ac:	f003 f9fe 	bl	8004aac <strncpy>
	ssd1306_SetCursor(0, first_menu_row);
 80016b0:	4b15      	ldr	r3, [pc, #84]	; (8001708 <items_menu_4_set_par_3+0xb0>)
 80016b2:	881b      	ldrh	r3, [r3, #0]
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	4619      	mov	r1, r3
 80016b8:	2000      	movs	r0, #0
 80016ba:	f001 f89d 	bl	80027f8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 80016be:	4a10      	ldr	r2, [pc, #64]	; (8001700 <items_menu_4_set_par_3+0xa8>)
 80016c0:	4638      	mov	r0, r7
 80016c2:	2301      	movs	r3, #1
 80016c4:	ca06      	ldmia	r2, {r1, r2}
 80016c6:	f001 f871 	bl	80027ac <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80016ca:	f000 ff5f 	bl	800258c <ssd1306_UpdateScreen>

	button_status = BOTTON_DOESENT_PRESS;
 80016ce:	4b0f      	ldr	r3, [pc, #60]	; (800170c <items_menu_4_set_par_3+0xb4>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 80016d4:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <items_menu_4_set_par_3+0xb8>)
 80016d6:	2201      	movs	r2, #1
 80016d8:	701a      	strb	r2, [r3, #0]
	do{
		// Doing settings <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	}while (button_status != BUTTON_ENTER);
 80016da:	4b0c      	ldr	r3, [pc, #48]	; (800170c <items_menu_4_set_par_3+0xb4>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d1fb      	bne.n	80016da <items_menu_4_set_par_3+0x82>
	block_interrupt_form_up_and_down_buttons = false;
 80016e2:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <items_menu_4_set_par_3+0xb8>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_4[0];										// Set global pointer on first menu
 80016e8:	4b04      	ldr	r3, [pc, #16]	; (80016fc <items_menu_4_set_par_3+0xa4>)
 80016ea:	4a0a      	ldr	r2, [pc, #40]	; (8001714 <items_menu_4_set_par_3+0xbc>)
 80016ec:	601a      	str	r2, [r3, #0]
	action();															// Print items on OLED
 80016ee:	f7ff fadf 	bl	8000cb0 <action>
}
 80016f2:	bf00      	nop
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	2000000c 	.word	0x2000000c
 8001700:	20000024 	.word	0x20000024
 8001704:	08004bc8 	.word	0x08004bc8
 8001708:	20000014 	.word	0x20000014
 800170c:	20000055 	.word	0x20000055
 8001710:	20000054 	.word	0x20000054
 8001714:	20000568 	.word	0x20000568

08001718 <items_menu_4_set_par_4>:
// ----------------------------------------------------------------------------------------
void items_menu_4_set_par_4(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
	clearn_oled();
 800171e:	f000 fe85 	bl	800242c <clearn_oled>

	// Print selected name of menu
	char str[16] = {0};
 8001722:	2300      	movs	r3, #0
 8001724:	603b      	str	r3, [r7, #0]
 8001726:	1d3b      	adds	r3, r7, #4
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8001730:	4b22      	ldr	r3, [pc, #136]	; (80017bc <items_menu_4_set_par_4+0xa4>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6959      	ldr	r1, [r3, #20]
 8001736:	463b      	mov	r3, r7
 8001738:	220f      	movs	r2, #15
 800173a:	4618      	mov	r0, r3
 800173c:	f003 f9b6 	bl	8004aac <strncpy>
	ssd1306_SetCursor(10, 3);
 8001740:	2103      	movs	r1, #3
 8001742:	200a      	movs	r0, #10
 8001744:	f001 f858 	bl	80027f8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8001748:	4a1d      	ldr	r2, [pc, #116]	; (80017c0 <items_menu_4_set_par_4+0xa8>)
 800174a:	4638      	mov	r0, r7
 800174c:	2301      	movs	r3, #1
 800174e:	ca06      	ldmia	r2, {r1, r2}
 8001750:	f001 f82c 	bl	80027ac <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001754:	f000 ff1a 	bl	800258c <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8001758:	463b      	mov	r3, r7
 800175a:	2210      	movs	r2, #16
 800175c:	2100      	movs	r1, #0
 800175e:	4618      	mov	r0, r3
 8001760:	f003 f99c 	bl	8004a9c <memset>

	strncpy(str, "Set parametr 4", sizeof(str));
 8001764:	463b      	mov	r3, r7
 8001766:	2210      	movs	r2, #16
 8001768:	4916      	ldr	r1, [pc, #88]	; (80017c4 <items_menu_4_set_par_4+0xac>)
 800176a:	4618      	mov	r0, r3
 800176c:	f003 f99e 	bl	8004aac <strncpy>
	ssd1306_SetCursor(0, first_menu_row);
 8001770:	4b15      	ldr	r3, [pc, #84]	; (80017c8 <items_menu_4_set_par_4+0xb0>)
 8001772:	881b      	ldrh	r3, [r3, #0]
 8001774:	b2db      	uxtb	r3, r3
 8001776:	4619      	mov	r1, r3
 8001778:	2000      	movs	r0, #0
 800177a:	f001 f83d 	bl	80027f8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 800177e:	4a10      	ldr	r2, [pc, #64]	; (80017c0 <items_menu_4_set_par_4+0xa8>)
 8001780:	4638      	mov	r0, r7
 8001782:	2301      	movs	r3, #1
 8001784:	ca06      	ldmia	r2, {r1, r2}
 8001786:	f001 f811 	bl	80027ac <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800178a:	f000 feff 	bl	800258c <ssd1306_UpdateScreen>

	button_status = BOTTON_DOESENT_PRESS;
 800178e:	4b0f      	ldr	r3, [pc, #60]	; (80017cc <items_menu_4_set_par_4+0xb4>)
 8001790:	2200      	movs	r2, #0
 8001792:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 8001794:	4b0e      	ldr	r3, [pc, #56]	; (80017d0 <items_menu_4_set_par_4+0xb8>)
 8001796:	2201      	movs	r2, #1
 8001798:	701a      	strb	r2, [r3, #0]
	do{
		// Doing settings <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	}while (button_status != BUTTON_ENTER);
 800179a:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <items_menu_4_set_par_4+0xb4>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d1fb      	bne.n	800179a <items_menu_4_set_par_4+0x82>
	block_interrupt_form_up_and_down_buttons = false;
 80017a2:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <items_menu_4_set_par_4+0xb8>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_4[0];										// Set global pointer on first menu
 80017a8:	4b04      	ldr	r3, [pc, #16]	; (80017bc <items_menu_4_set_par_4+0xa4>)
 80017aa:	4a0a      	ldr	r2, [pc, #40]	; (80017d4 <items_menu_4_set_par_4+0xbc>)
 80017ac:	601a      	str	r2, [r3, #0]
	action();															// Print items on OLED
 80017ae:	f7ff fa7f 	bl	8000cb0 <action>
}
 80017b2:	bf00      	nop
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	2000000c 	.word	0x2000000c
 80017c0:	20000024 	.word	0x20000024
 80017c4:	08004c14 	.word	0x08004c14
 80017c8:	20000014 	.word	0x20000014
 80017cc:	20000055 	.word	0x20000055
 80017d0:	20000054 	.word	0x20000054
 80017d4:	20000568 	.word	0x20000568

080017d8 <items_menu_4_set_par_5>:
// ----------------------------------------------------------------------------------------
void items_menu_4_set_par_5(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
	clearn_oled();
 80017de:	f000 fe25 	bl	800242c <clearn_oled>

	// Print selected name of menu
	char str[16] = {0};
 80017e2:	2300      	movs	r3, #0
 80017e4:	603b      	str	r3, [r7, #0]
 80017e6:	1d3b      	adds	r3, r7, #4
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 80017f0:	4b22      	ldr	r3, [pc, #136]	; (800187c <items_menu_4_set_par_5+0xa4>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	6959      	ldr	r1, [r3, #20]
 80017f6:	463b      	mov	r3, r7
 80017f8:	220f      	movs	r2, #15
 80017fa:	4618      	mov	r0, r3
 80017fc:	f003 f956 	bl	8004aac <strncpy>
	ssd1306_SetCursor(10, 3);
 8001800:	2103      	movs	r1, #3
 8001802:	200a      	movs	r0, #10
 8001804:	f000 fff8 	bl	80027f8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8001808:	4a1d      	ldr	r2, [pc, #116]	; (8001880 <items_menu_4_set_par_5+0xa8>)
 800180a:	4638      	mov	r0, r7
 800180c:	2301      	movs	r3, #1
 800180e:	ca06      	ldmia	r2, {r1, r2}
 8001810:	f000 ffcc 	bl	80027ac <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001814:	f000 feba 	bl	800258c <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8001818:	463b      	mov	r3, r7
 800181a:	2210      	movs	r2, #16
 800181c:	2100      	movs	r1, #0
 800181e:	4618      	mov	r0, r3
 8001820:	f003 f93c 	bl	8004a9c <memset>

	strncpy(str, "Set parametr 5", sizeof(str));
 8001824:	463b      	mov	r3, r7
 8001826:	2210      	movs	r2, #16
 8001828:	4916      	ldr	r1, [pc, #88]	; (8001884 <items_menu_4_set_par_5+0xac>)
 800182a:	4618      	mov	r0, r3
 800182c:	f003 f93e 	bl	8004aac <strncpy>
	ssd1306_SetCursor(0, first_menu_row);
 8001830:	4b15      	ldr	r3, [pc, #84]	; (8001888 <items_menu_4_set_par_5+0xb0>)
 8001832:	881b      	ldrh	r3, [r3, #0]
 8001834:	b2db      	uxtb	r3, r3
 8001836:	4619      	mov	r1, r3
 8001838:	2000      	movs	r0, #0
 800183a:	f000 ffdd 	bl	80027f8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 800183e:	4a10      	ldr	r2, [pc, #64]	; (8001880 <items_menu_4_set_par_5+0xa8>)
 8001840:	4638      	mov	r0, r7
 8001842:	2301      	movs	r3, #1
 8001844:	ca06      	ldmia	r2, {r1, r2}
 8001846:	f000 ffb1 	bl	80027ac <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800184a:	f000 fe9f 	bl	800258c <ssd1306_UpdateScreen>

	button_status = BOTTON_DOESENT_PRESS;
 800184e:	4b0f      	ldr	r3, [pc, #60]	; (800188c <items_menu_4_set_par_5+0xb4>)
 8001850:	2200      	movs	r2, #0
 8001852:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 8001854:	4b0e      	ldr	r3, [pc, #56]	; (8001890 <items_menu_4_set_par_5+0xb8>)
 8001856:	2201      	movs	r2, #1
 8001858:	701a      	strb	r2, [r3, #0]
	do{
		// Doing settings <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	}while (button_status != BUTTON_ENTER);
 800185a:	4b0c      	ldr	r3, [pc, #48]	; (800188c <items_menu_4_set_par_5+0xb4>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	2b02      	cmp	r3, #2
 8001860:	d1fb      	bne.n	800185a <items_menu_4_set_par_5+0x82>
	block_interrupt_form_up_and_down_buttons = false;
 8001862:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <items_menu_4_set_par_5+0xb8>)
 8001864:	2200      	movs	r2, #0
 8001866:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_4[0];										// Set global pointer on first menu
 8001868:	4b04      	ldr	r3, [pc, #16]	; (800187c <items_menu_4_set_par_5+0xa4>)
 800186a:	4a0a      	ldr	r2, [pc, #40]	; (8001894 <items_menu_4_set_par_5+0xbc>)
 800186c:	601a      	str	r2, [r3, #0]
	action();															// Print items on OLED
 800186e:	f7ff fa1f 	bl	8000cb0 <action>
}
 8001872:	bf00      	nop
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	2000000c 	.word	0x2000000c
 8001880:	20000024 	.word	0x20000024
 8001884:	08004c24 	.word	0x08004c24
 8001888:	20000014 	.word	0x20000014
 800188c:	20000055 	.word	0x20000055
 8001890:	20000054 	.word	0x20000054
 8001894:	20000568 	.word	0x20000568

08001898 <items_menu_4_set_par_6>:
// ----------------------------------------------------------------------------------------
void items_menu_4_set_par_6(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
	clearn_oled();
 800189e:	f000 fdc5 	bl	800242c <clearn_oled>

	// Print selected name of menu
	char str[16] = {0};
 80018a2:	2300      	movs	r3, #0
 80018a4:	603b      	str	r3, [r7, #0]
 80018a6:	1d3b      	adds	r3, r7, #4
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 80018b0:	4b22      	ldr	r3, [pc, #136]	; (800193c <items_menu_4_set_par_6+0xa4>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	6959      	ldr	r1, [r3, #20]
 80018b6:	463b      	mov	r3, r7
 80018b8:	220f      	movs	r2, #15
 80018ba:	4618      	mov	r0, r3
 80018bc:	f003 f8f6 	bl	8004aac <strncpy>
	ssd1306_SetCursor(10, 3);
 80018c0:	2103      	movs	r1, #3
 80018c2:	200a      	movs	r0, #10
 80018c4:	f000 ff98 	bl	80027f8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 80018c8:	4a1d      	ldr	r2, [pc, #116]	; (8001940 <items_menu_4_set_par_6+0xa8>)
 80018ca:	4638      	mov	r0, r7
 80018cc:	2301      	movs	r3, #1
 80018ce:	ca06      	ldmia	r2, {r1, r2}
 80018d0:	f000 ff6c 	bl	80027ac <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80018d4:	f000 fe5a 	bl	800258c <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 80018d8:	463b      	mov	r3, r7
 80018da:	2210      	movs	r2, #16
 80018dc:	2100      	movs	r1, #0
 80018de:	4618      	mov	r0, r3
 80018e0:	f003 f8dc 	bl	8004a9c <memset>

	strncpy(str, "Set parametr 6", sizeof(str));
 80018e4:	463b      	mov	r3, r7
 80018e6:	2210      	movs	r2, #16
 80018e8:	4916      	ldr	r1, [pc, #88]	; (8001944 <items_menu_4_set_par_6+0xac>)
 80018ea:	4618      	mov	r0, r3
 80018ec:	f003 f8de 	bl	8004aac <strncpy>
	ssd1306_SetCursor(0, first_menu_row);
 80018f0:	4b15      	ldr	r3, [pc, #84]	; (8001948 <items_menu_4_set_par_6+0xb0>)
 80018f2:	881b      	ldrh	r3, [r3, #0]
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	4619      	mov	r1, r3
 80018f8:	2000      	movs	r0, #0
 80018fa:	f000 ff7d 	bl	80027f8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 80018fe:	4a10      	ldr	r2, [pc, #64]	; (8001940 <items_menu_4_set_par_6+0xa8>)
 8001900:	4638      	mov	r0, r7
 8001902:	2301      	movs	r3, #1
 8001904:	ca06      	ldmia	r2, {r1, r2}
 8001906:	f000 ff51 	bl	80027ac <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800190a:	f000 fe3f 	bl	800258c <ssd1306_UpdateScreen>

	button_status = BOTTON_DOESENT_PRESS;
 800190e:	4b0f      	ldr	r3, [pc, #60]	; (800194c <items_menu_4_set_par_6+0xb4>)
 8001910:	2200      	movs	r2, #0
 8001912:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 8001914:	4b0e      	ldr	r3, [pc, #56]	; (8001950 <items_menu_4_set_par_6+0xb8>)
 8001916:	2201      	movs	r2, #1
 8001918:	701a      	strb	r2, [r3, #0]
	do{
		// Doing settings <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	}while (button_status != BUTTON_ENTER);
 800191a:	4b0c      	ldr	r3, [pc, #48]	; (800194c <items_menu_4_set_par_6+0xb4>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	2b02      	cmp	r3, #2
 8001920:	d1fb      	bne.n	800191a <items_menu_4_set_par_6+0x82>
	block_interrupt_form_up_and_down_buttons = false;
 8001922:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <items_menu_4_set_par_6+0xb8>)
 8001924:	2200      	movs	r2, #0
 8001926:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_4[0];										// Set global pointer on first menu
 8001928:	4b04      	ldr	r3, [pc, #16]	; (800193c <items_menu_4_set_par_6+0xa4>)
 800192a:	4a0a      	ldr	r2, [pc, #40]	; (8001954 <items_menu_4_set_par_6+0xbc>)
 800192c:	601a      	str	r2, [r3, #0]
	action();															// Print items on OLED
 800192e:	f7ff f9bf 	bl	8000cb0 <action>
}
 8001932:	bf00      	nop
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	2000000c 	.word	0x2000000c
 8001940:	20000024 	.word	0x20000024
 8001944:	08004c34 	.word	0x08004c34
 8001948:	20000014 	.word	0x20000014
 800194c:	20000055 	.word	0x20000055
 8001950:	20000054 	.word	0x20000054
 8001954:	20000568 	.word	0x20000568

08001958 <items_menu_4_set_par_7>:
// ----------------------------------------------------------------------------------------
void items_menu_4_set_par_7(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
	clearn_oled();
 800195e:	f000 fd65 	bl	800242c <clearn_oled>

	// Print selected name of menu
	char str[16] = {0};
 8001962:	2300      	movs	r3, #0
 8001964:	603b      	str	r3, [r7, #0]
 8001966:	1d3b      	adds	r3, r7, #4
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8001970:	4b22      	ldr	r3, [pc, #136]	; (80019fc <items_menu_4_set_par_7+0xa4>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6959      	ldr	r1, [r3, #20]
 8001976:	463b      	mov	r3, r7
 8001978:	220f      	movs	r2, #15
 800197a:	4618      	mov	r0, r3
 800197c:	f003 f896 	bl	8004aac <strncpy>
	ssd1306_SetCursor(10, 3);
 8001980:	2103      	movs	r1, #3
 8001982:	200a      	movs	r0, #10
 8001984:	f000 ff38 	bl	80027f8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8001988:	4a1d      	ldr	r2, [pc, #116]	; (8001a00 <items_menu_4_set_par_7+0xa8>)
 800198a:	4638      	mov	r0, r7
 800198c:	2301      	movs	r3, #1
 800198e:	ca06      	ldmia	r2, {r1, r2}
 8001990:	f000 ff0c 	bl	80027ac <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001994:	f000 fdfa 	bl	800258c <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8001998:	463b      	mov	r3, r7
 800199a:	2210      	movs	r2, #16
 800199c:	2100      	movs	r1, #0
 800199e:	4618      	mov	r0, r3
 80019a0:	f003 f87c 	bl	8004a9c <memset>

	strncpy(str, "Set parametr 7", sizeof(str));
 80019a4:	463b      	mov	r3, r7
 80019a6:	2210      	movs	r2, #16
 80019a8:	4916      	ldr	r1, [pc, #88]	; (8001a04 <items_menu_4_set_par_7+0xac>)
 80019aa:	4618      	mov	r0, r3
 80019ac:	f003 f87e 	bl	8004aac <strncpy>
	ssd1306_SetCursor(0, first_menu_row);
 80019b0:	4b15      	ldr	r3, [pc, #84]	; (8001a08 <items_menu_4_set_par_7+0xb0>)
 80019b2:	881b      	ldrh	r3, [r3, #0]
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	4619      	mov	r1, r3
 80019b8:	2000      	movs	r0, #0
 80019ba:	f000 ff1d 	bl	80027f8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 80019be:	4a10      	ldr	r2, [pc, #64]	; (8001a00 <items_menu_4_set_par_7+0xa8>)
 80019c0:	4638      	mov	r0, r7
 80019c2:	2301      	movs	r3, #1
 80019c4:	ca06      	ldmia	r2, {r1, r2}
 80019c6:	f000 fef1 	bl	80027ac <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80019ca:	f000 fddf 	bl	800258c <ssd1306_UpdateScreen>

	button_status = BOTTON_DOESENT_PRESS;
 80019ce:	4b0f      	ldr	r3, [pc, #60]	; (8001a0c <items_menu_4_set_par_7+0xb4>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 80019d4:	4b0e      	ldr	r3, [pc, #56]	; (8001a10 <items_menu_4_set_par_7+0xb8>)
 80019d6:	2201      	movs	r2, #1
 80019d8:	701a      	strb	r2, [r3, #0]
	do{
		// Doing settings <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	}while (button_status != BUTTON_ENTER);
 80019da:	4b0c      	ldr	r3, [pc, #48]	; (8001a0c <items_menu_4_set_par_7+0xb4>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d1fb      	bne.n	80019da <items_menu_4_set_par_7+0x82>
	block_interrupt_form_up_and_down_buttons = false;
 80019e2:	4b0b      	ldr	r3, [pc, #44]	; (8001a10 <items_menu_4_set_par_7+0xb8>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_4[0];										// Set global pointer on first menu
 80019e8:	4b04      	ldr	r3, [pc, #16]	; (80019fc <items_menu_4_set_par_7+0xa4>)
 80019ea:	4a0a      	ldr	r2, [pc, #40]	; (8001a14 <items_menu_4_set_par_7+0xbc>)
 80019ec:	601a      	str	r2, [r3, #0]
	action();															// Print items on OLED
 80019ee:	f7ff f95f 	bl	8000cb0 <action>
}
 80019f2:	bf00      	nop
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	2000000c 	.word	0x2000000c
 8001a00:	20000024 	.word	0x20000024
 8001a04:	08004c44 	.word	0x08004c44
 8001a08:	20000014 	.word	0x20000014
 8001a0c:	20000055 	.word	0x20000055
 8001a10:	20000054 	.word	0x20000054
 8001a14:	20000568 	.word	0x20000568

08001a18 <items_menu_4_set_par_8>:
// ----------------------------------------------------------------------------------------
void items_menu_4_set_par_8(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
	clearn_oled();
 8001a1e:	f000 fd05 	bl	800242c <clearn_oled>

	// Print selected name of menu
	char str[16] = {0};
 8001a22:	2300      	movs	r3, #0
 8001a24:	603b      	str	r3, [r7, #0]
 8001a26:	1d3b      	adds	r3, r7, #4
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
	strncpy(str, currentItem -> name, 15);
 8001a30:	4b22      	ldr	r3, [pc, #136]	; (8001abc <items_menu_4_set_par_8+0xa4>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	6959      	ldr	r1, [r3, #20]
 8001a36:	463b      	mov	r3, r7
 8001a38:	220f      	movs	r2, #15
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f003 f836 	bl	8004aac <strncpy>
	ssd1306_SetCursor(10, 3);
 8001a40:	2103      	movs	r1, #3
 8001a42:	200a      	movs	r0, #10
 8001a44:	f000 fed8 	bl	80027f8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8001a48:	4a1d      	ldr	r2, [pc, #116]	; (8001ac0 <items_menu_4_set_par_8+0xa8>)
 8001a4a:	4638      	mov	r0, r7
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	ca06      	ldmia	r2, {r1, r2}
 8001a50:	f000 feac 	bl	80027ac <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001a54:	f000 fd9a 	bl	800258c <ssd1306_UpdateScreen>
	memset(str, 0, sizeof(str));
 8001a58:	463b      	mov	r3, r7
 8001a5a:	2210      	movs	r2, #16
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f003 f81c 	bl	8004a9c <memset>

	strncpy(str, "Set parametr 8", sizeof(str));
 8001a64:	463b      	mov	r3, r7
 8001a66:	2210      	movs	r2, #16
 8001a68:	4916      	ldr	r1, [pc, #88]	; (8001ac4 <items_menu_4_set_par_8+0xac>)
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f003 f81e 	bl	8004aac <strncpy>
	ssd1306_SetCursor(0, first_menu_row);
 8001a70:	4b15      	ldr	r3, [pc, #84]	; (8001ac8 <items_menu_4_set_par_8+0xb0>)
 8001a72:	881b      	ldrh	r3, [r3, #0]
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	4619      	mov	r1, r3
 8001a78:	2000      	movs	r0, #0
 8001a7a:	f000 febd 	bl	80027f8 <ssd1306_SetCursor>
	ssd1306_WriteString(str,  Font_7x10, White);
 8001a7e:	4a10      	ldr	r2, [pc, #64]	; (8001ac0 <items_menu_4_set_par_8+0xa8>)
 8001a80:	4638      	mov	r0, r7
 8001a82:	2301      	movs	r3, #1
 8001a84:	ca06      	ldmia	r2, {r1, r2}
 8001a86:	f000 fe91 	bl	80027ac <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001a8a:	f000 fd7f 	bl	800258c <ssd1306_UpdateScreen>

	button_status = BOTTON_DOESENT_PRESS;
 8001a8e:	4b0f      	ldr	r3, [pc, #60]	; (8001acc <items_menu_4_set_par_8+0xb4>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	701a      	strb	r2, [r3, #0]
	block_interrupt_form_up_and_down_buttons = true;
 8001a94:	4b0e      	ldr	r3, [pc, #56]	; (8001ad0 <items_menu_4_set_par_8+0xb8>)
 8001a96:	2201      	movs	r2, #1
 8001a98:	701a      	strb	r2, [r3, #0]
	do{
		// Doing settings <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	}while (button_status != BUTTON_ENTER);
 8001a9a:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <items_menu_4_set_par_8+0xb4>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d1fb      	bne.n	8001a9a <items_menu_4_set_par_8+0x82>
	block_interrupt_form_up_and_down_buttons = false;
 8001aa2:	4b0b      	ldr	r3, [pc, #44]	; (8001ad0 <items_menu_4_set_par_8+0xb8>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	701a      	strb	r2, [r3, #0]

	// Return to first item of current menu
	currentItem = &items_menu_4[0];										// Set global pointer on first menu
 8001aa8:	4b04      	ldr	r3, [pc, #16]	; (8001abc <items_menu_4_set_par_8+0xa4>)
 8001aaa:	4a0a      	ldr	r2, [pc, #40]	; (8001ad4 <items_menu_4_set_par_8+0xbc>)
 8001aac:	601a      	str	r2, [r3, #0]
	action();															// Print items on OLED
 8001aae:	f7ff f8ff 	bl	8000cb0 <action>
}
 8001ab2:	bf00      	nop
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	2000000c 	.word	0x2000000c
 8001ac0:	20000024 	.word	0x20000024
 8001ac4:	08004c54 	.word	0x08004c54
 8001ac8:	20000014 	.word	0x20000014
 8001acc:	20000055 	.word	0x20000055
 8001ad0:	20000054 	.word	0x20000054
 8001ad4:	20000568 	.word	0x20000568

08001ad8 <Menu_Init>:
// ----------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------------------
void Menu_Init (void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b095      	sub	sp, #84	; 0x54
 8001adc:	af00      	add	r7, sp, #0
	// Make pointers on funsctions
	// Main functions
	void (*p_print_rows_on_oled_if_up) (void);
	p_print_rows_on_oled_if_up = print_rows_on_oled_if_up;
 8001ade:	4b98      	ldr	r3, [pc, #608]	; (8001d40 <Menu_Init+0x268>)
 8001ae0:	64fb      	str	r3, [r7, #76]	; 0x4c

	void (*p_print_rows_on_oled_if_down) (void);					// Create pointer on function
	p_print_rows_on_oled_if_down = print_rows_on_oled_if_down;		// Save function print on pointer print_p
 8001ae2:	4b98      	ldr	r3, [pc, #608]	; (8001d44 <Menu_Init+0x26c>)
 8001ae4:	64bb      	str	r3, [r7, #72]	; 0x48

	void (*p_return_from_menu)(void);
	p_return_from_menu = return_from_menu;
 8001ae6:	4b98      	ldr	r3, [pc, #608]	; (8001d48 <Menu_Init+0x270>)
 8001ae8:	647b      	str	r3, [r7, #68]	; 0x44

	void (*p_action) (void);										// Create pointer on function
	p_action = action;												// Save function action on pointer action_p
 8001aea:	4b98      	ldr	r3, [pc, #608]	; (8001d4c <Menu_Init+0x274>)
 8001aec:	643b      	str	r3, [r7, #64]	; 0x40

	// items_menu_1 menu functions
	void (*p_do_it_function_menu_1) (void);						// Function "Do it". Works when select it
	p_do_it_function_menu_1 = do_it_function_menu_1;
 8001aee:	4b98      	ldr	r3, [pc, #608]	; (8001d50 <Menu_Init+0x278>)
 8001af0:	63fb      	str	r3, [r7, #60]	; 0x3c

	void (*p_items_menu_1_set_par_1) (void);
	p_items_menu_1_set_par_1 = items_menu_1_set_par_1;
 8001af2:	4b98      	ldr	r3, [pc, #608]	; (8001d54 <Menu_Init+0x27c>)
 8001af4:	63bb      	str	r3, [r7, #56]	; 0x38

	void (*p_items_menu_1_set_par_2) (void);
	p_items_menu_1_set_par_2 = items_menu_1_set_par_2;
 8001af6:	4b98      	ldr	r3, [pc, #608]	; (8001d58 <Menu_Init+0x280>)
 8001af8:	637b      	str	r3, [r7, #52]	; 0x34

	void (*p_items_menu_1_set_par_3) (void);
	p_items_menu_1_set_par_3 = items_menu_1_set_par_3;
 8001afa:	4b98      	ldr	r3, [pc, #608]	; (8001d5c <Menu_Init+0x284>)
 8001afc:	633b      	str	r3, [r7, #48]	; 0x30

	// items_menu_2 menu functions
	void (*p_do_it_function_menu_2) (void);						// Function "Do it". Works when select it
	p_do_it_function_menu_2 = do_it_function_menu_2;
 8001afe:	4b98      	ldr	r3, [pc, #608]	; (8001d60 <Menu_Init+0x288>)
 8001b00:	62fb      	str	r3, [r7, #44]	; 0x2c

	void (*p_items_menu_2_set_par_1) (void);
	p_items_menu_2_set_par_1 = items_menu_2_set_par_1;
 8001b02:	4b98      	ldr	r3, [pc, #608]	; (8001d64 <Menu_Init+0x28c>)
 8001b04:	62bb      	str	r3, [r7, #40]	; 0x28

	// items_menu_3 menu functions
	void (*p_do_it_function_menu_3) (void);						// Function "Do it". Works when select it
	p_do_it_function_menu_3 = do_it_function_menu_3;
 8001b06:	4b98      	ldr	r3, [pc, #608]	; (8001d68 <Menu_Init+0x290>)
 8001b08:	627b      	str	r3, [r7, #36]	; 0x24

	// items_menu_4 menu functions
	void (*p_items_menu_4_set_par_1) (void);
	p_items_menu_4_set_par_1 = items_menu_4_set_par_1;
 8001b0a:	4b98      	ldr	r3, [pc, #608]	; (8001d6c <Menu_Init+0x294>)
 8001b0c:	623b      	str	r3, [r7, #32]

	void (*p_items_menu_4_set_par_2) (void);
	p_items_menu_4_set_par_2 = items_menu_4_set_par_2;
 8001b0e:	4b98      	ldr	r3, [pc, #608]	; (8001d70 <Menu_Init+0x298>)
 8001b10:	61fb      	str	r3, [r7, #28]

	void (*p_items_menu_4_set_par_3) (void);
	p_items_menu_4_set_par_3 = items_menu_4_set_par_3;
 8001b12:	4b98      	ldr	r3, [pc, #608]	; (8001d74 <Menu_Init+0x29c>)
 8001b14:	61bb      	str	r3, [r7, #24]

	void (*p_items_menu_4_set_par_4) (void);
	p_items_menu_4_set_par_4 = items_menu_4_set_par_4;
 8001b16:	4b98      	ldr	r3, [pc, #608]	; (8001d78 <Menu_Init+0x2a0>)
 8001b18:	617b      	str	r3, [r7, #20]

	void (*p_items_menu_4_set_par_5) (void);
	p_items_menu_4_set_par_5 = items_menu_4_set_par_5;
 8001b1a:	4b98      	ldr	r3, [pc, #608]	; (8001d7c <Menu_Init+0x2a4>)
 8001b1c:	613b      	str	r3, [r7, #16]

	void (*p_items_menu_4_set_par_6) (void);
	p_items_menu_4_set_par_6 = items_menu_4_set_par_6;
 8001b1e:	4b98      	ldr	r3, [pc, #608]	; (8001d80 <Menu_Init+0x2a8>)
 8001b20:	60fb      	str	r3, [r7, #12]

	void (*p_items_menu_4_set_par_7) (void);
	p_items_menu_4_set_par_7 = items_menu_4_set_par_7;
 8001b22:	4b98      	ldr	r3, [pc, #608]	; (8001d84 <Menu_Init+0x2ac>)
 8001b24:	60bb      	str	r3, [r7, #8]

	void (*p_items_menu_4_set_par_8) (void);
	p_items_menu_4_set_par_8 = items_menu_4_set_par_8;
 8001b26:	4b98      	ldr	r3, [pc, #608]	; (8001d88 <Menu_Init+0x2b0>)
 8001b28:	607b      	str	r3, [r7, #4]

	void (*p_do_it_function_menu_4) (void);						// Function "Do it". Works when select it
	p_do_it_function_menu_4 = do_it_function_menu_4;
 8001b2a:	4b98      	ldr	r3, [pc, #608]	; (8001d8c <Menu_Init+0x2b4>)
 8001b2c:	603b      	str	r3, [r7, #0]

	// Fill in elements(nodes) of list (7 items)
	// Main menu items
	/////////////////////////////////////////////////////////////////

	items[0].up = 0;
 8001b2e:	4b98      	ldr	r3, [pc, #608]	; (8001d90 <Menu_Init+0x2b8>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
	items[0].down = &items[1];
 8001b34:	4b96      	ldr	r3, [pc, #600]	; (8001d90 <Menu_Init+0x2b8>)
 8001b36:	4a97      	ldr	r2, [pc, #604]	; (8001d94 <Menu_Init+0x2bc>)
 8001b38:	605a      	str	r2, [r3, #4]
	items[0].child = &items_menu_1[0];
 8001b3a:	4b95      	ldr	r3, [pc, #596]	; (8001d90 <Menu_Init+0x2b8>)
 8001b3c:	4a96      	ldr	r2, [pc, #600]	; (8001d98 <Menu_Init+0x2c0>)
 8001b3e:	609a      	str	r2, [r3, #8]
	items[0].parent = 0;
 8001b40:	4b93      	ldr	r3, [pc, #588]	; (8001d90 <Menu_Init+0x2b8>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	60da      	str	r2, [r3, #12]
	items[0].id = 1;
 8001b46:	4b92      	ldr	r3, [pc, #584]	; (8001d90 <Menu_Init+0x2b8>)
 8001b48:	2201      	movs	r2, #1
 8001b4a:	741a      	strb	r2, [r3, #16]
	items[0].name = "Menu_1";
 8001b4c:	4b90      	ldr	r3, [pc, #576]	; (8001d90 <Menu_Init+0x2b8>)
 8001b4e:	4a93      	ldr	r2, [pc, #588]	; (8001d9c <Menu_Init+0x2c4>)
 8001b50:	615a      	str	r2, [r3, #20]
	items[0].updateScreen_up = p_print_rows_on_oled_if_up;
 8001b52:	4a8f      	ldr	r2, [pc, #572]	; (8001d90 <Menu_Init+0x2b8>)
 8001b54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b56:	6193      	str	r3, [r2, #24]
	items[0].updateScreen_down = p_print_rows_on_oled_if_down;
 8001b58:	4a8d      	ldr	r2, [pc, #564]	; (8001d90 <Menu_Init+0x2b8>)
 8001b5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b5c:	61d3      	str	r3, [r2, #28]
	items[0].makeAction = 0;
 8001b5e:	4b8c      	ldr	r3, [pc, #560]	; (8001d90 <Menu_Init+0x2b8>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	621a      	str	r2, [r3, #32]

	items[1].up = &items[0];
 8001b64:	4b8a      	ldr	r3, [pc, #552]	; (8001d90 <Menu_Init+0x2b8>)
 8001b66:	4a8a      	ldr	r2, [pc, #552]	; (8001d90 <Menu_Init+0x2b8>)
 8001b68:	625a      	str	r2, [r3, #36]	; 0x24
	items[1].down = &items[2];
 8001b6a:	4b89      	ldr	r3, [pc, #548]	; (8001d90 <Menu_Init+0x2b8>)
 8001b6c:	4a8c      	ldr	r2, [pc, #560]	; (8001da0 <Menu_Init+0x2c8>)
 8001b6e:	629a      	str	r2, [r3, #40]	; 0x28
	items[1].child = &items_menu_2[0];
 8001b70:	4b87      	ldr	r3, [pc, #540]	; (8001d90 <Menu_Init+0x2b8>)
 8001b72:	4a8c      	ldr	r2, [pc, #560]	; (8001da4 <Menu_Init+0x2cc>)
 8001b74:	62da      	str	r2, [r3, #44]	; 0x2c
	items[1].parent = 0;
 8001b76:	4b86      	ldr	r3, [pc, #536]	; (8001d90 <Menu_Init+0x2b8>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	631a      	str	r2, [r3, #48]	; 0x30
	items[1].id = 2;
 8001b7c:	4b84      	ldr	r3, [pc, #528]	; (8001d90 <Menu_Init+0x2b8>)
 8001b7e:	2202      	movs	r2, #2
 8001b80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	items[1].name = "Menu_2";
 8001b84:	4b82      	ldr	r3, [pc, #520]	; (8001d90 <Menu_Init+0x2b8>)
 8001b86:	4a88      	ldr	r2, [pc, #544]	; (8001da8 <Menu_Init+0x2d0>)
 8001b88:	639a      	str	r2, [r3, #56]	; 0x38
	items[1].updateScreen_up = p_print_rows_on_oled_if_up;
 8001b8a:	4a81      	ldr	r2, [pc, #516]	; (8001d90 <Menu_Init+0x2b8>)
 8001b8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b8e:	63d3      	str	r3, [r2, #60]	; 0x3c
	items[1].updateScreen_down = p_print_rows_on_oled_if_down;
 8001b90:	4a7f      	ldr	r2, [pc, #508]	; (8001d90 <Menu_Init+0x2b8>)
 8001b92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b94:	6413      	str	r3, [r2, #64]	; 0x40
	items[1].makeAction = 0;
 8001b96:	4b7e      	ldr	r3, [pc, #504]	; (8001d90 <Menu_Init+0x2b8>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	645a      	str	r2, [r3, #68]	; 0x44

	items[2].up = &items[1];
 8001b9c:	4b7c      	ldr	r3, [pc, #496]	; (8001d90 <Menu_Init+0x2b8>)
 8001b9e:	4a7d      	ldr	r2, [pc, #500]	; (8001d94 <Menu_Init+0x2bc>)
 8001ba0:	649a      	str	r2, [r3, #72]	; 0x48
	items[2].down = &items[3];
 8001ba2:	4b7b      	ldr	r3, [pc, #492]	; (8001d90 <Menu_Init+0x2b8>)
 8001ba4:	4a81      	ldr	r2, [pc, #516]	; (8001dac <Menu_Init+0x2d4>)
 8001ba6:	64da      	str	r2, [r3, #76]	; 0x4c
	items[2].child = &items_menu_3[0];
 8001ba8:	4b79      	ldr	r3, [pc, #484]	; (8001d90 <Menu_Init+0x2b8>)
 8001baa:	4a81      	ldr	r2, [pc, #516]	; (8001db0 <Menu_Init+0x2d8>)
 8001bac:	651a      	str	r2, [r3, #80]	; 0x50
	items[2].parent = 0;
 8001bae:	4b78      	ldr	r3, [pc, #480]	; (8001d90 <Menu_Init+0x2b8>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	655a      	str	r2, [r3, #84]	; 0x54
	items[2].id = 3;
 8001bb4:	4b76      	ldr	r3, [pc, #472]	; (8001d90 <Menu_Init+0x2b8>)
 8001bb6:	2203      	movs	r2, #3
 8001bb8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	items[2].name = "Menu_3";
 8001bbc:	4b74      	ldr	r3, [pc, #464]	; (8001d90 <Menu_Init+0x2b8>)
 8001bbe:	4a7d      	ldr	r2, [pc, #500]	; (8001db4 <Menu_Init+0x2dc>)
 8001bc0:	65da      	str	r2, [r3, #92]	; 0x5c
	items[2].updateScreen_up = p_print_rows_on_oled_if_up;
 8001bc2:	4a73      	ldr	r2, [pc, #460]	; (8001d90 <Menu_Init+0x2b8>)
 8001bc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bc6:	6613      	str	r3, [r2, #96]	; 0x60
	items[2].updateScreen_down = p_print_rows_on_oled_if_down;
 8001bc8:	4a71      	ldr	r2, [pc, #452]	; (8001d90 <Menu_Init+0x2b8>)
 8001bca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bcc:	6653      	str	r3, [r2, #100]	; 0x64
	items[2].makeAction = 0;
 8001bce:	4b70      	ldr	r3, [pc, #448]	; (8001d90 <Menu_Init+0x2b8>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	669a      	str	r2, [r3, #104]	; 0x68

	items[3].up = &items[2];
 8001bd4:	4b6e      	ldr	r3, [pc, #440]	; (8001d90 <Menu_Init+0x2b8>)
 8001bd6:	4a72      	ldr	r2, [pc, #456]	; (8001da0 <Menu_Init+0x2c8>)
 8001bd8:	66da      	str	r2, [r3, #108]	; 0x6c
	items[3].down = &items[4];
 8001bda:	4b6d      	ldr	r3, [pc, #436]	; (8001d90 <Menu_Init+0x2b8>)
 8001bdc:	4a76      	ldr	r2, [pc, #472]	; (8001db8 <Menu_Init+0x2e0>)
 8001bde:	671a      	str	r2, [r3, #112]	; 0x70
	items[3].child = &items_menu_4[0];
 8001be0:	4b6b      	ldr	r3, [pc, #428]	; (8001d90 <Menu_Init+0x2b8>)
 8001be2:	4a76      	ldr	r2, [pc, #472]	; (8001dbc <Menu_Init+0x2e4>)
 8001be4:	675a      	str	r2, [r3, #116]	; 0x74
	items[3].parent = 0;
 8001be6:	4b6a      	ldr	r3, [pc, #424]	; (8001d90 <Menu_Init+0x2b8>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	679a      	str	r2, [r3, #120]	; 0x78
	items[3].id = 4;
 8001bec:	4b68      	ldr	r3, [pc, #416]	; (8001d90 <Menu_Init+0x2b8>)
 8001bee:	2204      	movs	r2, #4
 8001bf0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	items[3].name = "Menu_4";
 8001bf4:	4b66      	ldr	r3, [pc, #408]	; (8001d90 <Menu_Init+0x2b8>)
 8001bf6:	4a72      	ldr	r2, [pc, #456]	; (8001dc0 <Menu_Init+0x2e8>)
 8001bf8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	items[3].updateScreen_up = p_print_rows_on_oled_if_up;
 8001bfc:	4a64      	ldr	r2, [pc, #400]	; (8001d90 <Menu_Init+0x2b8>)
 8001bfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c00:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	items[3].updateScreen_down = p_print_rows_on_oled_if_down;
 8001c04:	4a62      	ldr	r2, [pc, #392]	; (8001d90 <Menu_Init+0x2b8>)
 8001c06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	items[3].makeAction = 0;
 8001c0c:	4b60      	ldr	r3, [pc, #384]	; (8001d90 <Menu_Init+0x2b8>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

	items[4].up = &items[3];
 8001c14:	4b5e      	ldr	r3, [pc, #376]	; (8001d90 <Menu_Init+0x2b8>)
 8001c16:	4a65      	ldr	r2, [pc, #404]	; (8001dac <Menu_Init+0x2d4>)
 8001c18:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	items[4].down = &items[5];
 8001c1c:	4b5c      	ldr	r3, [pc, #368]	; (8001d90 <Menu_Init+0x2b8>)
 8001c1e:	4a69      	ldr	r2, [pc, #420]	; (8001dc4 <Menu_Init+0x2ec>)
 8001c20:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	items[4].child = 0;
 8001c24:	4b5a      	ldr	r3, [pc, #360]	; (8001d90 <Menu_Init+0x2b8>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	items[4].parent = 0;
 8001c2c:	4b58      	ldr	r3, [pc, #352]	; (8001d90 <Menu_Init+0x2b8>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	items[4].id = 5;
 8001c34:	4b56      	ldr	r3, [pc, #344]	; (8001d90 <Menu_Init+0x2b8>)
 8001c36:	2205      	movs	r2, #5
 8001c38:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	items[4].name = "Menu_5";
 8001c3c:	4b54      	ldr	r3, [pc, #336]	; (8001d90 <Menu_Init+0x2b8>)
 8001c3e:	4a62      	ldr	r2, [pc, #392]	; (8001dc8 <Menu_Init+0x2f0>)
 8001c40:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	items[4].updateScreen_up = p_print_rows_on_oled_if_up;
 8001c44:	4a52      	ldr	r2, [pc, #328]	; (8001d90 <Menu_Init+0x2b8>)
 8001c46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c48:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
	items[4].updateScreen_down = p_print_rows_on_oled_if_down;
 8001c4c:	4a50      	ldr	r2, [pc, #320]	; (8001d90 <Menu_Init+0x2b8>)
 8001c4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c50:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
	items[4].makeAction = 0;
 8001c54:	4b4e      	ldr	r3, [pc, #312]	; (8001d90 <Menu_Init+0x2b8>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

	items[5].up = &items[4];
 8001c5c:	4b4c      	ldr	r3, [pc, #304]	; (8001d90 <Menu_Init+0x2b8>)
 8001c5e:	4a56      	ldr	r2, [pc, #344]	; (8001db8 <Menu_Init+0x2e0>)
 8001c60:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	items[5].down = &items[6];
 8001c64:	4b4a      	ldr	r3, [pc, #296]	; (8001d90 <Menu_Init+0x2b8>)
 8001c66:	4a59      	ldr	r2, [pc, #356]	; (8001dcc <Menu_Init+0x2f4>)
 8001c68:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	items[5].child = 0;
 8001c6c:	4b48      	ldr	r3, [pc, #288]	; (8001d90 <Menu_Init+0x2b8>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	items[5].parent = 0;
 8001c74:	4b46      	ldr	r3, [pc, #280]	; (8001d90 <Menu_Init+0x2b8>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	items[5].id = 6;
 8001c7c:	4b44      	ldr	r3, [pc, #272]	; (8001d90 <Menu_Init+0x2b8>)
 8001c7e:	2206      	movs	r2, #6
 8001c80:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
	items[5].name = "Menu_6";
 8001c84:	4b42      	ldr	r3, [pc, #264]	; (8001d90 <Menu_Init+0x2b8>)
 8001c86:	4a52      	ldr	r2, [pc, #328]	; (8001dd0 <Menu_Init+0x2f8>)
 8001c88:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	items[5].updateScreen_up = p_print_rows_on_oled_if_up;
 8001c8c:	4a40      	ldr	r2, [pc, #256]	; (8001d90 <Menu_Init+0x2b8>)
 8001c8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c90:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
	items[5].updateScreen_down = p_print_rows_on_oled_if_down;
 8001c94:	4a3e      	ldr	r2, [pc, #248]	; (8001d90 <Menu_Init+0x2b8>)
 8001c96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c98:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
	items[5].makeAction  = 0;
 8001c9c:	4b3c      	ldr	r3, [pc, #240]	; (8001d90 <Menu_Init+0x2b8>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	items[6].up = &items[5];
 8001ca4:	4b3a      	ldr	r3, [pc, #232]	; (8001d90 <Menu_Init+0x2b8>)
 8001ca6:	4a47      	ldr	r2, [pc, #284]	; (8001dc4 <Menu_Init+0x2ec>)
 8001ca8:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	items[6].down = 0;
 8001cac:	4b38      	ldr	r3, [pc, #224]	; (8001d90 <Menu_Init+0x2b8>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	items[6].child = 0;
 8001cb4:	4b36      	ldr	r3, [pc, #216]	; (8001d90 <Menu_Init+0x2b8>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	items[6].parent = 0;
 8001cbc:	4b34      	ldr	r3, [pc, #208]	; (8001d90 <Menu_Init+0x2b8>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	items[6].id = 7;
 8001cc4:	4b32      	ldr	r3, [pc, #200]	; (8001d90 <Menu_Init+0x2b8>)
 8001cc6:	2207      	movs	r2, #7
 8001cc8:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
	items[6].name = "Menu_7";
 8001ccc:	4b30      	ldr	r3, [pc, #192]	; (8001d90 <Menu_Init+0x2b8>)
 8001cce:	4a41      	ldr	r2, [pc, #260]	; (8001dd4 <Menu_Init+0x2fc>)
 8001cd0:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
	items[6].updateScreen_up = p_print_rows_on_oled_if_up;
 8001cd4:	4a2e      	ldr	r2, [pc, #184]	; (8001d90 <Menu_Init+0x2b8>)
 8001cd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cd8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
	items[6].updateScreen_down = p_print_rows_on_oled_if_down;
 8001cdc:	4a2c      	ldr	r2, [pc, #176]	; (8001d90 <Menu_Init+0x2b8>)
 8001cde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ce0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
	items[6].makeAction  = 0;
 8001ce4:	4b2a      	ldr	r3, [pc, #168]	; (8001d90 <Menu_Init+0x2b8>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

	///////////////////////////////////////////////////////////////////
	// Creating next menu
	items_menu_1[0].up = 0;
 8001cec:	4b2a      	ldr	r3, [pc, #168]	; (8001d98 <Menu_Init+0x2c0>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	601a      	str	r2, [r3, #0]
	items_menu_1[0].down = &items_menu_1[1];
 8001cf2:	4b29      	ldr	r3, [pc, #164]	; (8001d98 <Menu_Init+0x2c0>)
 8001cf4:	4a38      	ldr	r2, [pc, #224]	; (8001dd8 <Menu_Init+0x300>)
 8001cf6:	605a      	str	r2, [r3, #4]
	items_menu_1[0].id = 1;
 8001cf8:	4b27      	ldr	r3, [pc, #156]	; (8001d98 <Menu_Init+0x2c0>)
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	741a      	strb	r2, [r3, #16]
	items_menu_1[0].child = 0;
 8001cfe:	4b26      	ldr	r3, [pc, #152]	; (8001d98 <Menu_Init+0x2c0>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	609a      	str	r2, [r3, #8]
	items_menu_1[0].parent = &items[0];
 8001d04:	4b24      	ldr	r3, [pc, #144]	; (8001d98 <Menu_Init+0x2c0>)
 8001d06:	4a22      	ldr	r2, [pc, #136]	; (8001d90 <Menu_Init+0x2b8>)
 8001d08:	60da      	str	r2, [r3, #12]
	items_menu_1[0].name = "set par 1";
 8001d0a:	4b23      	ldr	r3, [pc, #140]	; (8001d98 <Menu_Init+0x2c0>)
 8001d0c:	4a33      	ldr	r2, [pc, #204]	; (8001ddc <Menu_Init+0x304>)
 8001d0e:	615a      	str	r2, [r3, #20]
	items_menu_1[0].updateScreen_up = p_print_rows_on_oled_if_up;
 8001d10:	4a21      	ldr	r2, [pc, #132]	; (8001d98 <Menu_Init+0x2c0>)
 8001d12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d14:	6193      	str	r3, [r2, #24]
	items_menu_1[0].updateScreen_down = p_print_rows_on_oled_if_down;
 8001d16:	4a20      	ldr	r2, [pc, #128]	; (8001d98 <Menu_Init+0x2c0>)
 8001d18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d1a:	61d3      	str	r3, [r2, #28]
	items_menu_1[0].makeAction = p_items_menu_1_set_par_1;
 8001d1c:	4a1e      	ldr	r2, [pc, #120]	; (8001d98 <Menu_Init+0x2c0>)
 8001d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d20:	6213      	str	r3, [r2, #32]

	items_menu_1[1].up = &items_menu_1[0];
 8001d22:	4b1d      	ldr	r3, [pc, #116]	; (8001d98 <Menu_Init+0x2c0>)
 8001d24:	4a1c      	ldr	r2, [pc, #112]	; (8001d98 <Menu_Init+0x2c0>)
 8001d26:	625a      	str	r2, [r3, #36]	; 0x24
	items_menu_1[1].down = &items_menu_1[2];
 8001d28:	4b1b      	ldr	r3, [pc, #108]	; (8001d98 <Menu_Init+0x2c0>)
 8001d2a:	4a2d      	ldr	r2, [pc, #180]	; (8001de0 <Menu_Init+0x308>)
 8001d2c:	629a      	str	r2, [r3, #40]	; 0x28
	items_menu_1[1].child = 0;
 8001d2e:	4b1a      	ldr	r3, [pc, #104]	; (8001d98 <Menu_Init+0x2c0>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	62da      	str	r2, [r3, #44]	; 0x2c
	items_menu_1[1].parent = &items[0];
 8001d34:	4b18      	ldr	r3, [pc, #96]	; (8001d98 <Menu_Init+0x2c0>)
 8001d36:	4a16      	ldr	r2, [pc, #88]	; (8001d90 <Menu_Init+0x2b8>)
 8001d38:	631a      	str	r2, [r3, #48]	; 0x30
	items_menu_1[1].id = 2;
 8001d3a:	4b17      	ldr	r3, [pc, #92]	; (8001d98 <Menu_Init+0x2c0>)
 8001d3c:	2202      	movs	r2, #2
 8001d3e:	e051      	b.n	8001de4 <Menu_Init+0x30c>
 8001d40:	08000989 	.word	0x08000989
 8001d44:	08000a81 	.word	0x08000a81
 8001d48:	08000ded 	.word	0x08000ded
 8001d4c:	08000cb1 	.word	0x08000cb1
 8001d50:	08000e41 	.word	0x08000e41
 8001d54:	08000f25 	.word	0x08000f25
 8001d58:	08000fe5 	.word	0x08000fe5
 8001d5c:	080010a5 	.word	0x080010a5
 8001d60:	08001165 	.word	0x08001165
 8001d64:	08001249 	.word	0x08001249
 8001d68:	08001309 	.word	0x08001309
 8001d6c:	080014d9 	.word	0x080014d9
 8001d70:	08001599 	.word	0x08001599
 8001d74:	08001659 	.word	0x08001659
 8001d78:	08001719 	.word	0x08001719
 8001d7c:	080017d9 	.word	0x080017d9
 8001d80:	08001899 	.word	0x08001899
 8001d84:	08001959 	.word	0x08001959
 8001d88:	08001a19 	.word	0x08001a19
 8001d8c:	080013f1 	.word	0x080013f1
 8001d90:	200007cc 	.word	0x200007cc
 8001d94:	200007f0 	.word	0x200007f0
 8001d98:	200006d0 	.word	0x200006d0
 8001d9c:	08004c64 	.word	0x08004c64
 8001da0:	20000814 	.word	0x20000814
 8001da4:	200004fc 	.word	0x200004fc
 8001da8:	08004c6c 	.word	0x08004c6c
 8001dac:	20000838 	.word	0x20000838
 8001db0:	20000784 	.word	0x20000784
 8001db4:	08004c74 	.word	0x08004c74
 8001db8:	2000085c 	.word	0x2000085c
 8001dbc:	20000568 	.word	0x20000568
 8001dc0:	08004c7c 	.word	0x08004c7c
 8001dc4:	20000880 	.word	0x20000880
 8001dc8:	08004c84 	.word	0x08004c84
 8001dcc:	200008a4 	.word	0x200008a4
 8001dd0:	08004c8c 	.word	0x08004c8c
 8001dd4:	08004c94 	.word	0x08004c94
 8001dd8:	200006f4 	.word	0x200006f4
 8001ddc:	08004c9c 	.word	0x08004c9c
 8001de0:	20000718 	.word	0x20000718
 8001de4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	items_menu_1[1].name = "set par 2";
 8001de8:	4b8e      	ldr	r3, [pc, #568]	; (8002024 <Menu_Init+0x54c>)
 8001dea:	4a8f      	ldr	r2, [pc, #572]	; (8002028 <Menu_Init+0x550>)
 8001dec:	639a      	str	r2, [r3, #56]	; 0x38
	items_menu_1[1].updateScreen_up = p_print_rows_on_oled_if_up;
 8001dee:	4a8d      	ldr	r2, [pc, #564]	; (8002024 <Menu_Init+0x54c>)
 8001df0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001df2:	63d3      	str	r3, [r2, #60]	; 0x3c
	items_menu_1[1].updateScreen_down = p_print_rows_on_oled_if_down;
 8001df4:	4a8b      	ldr	r2, [pc, #556]	; (8002024 <Menu_Init+0x54c>)
 8001df6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001df8:	6413      	str	r3, [r2, #64]	; 0x40
	items_menu_1[1].makeAction = p_items_menu_1_set_par_2;
 8001dfa:	4a8a      	ldr	r2, [pc, #552]	; (8002024 <Menu_Init+0x54c>)
 8001dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dfe:	6453      	str	r3, [r2, #68]	; 0x44

	items_menu_1[2].up = &items_menu_1[1];
 8001e00:	4b88      	ldr	r3, [pc, #544]	; (8002024 <Menu_Init+0x54c>)
 8001e02:	4a8a      	ldr	r2, [pc, #552]	; (800202c <Menu_Init+0x554>)
 8001e04:	649a      	str	r2, [r3, #72]	; 0x48
	items_menu_1[2].down = &items_menu_1[3];
 8001e06:	4b87      	ldr	r3, [pc, #540]	; (8002024 <Menu_Init+0x54c>)
 8001e08:	4a89      	ldr	r2, [pc, #548]	; (8002030 <Menu_Init+0x558>)
 8001e0a:	64da      	str	r2, [r3, #76]	; 0x4c
	items_menu_1[2].child = 0;
 8001e0c:	4b85      	ldr	r3, [pc, #532]	; (8002024 <Menu_Init+0x54c>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	651a      	str	r2, [r3, #80]	; 0x50
	items_menu_1[2].parent = &items[0];
 8001e12:	4b84      	ldr	r3, [pc, #528]	; (8002024 <Menu_Init+0x54c>)
 8001e14:	4a87      	ldr	r2, [pc, #540]	; (8002034 <Menu_Init+0x55c>)
 8001e16:	655a      	str	r2, [r3, #84]	; 0x54
	items_menu_1[2].id = 3;
 8001e18:	4b82      	ldr	r3, [pc, #520]	; (8002024 <Menu_Init+0x54c>)
 8001e1a:	2203      	movs	r2, #3
 8001e1c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	items_menu_1[2].name = "set par 3";
 8001e20:	4b80      	ldr	r3, [pc, #512]	; (8002024 <Menu_Init+0x54c>)
 8001e22:	4a85      	ldr	r2, [pc, #532]	; (8002038 <Menu_Init+0x560>)
 8001e24:	65da      	str	r2, [r3, #92]	; 0x5c
	items_menu_1[2].updateScreen_up = p_print_rows_on_oled_if_up;
 8001e26:	4a7f      	ldr	r2, [pc, #508]	; (8002024 <Menu_Init+0x54c>)
 8001e28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e2a:	6613      	str	r3, [r2, #96]	; 0x60
	items_menu_1[2].updateScreen_down = p_print_rows_on_oled_if_down;
 8001e2c:	4a7d      	ldr	r2, [pc, #500]	; (8002024 <Menu_Init+0x54c>)
 8001e2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e30:	6653      	str	r3, [r2, #100]	; 0x64
	items_menu_1[2].makeAction = p_items_menu_1_set_par_3;
 8001e32:	4a7c      	ldr	r2, [pc, #496]	; (8002024 <Menu_Init+0x54c>)
 8001e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e36:	6693      	str	r3, [r2, #104]	; 0x68

	items_menu_1[3].up = &items_menu_1[2];
 8001e38:	4b7a      	ldr	r3, [pc, #488]	; (8002024 <Menu_Init+0x54c>)
 8001e3a:	4a80      	ldr	r2, [pc, #512]	; (800203c <Menu_Init+0x564>)
 8001e3c:	66da      	str	r2, [r3, #108]	; 0x6c
	items_menu_1[3].down = &items_menu_1[4];
 8001e3e:	4b79      	ldr	r3, [pc, #484]	; (8002024 <Menu_Init+0x54c>)
 8001e40:	4a7f      	ldr	r2, [pc, #508]	; (8002040 <Menu_Init+0x568>)
 8001e42:	671a      	str	r2, [r3, #112]	; 0x70
	items_menu_1[3].child = 0;
 8001e44:	4b77      	ldr	r3, [pc, #476]	; (8002024 <Menu_Init+0x54c>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	675a      	str	r2, [r3, #116]	; 0x74
	items_menu_1[3].parent = &items[0];
 8001e4a:	4b76      	ldr	r3, [pc, #472]	; (8002024 <Menu_Init+0x54c>)
 8001e4c:	4a79      	ldr	r2, [pc, #484]	; (8002034 <Menu_Init+0x55c>)
 8001e4e:	679a      	str	r2, [r3, #120]	; 0x78
	items_menu_1[3].id = 4;
 8001e50:	4b74      	ldr	r3, [pc, #464]	; (8002024 <Menu_Init+0x54c>)
 8001e52:	2204      	movs	r2, #4
 8001e54:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	items_menu_1[3].name = "DO IT";						// Name of item
 8001e58:	4b72      	ldr	r3, [pc, #456]	; (8002024 <Menu_Init+0x54c>)
 8001e5a:	4a7a      	ldr	r2, [pc, #488]	; (8002044 <Menu_Init+0x56c>)
 8001e5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	items_menu_1[3].updateScreen_up = p_print_rows_on_oled_if_up;
 8001e60:	4a70      	ldr	r2, [pc, #448]	; (8002024 <Menu_Init+0x54c>)
 8001e62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e64:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	items_menu_1[3].updateScreen_down = p_print_rows_on_oled_if_down;
 8001e68:	4a6e      	ldr	r2, [pc, #440]	; (8002024 <Menu_Init+0x54c>)
 8001e6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	items_menu_1[3].makeAction = p_do_it_function_menu_1;
 8001e70:	4a6c      	ldr	r2, [pc, #432]	; (8002024 <Menu_Init+0x54c>)
 8001e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e74:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

	items_menu_1[4].up = &items_menu_1[3];
 8001e78:	4b6a      	ldr	r3, [pc, #424]	; (8002024 <Menu_Init+0x54c>)
 8001e7a:	4a6d      	ldr	r2, [pc, #436]	; (8002030 <Menu_Init+0x558>)
 8001e7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	items_menu_1[4].down = 0;
 8001e80:	4b68      	ldr	r3, [pc, #416]	; (8002024 <Menu_Init+0x54c>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	items_menu_1[4].child = 0;
 8001e88:	4b66      	ldr	r3, [pc, #408]	; (8002024 <Menu_Init+0x54c>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	items_menu_1[4].parent = &items[0];
 8001e90:	4b64      	ldr	r3, [pc, #400]	; (8002024 <Menu_Init+0x54c>)
 8001e92:	4a68      	ldr	r2, [pc, #416]	; (8002034 <Menu_Init+0x55c>)
 8001e94:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	items_menu_1[4].id = 5;
 8001e98:	4b62      	ldr	r3, [pc, #392]	; (8002024 <Menu_Init+0x54c>)
 8001e9a:	2205      	movs	r2, #5
 8001e9c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	items_menu_1[4].name = "EXIT";						// Name of item
 8001ea0:	4b60      	ldr	r3, [pc, #384]	; (8002024 <Menu_Init+0x54c>)
 8001ea2:	4a69      	ldr	r2, [pc, #420]	; (8002048 <Menu_Init+0x570>)
 8001ea4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	items_menu_1[4].updateScreen_up = p_print_rows_on_oled_if_up;
 8001ea8:	4a5e      	ldr	r2, [pc, #376]	; (8002024 <Menu_Init+0x54c>)
 8001eaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001eac:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
	items_menu_1[4].updateScreen_down = p_print_rows_on_oled_if_down;
 8001eb0:	4a5c      	ldr	r2, [pc, #368]	; (8002024 <Menu_Init+0x54c>)
 8001eb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001eb4:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
	items_menu_1[4].makeAction = p_return_from_menu;
 8001eb8:	4a5a      	ldr	r2, [pc, #360]	; (8002024 <Menu_Init+0x54c>)
 8001eba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ebc:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

	///////////////////////////////////////////////////////////////////
	// Creating next menu
	items_menu_2[0].up = 0;
 8001ec0:	4b62      	ldr	r3, [pc, #392]	; (800204c <Menu_Init+0x574>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]
	items_menu_2[0].down = &items_menu_2[1];
 8001ec6:	4b61      	ldr	r3, [pc, #388]	; (800204c <Menu_Init+0x574>)
 8001ec8:	4a61      	ldr	r2, [pc, #388]	; (8002050 <Menu_Init+0x578>)
 8001eca:	605a      	str	r2, [r3, #4]
	items_menu_2[0].child = 0;
 8001ecc:	4b5f      	ldr	r3, [pc, #380]	; (800204c <Menu_Init+0x574>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	609a      	str	r2, [r3, #8]
	items_menu_2[0].parent = &items[1];
 8001ed2:	4b5e      	ldr	r3, [pc, #376]	; (800204c <Menu_Init+0x574>)
 8001ed4:	4a5f      	ldr	r2, [pc, #380]	; (8002054 <Menu_Init+0x57c>)
 8001ed6:	60da      	str	r2, [r3, #12]
	items_menu_2[0].id = 1;
 8001ed8:	4b5c      	ldr	r3, [pc, #368]	; (800204c <Menu_Init+0x574>)
 8001eda:	2201      	movs	r2, #1
 8001edc:	741a      	strb	r2, [r3, #16]
	items_menu_2[0].name = "set par 1";						// Name of item
 8001ede:	4b5b      	ldr	r3, [pc, #364]	; (800204c <Menu_Init+0x574>)
 8001ee0:	4a5d      	ldr	r2, [pc, #372]	; (8002058 <Menu_Init+0x580>)
 8001ee2:	615a      	str	r2, [r3, #20]
	items_menu_2[0].updateScreen_up = p_print_rows_on_oled_if_up;
 8001ee4:	4a59      	ldr	r2, [pc, #356]	; (800204c <Menu_Init+0x574>)
 8001ee6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ee8:	6193      	str	r3, [r2, #24]
	items_menu_2[0].updateScreen_down = p_print_rows_on_oled_if_down;
 8001eea:	4a58      	ldr	r2, [pc, #352]	; (800204c <Menu_Init+0x574>)
 8001eec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001eee:	61d3      	str	r3, [r2, #28]
	items_menu_2[0].makeAction = p_items_menu_2_set_par_1;
 8001ef0:	4a56      	ldr	r2, [pc, #344]	; (800204c <Menu_Init+0x574>)
 8001ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ef4:	6213      	str	r3, [r2, #32]

	items_menu_2[1].up = &items_menu_2[0];
 8001ef6:	4b55      	ldr	r3, [pc, #340]	; (800204c <Menu_Init+0x574>)
 8001ef8:	4a54      	ldr	r2, [pc, #336]	; (800204c <Menu_Init+0x574>)
 8001efa:	625a      	str	r2, [r3, #36]	; 0x24
	items_menu_2[1].down = &items_menu_2[2];
 8001efc:	4b53      	ldr	r3, [pc, #332]	; (800204c <Menu_Init+0x574>)
 8001efe:	4a57      	ldr	r2, [pc, #348]	; (800205c <Menu_Init+0x584>)
 8001f00:	629a      	str	r2, [r3, #40]	; 0x28
	items_menu_2[1].child = 0;
 8001f02:	4b52      	ldr	r3, [pc, #328]	; (800204c <Menu_Init+0x574>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	62da      	str	r2, [r3, #44]	; 0x2c
	items_menu_2[1].parent = &items[1];
 8001f08:	4b50      	ldr	r3, [pc, #320]	; (800204c <Menu_Init+0x574>)
 8001f0a:	4a52      	ldr	r2, [pc, #328]	; (8002054 <Menu_Init+0x57c>)
 8001f0c:	631a      	str	r2, [r3, #48]	; 0x30
	items_menu_2[1].id = 2;
 8001f0e:	4b4f      	ldr	r3, [pc, #316]	; (800204c <Menu_Init+0x574>)
 8001f10:	2202      	movs	r2, #2
 8001f12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	items_menu_2[1].name = "DO IT";						// Name of item
 8001f16:	4b4d      	ldr	r3, [pc, #308]	; (800204c <Menu_Init+0x574>)
 8001f18:	4a4a      	ldr	r2, [pc, #296]	; (8002044 <Menu_Init+0x56c>)
 8001f1a:	639a      	str	r2, [r3, #56]	; 0x38
	items_menu_2[1].updateScreen_up = p_print_rows_on_oled_if_up;
 8001f1c:	4a4b      	ldr	r2, [pc, #300]	; (800204c <Menu_Init+0x574>)
 8001f1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f20:	63d3      	str	r3, [r2, #60]	; 0x3c
	items_menu_2[1].updateScreen_down = p_print_rows_on_oled_if_down;
 8001f22:	4a4a      	ldr	r2, [pc, #296]	; (800204c <Menu_Init+0x574>)
 8001f24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f26:	6413      	str	r3, [r2, #64]	; 0x40
	items_menu_2[1].makeAction = p_do_it_function_menu_2;
 8001f28:	4a48      	ldr	r2, [pc, #288]	; (800204c <Menu_Init+0x574>)
 8001f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f2c:	6453      	str	r3, [r2, #68]	; 0x44

	items_menu_2[2].up = &items_menu_2[1];
 8001f2e:	4b47      	ldr	r3, [pc, #284]	; (800204c <Menu_Init+0x574>)
 8001f30:	4a47      	ldr	r2, [pc, #284]	; (8002050 <Menu_Init+0x578>)
 8001f32:	649a      	str	r2, [r3, #72]	; 0x48
	items_menu_2[2].down = 0;
 8001f34:	4b45      	ldr	r3, [pc, #276]	; (800204c <Menu_Init+0x574>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	64da      	str	r2, [r3, #76]	; 0x4c
	items_menu_2[2].child = 0;
 8001f3a:	4b44      	ldr	r3, [pc, #272]	; (800204c <Menu_Init+0x574>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	651a      	str	r2, [r3, #80]	; 0x50
	items_menu_2[2].parent = &items[1];
 8001f40:	4b42      	ldr	r3, [pc, #264]	; (800204c <Menu_Init+0x574>)
 8001f42:	4a44      	ldr	r2, [pc, #272]	; (8002054 <Menu_Init+0x57c>)
 8001f44:	655a      	str	r2, [r3, #84]	; 0x54
	items_menu_2[2].id = 3;
 8001f46:	4b41      	ldr	r3, [pc, #260]	; (800204c <Menu_Init+0x574>)
 8001f48:	2203      	movs	r2, #3
 8001f4a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	items_menu_2[2].name = "EXIT";						// Name of item
 8001f4e:	4b3f      	ldr	r3, [pc, #252]	; (800204c <Menu_Init+0x574>)
 8001f50:	4a3d      	ldr	r2, [pc, #244]	; (8002048 <Menu_Init+0x570>)
 8001f52:	65da      	str	r2, [r3, #92]	; 0x5c
	items_menu_2[2].updateScreen_up = p_print_rows_on_oled_if_up;
 8001f54:	4a3d      	ldr	r2, [pc, #244]	; (800204c <Menu_Init+0x574>)
 8001f56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f58:	6613      	str	r3, [r2, #96]	; 0x60
	items_menu_2[2].updateScreen_down = p_print_rows_on_oled_if_down;
 8001f5a:	4a3c      	ldr	r2, [pc, #240]	; (800204c <Menu_Init+0x574>)
 8001f5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f5e:	6653      	str	r3, [r2, #100]	; 0x64
	items_menu_2[2].makeAction = p_return_from_menu;
 8001f60:	4a3a      	ldr	r2, [pc, #232]	; (800204c <Menu_Init+0x574>)
 8001f62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f64:	6693      	str	r3, [r2, #104]	; 0x68

	///////////////////////////////////////////////////////////////////
	// Creating next menu
	items_menu_3[0].up = 0;
 8001f66:	4b3e      	ldr	r3, [pc, #248]	; (8002060 <Menu_Init+0x588>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]
	items_menu_3[0].down = &items_menu_3[1];
 8001f6c:	4b3c      	ldr	r3, [pc, #240]	; (8002060 <Menu_Init+0x588>)
 8001f6e:	4a3d      	ldr	r2, [pc, #244]	; (8002064 <Menu_Init+0x58c>)
 8001f70:	605a      	str	r2, [r3, #4]
	items_menu_3[0].child = 0;
 8001f72:	4b3b      	ldr	r3, [pc, #236]	; (8002060 <Menu_Init+0x588>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	609a      	str	r2, [r3, #8]
	items_menu_3[0].parent = &items[2];
 8001f78:	4b39      	ldr	r3, [pc, #228]	; (8002060 <Menu_Init+0x588>)
 8001f7a:	4a3b      	ldr	r2, [pc, #236]	; (8002068 <Menu_Init+0x590>)
 8001f7c:	60da      	str	r2, [r3, #12]
	items_menu_3[0].id = 1;
 8001f7e:	4b38      	ldr	r3, [pc, #224]	; (8002060 <Menu_Init+0x588>)
 8001f80:	2201      	movs	r2, #1
 8001f82:	741a      	strb	r2, [r3, #16]
	items_menu_3[0].name = "DO IT";						// Name of item
 8001f84:	4b36      	ldr	r3, [pc, #216]	; (8002060 <Menu_Init+0x588>)
 8001f86:	4a2f      	ldr	r2, [pc, #188]	; (8002044 <Menu_Init+0x56c>)
 8001f88:	615a      	str	r2, [r3, #20]
	items_menu_3[0].updateScreen_up = p_print_rows_on_oled_if_up;
 8001f8a:	4a35      	ldr	r2, [pc, #212]	; (8002060 <Menu_Init+0x588>)
 8001f8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f8e:	6193      	str	r3, [r2, #24]
	items_menu_3[0].updateScreen_down = p_print_rows_on_oled_if_down;
 8001f90:	4a33      	ldr	r2, [pc, #204]	; (8002060 <Menu_Init+0x588>)
 8001f92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f94:	61d3      	str	r3, [r2, #28]
	items_menu_3[0].makeAction = p_do_it_function_menu_3;
 8001f96:	4a32      	ldr	r2, [pc, #200]	; (8002060 <Menu_Init+0x588>)
 8001f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9a:	6213      	str	r3, [r2, #32]

	items_menu_3[1].up = &items_menu_3[0];
 8001f9c:	4b30      	ldr	r3, [pc, #192]	; (8002060 <Menu_Init+0x588>)
 8001f9e:	4a30      	ldr	r2, [pc, #192]	; (8002060 <Menu_Init+0x588>)
 8001fa0:	625a      	str	r2, [r3, #36]	; 0x24
	items_menu_3[1].down = 0;
 8001fa2:	4b2f      	ldr	r3, [pc, #188]	; (8002060 <Menu_Init+0x588>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	629a      	str	r2, [r3, #40]	; 0x28
	items_menu_3[1].child = 0;
 8001fa8:	4b2d      	ldr	r3, [pc, #180]	; (8002060 <Menu_Init+0x588>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	62da      	str	r2, [r3, #44]	; 0x2c
	items_menu_3[1].parent = &items[2];
 8001fae:	4b2c      	ldr	r3, [pc, #176]	; (8002060 <Menu_Init+0x588>)
 8001fb0:	4a2d      	ldr	r2, [pc, #180]	; (8002068 <Menu_Init+0x590>)
 8001fb2:	631a      	str	r2, [r3, #48]	; 0x30
	items_menu_3[1].id = 2;
 8001fb4:	4b2a      	ldr	r3, [pc, #168]	; (8002060 <Menu_Init+0x588>)
 8001fb6:	2202      	movs	r2, #2
 8001fb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	items_menu_3[1].name = "EXIT";						// Name of item
 8001fbc:	4b28      	ldr	r3, [pc, #160]	; (8002060 <Menu_Init+0x588>)
 8001fbe:	4a22      	ldr	r2, [pc, #136]	; (8002048 <Menu_Init+0x570>)
 8001fc0:	639a      	str	r2, [r3, #56]	; 0x38
	items_menu_3[1].updateScreen_up = p_print_rows_on_oled_if_up;
 8001fc2:	4a27      	ldr	r2, [pc, #156]	; (8002060 <Menu_Init+0x588>)
 8001fc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fc6:	63d3      	str	r3, [r2, #60]	; 0x3c
	items_menu_3[1].updateScreen_down = p_print_rows_on_oled_if_down;
 8001fc8:	4a25      	ldr	r2, [pc, #148]	; (8002060 <Menu_Init+0x588>)
 8001fca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fcc:	6413      	str	r3, [r2, #64]	; 0x40
	items_menu_3[1].makeAction = p_return_from_menu;
 8001fce:	4a24      	ldr	r2, [pc, #144]	; (8002060 <Menu_Init+0x588>)
 8001fd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fd2:	6453      	str	r3, [r2, #68]	; 0x44

	///////////////////////////////////////////////////////////////////
	// Creating next menu
	items_menu_4[0].up = 0;
 8001fd4:	4b25      	ldr	r3, [pc, #148]	; (800206c <Menu_Init+0x594>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	601a      	str	r2, [r3, #0]
	items_menu_4[0].down = &items_menu_4[1];
 8001fda:	4b24      	ldr	r3, [pc, #144]	; (800206c <Menu_Init+0x594>)
 8001fdc:	4a24      	ldr	r2, [pc, #144]	; (8002070 <Menu_Init+0x598>)
 8001fde:	605a      	str	r2, [r3, #4]
	items_menu_4[0].child = 0;
 8001fe0:	4b22      	ldr	r3, [pc, #136]	; (800206c <Menu_Init+0x594>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	609a      	str	r2, [r3, #8]
	items_menu_4[0].parent = &items[3];
 8001fe6:	4b21      	ldr	r3, [pc, #132]	; (800206c <Menu_Init+0x594>)
 8001fe8:	4a22      	ldr	r2, [pc, #136]	; (8002074 <Menu_Init+0x59c>)
 8001fea:	60da      	str	r2, [r3, #12]
	items_menu_4[0].id = 1;
 8001fec:	4b1f      	ldr	r3, [pc, #124]	; (800206c <Menu_Init+0x594>)
 8001fee:	2201      	movs	r2, #1
 8001ff0:	741a      	strb	r2, [r3, #16]
	items_menu_4[0].name = "set par 1";						// Name of item
 8001ff2:	4b1e      	ldr	r3, [pc, #120]	; (800206c <Menu_Init+0x594>)
 8001ff4:	4a18      	ldr	r2, [pc, #96]	; (8002058 <Menu_Init+0x580>)
 8001ff6:	615a      	str	r2, [r3, #20]
	items_menu_4[0].updateScreen_up = p_print_rows_on_oled_if_up;
 8001ff8:	4a1c      	ldr	r2, [pc, #112]	; (800206c <Menu_Init+0x594>)
 8001ffa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ffc:	6193      	str	r3, [r2, #24]
	items_menu_4[0].updateScreen_down = p_print_rows_on_oled_if_down;
 8001ffe:	4a1b      	ldr	r2, [pc, #108]	; (800206c <Menu_Init+0x594>)
 8002000:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002002:	61d3      	str	r3, [r2, #28]
	items_menu_4[0].makeAction = p_items_menu_4_set_par_1;
 8002004:	4a19      	ldr	r2, [pc, #100]	; (800206c <Menu_Init+0x594>)
 8002006:	6a3b      	ldr	r3, [r7, #32]
 8002008:	6213      	str	r3, [r2, #32]

	items_menu_4[1].up = &items_menu_4[0];
 800200a:	4b18      	ldr	r3, [pc, #96]	; (800206c <Menu_Init+0x594>)
 800200c:	4a17      	ldr	r2, [pc, #92]	; (800206c <Menu_Init+0x594>)
 800200e:	625a      	str	r2, [r3, #36]	; 0x24
	items_menu_4[1].down = &items_menu_4[2];
 8002010:	4b16      	ldr	r3, [pc, #88]	; (800206c <Menu_Init+0x594>)
 8002012:	4a19      	ldr	r2, [pc, #100]	; (8002078 <Menu_Init+0x5a0>)
 8002014:	629a      	str	r2, [r3, #40]	; 0x28
	items_menu_4[1].child = 0;
 8002016:	4b15      	ldr	r3, [pc, #84]	; (800206c <Menu_Init+0x594>)
 8002018:	2200      	movs	r2, #0
 800201a:	62da      	str	r2, [r3, #44]	; 0x2c
	items_menu_4[1].parent = &items[3];
 800201c:	4b13      	ldr	r3, [pc, #76]	; (800206c <Menu_Init+0x594>)
 800201e:	4a15      	ldr	r2, [pc, #84]	; (8002074 <Menu_Init+0x59c>)
 8002020:	631a      	str	r2, [r3, #48]	; 0x30
 8002022:	e02b      	b.n	800207c <Menu_Init+0x5a4>
 8002024:	200006d0 	.word	0x200006d0
 8002028:	08004ca8 	.word	0x08004ca8
 800202c:	200006f4 	.word	0x200006f4
 8002030:	2000073c 	.word	0x2000073c
 8002034:	200007cc 	.word	0x200007cc
 8002038:	08004cb4 	.word	0x08004cb4
 800203c:	20000718 	.word	0x20000718
 8002040:	20000760 	.word	0x20000760
 8002044:	08004cc0 	.word	0x08004cc0
 8002048:	08004cc8 	.word	0x08004cc8
 800204c:	200004fc 	.word	0x200004fc
 8002050:	20000520 	.word	0x20000520
 8002054:	200007f0 	.word	0x200007f0
 8002058:	08004c9c 	.word	0x08004c9c
 800205c:	20000544 	.word	0x20000544
 8002060:	20000784 	.word	0x20000784
 8002064:	200007a8 	.word	0x200007a8
 8002068:	20000814 	.word	0x20000814
 800206c:	20000568 	.word	0x20000568
 8002070:	2000058c 	.word	0x2000058c
 8002074:	20000838 	.word	0x20000838
 8002078:	200005b0 	.word	0x200005b0
	items_menu_4[1].id = 2;
 800207c:	4b94      	ldr	r3, [pc, #592]	; (80022d0 <Menu_Init+0x7f8>)
 800207e:	2202      	movs	r2, #2
 8002080:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	items_menu_4[1].name = "set par 2";						// Name of item
 8002084:	4b92      	ldr	r3, [pc, #584]	; (80022d0 <Menu_Init+0x7f8>)
 8002086:	4a93      	ldr	r2, [pc, #588]	; (80022d4 <Menu_Init+0x7fc>)
 8002088:	639a      	str	r2, [r3, #56]	; 0x38
	items_menu_4[1].updateScreen_up = p_print_rows_on_oled_if_up;
 800208a:	4a91      	ldr	r2, [pc, #580]	; (80022d0 <Menu_Init+0x7f8>)
 800208c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800208e:	63d3      	str	r3, [r2, #60]	; 0x3c
	items_menu_4[1].updateScreen_down = p_print_rows_on_oled_if_down;
 8002090:	4a8f      	ldr	r2, [pc, #572]	; (80022d0 <Menu_Init+0x7f8>)
 8002092:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002094:	6413      	str	r3, [r2, #64]	; 0x40
	items_menu_4[1].makeAction = p_items_menu_4_set_par_2;
 8002096:	4a8e      	ldr	r2, [pc, #568]	; (80022d0 <Menu_Init+0x7f8>)
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	6453      	str	r3, [r2, #68]	; 0x44

	items_menu_4[2].up = &items_menu_4[1];
 800209c:	4b8c      	ldr	r3, [pc, #560]	; (80022d0 <Menu_Init+0x7f8>)
 800209e:	4a8e      	ldr	r2, [pc, #568]	; (80022d8 <Menu_Init+0x800>)
 80020a0:	649a      	str	r2, [r3, #72]	; 0x48
	items_menu_4[2].down = &items_menu_4[3];
 80020a2:	4b8b      	ldr	r3, [pc, #556]	; (80022d0 <Menu_Init+0x7f8>)
 80020a4:	4a8d      	ldr	r2, [pc, #564]	; (80022dc <Menu_Init+0x804>)
 80020a6:	64da      	str	r2, [r3, #76]	; 0x4c
	items_menu_4[2].child = 0;
 80020a8:	4b89      	ldr	r3, [pc, #548]	; (80022d0 <Menu_Init+0x7f8>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	651a      	str	r2, [r3, #80]	; 0x50
	items_menu_4[2].parent = &items[3];
 80020ae:	4b88      	ldr	r3, [pc, #544]	; (80022d0 <Menu_Init+0x7f8>)
 80020b0:	4a8b      	ldr	r2, [pc, #556]	; (80022e0 <Menu_Init+0x808>)
 80020b2:	655a      	str	r2, [r3, #84]	; 0x54
	items_menu_4[2].id = 3;
 80020b4:	4b86      	ldr	r3, [pc, #536]	; (80022d0 <Menu_Init+0x7f8>)
 80020b6:	2203      	movs	r2, #3
 80020b8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	items_menu_4[2].name = "set par 3";						// Name of item
 80020bc:	4b84      	ldr	r3, [pc, #528]	; (80022d0 <Menu_Init+0x7f8>)
 80020be:	4a89      	ldr	r2, [pc, #548]	; (80022e4 <Menu_Init+0x80c>)
 80020c0:	65da      	str	r2, [r3, #92]	; 0x5c
	items_menu_4[2].updateScreen_up = p_print_rows_on_oled_if_up;
 80020c2:	4a83      	ldr	r2, [pc, #524]	; (80022d0 <Menu_Init+0x7f8>)
 80020c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020c6:	6613      	str	r3, [r2, #96]	; 0x60
	items_menu_4[2].updateScreen_down = p_print_rows_on_oled_if_down;
 80020c8:	4a81      	ldr	r2, [pc, #516]	; (80022d0 <Menu_Init+0x7f8>)
 80020ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020cc:	6653      	str	r3, [r2, #100]	; 0x64
	items_menu_4[2].makeAction = p_items_menu_4_set_par_3;
 80020ce:	4a80      	ldr	r2, [pc, #512]	; (80022d0 <Menu_Init+0x7f8>)
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	6693      	str	r3, [r2, #104]	; 0x68

	items_menu_4[3].up = &items_menu_4[2];
 80020d4:	4b7e      	ldr	r3, [pc, #504]	; (80022d0 <Menu_Init+0x7f8>)
 80020d6:	4a84      	ldr	r2, [pc, #528]	; (80022e8 <Menu_Init+0x810>)
 80020d8:	66da      	str	r2, [r3, #108]	; 0x6c
	items_menu_4[3].down = &items_menu_4[4];
 80020da:	4b7d      	ldr	r3, [pc, #500]	; (80022d0 <Menu_Init+0x7f8>)
 80020dc:	4a83      	ldr	r2, [pc, #524]	; (80022ec <Menu_Init+0x814>)
 80020de:	671a      	str	r2, [r3, #112]	; 0x70
	items_menu_4[3].child = 0;
 80020e0:	4b7b      	ldr	r3, [pc, #492]	; (80022d0 <Menu_Init+0x7f8>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	675a      	str	r2, [r3, #116]	; 0x74
	items_menu_4[3].parent = &items[3];
 80020e6:	4b7a      	ldr	r3, [pc, #488]	; (80022d0 <Menu_Init+0x7f8>)
 80020e8:	4a7d      	ldr	r2, [pc, #500]	; (80022e0 <Menu_Init+0x808>)
 80020ea:	679a      	str	r2, [r3, #120]	; 0x78
	items_menu_4[3].id = 4;
 80020ec:	4b78      	ldr	r3, [pc, #480]	; (80022d0 <Menu_Init+0x7f8>)
 80020ee:	2204      	movs	r2, #4
 80020f0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	items_menu_4[3].name = "set par 4";						// Name of item
 80020f4:	4b76      	ldr	r3, [pc, #472]	; (80022d0 <Menu_Init+0x7f8>)
 80020f6:	4a7e      	ldr	r2, [pc, #504]	; (80022f0 <Menu_Init+0x818>)
 80020f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	items_menu_4[3].updateScreen_up = p_print_rows_on_oled_if_up;
 80020fc:	4a74      	ldr	r2, [pc, #464]	; (80022d0 <Menu_Init+0x7f8>)
 80020fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002100:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	items_menu_4[3].updateScreen_down = p_print_rows_on_oled_if_down;
 8002104:	4a72      	ldr	r2, [pc, #456]	; (80022d0 <Menu_Init+0x7f8>)
 8002106:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002108:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	items_menu_4[3].makeAction = p_items_menu_4_set_par_4;
 800210c:	4a70      	ldr	r2, [pc, #448]	; (80022d0 <Menu_Init+0x7f8>)
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

	items_menu_4[4].up = &items_menu_4[3];
 8002114:	4b6e      	ldr	r3, [pc, #440]	; (80022d0 <Menu_Init+0x7f8>)
 8002116:	4a71      	ldr	r2, [pc, #452]	; (80022dc <Menu_Init+0x804>)
 8002118:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	items_menu_4[4].down = &items_menu_4[5];
 800211c:	4b6c      	ldr	r3, [pc, #432]	; (80022d0 <Menu_Init+0x7f8>)
 800211e:	4a75      	ldr	r2, [pc, #468]	; (80022f4 <Menu_Init+0x81c>)
 8002120:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	items_menu_4[4].child = 0;
 8002124:	4b6a      	ldr	r3, [pc, #424]	; (80022d0 <Menu_Init+0x7f8>)
 8002126:	2200      	movs	r2, #0
 8002128:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	items_menu_4[4].parent = &items[3];
 800212c:	4b68      	ldr	r3, [pc, #416]	; (80022d0 <Menu_Init+0x7f8>)
 800212e:	4a6c      	ldr	r2, [pc, #432]	; (80022e0 <Menu_Init+0x808>)
 8002130:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	items_menu_4[4].id = 5;
 8002134:	4b66      	ldr	r3, [pc, #408]	; (80022d0 <Menu_Init+0x7f8>)
 8002136:	2205      	movs	r2, #5
 8002138:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	items_menu_4[4].name = "set par 5";						// Name of item
 800213c:	4b64      	ldr	r3, [pc, #400]	; (80022d0 <Menu_Init+0x7f8>)
 800213e:	4a6e      	ldr	r2, [pc, #440]	; (80022f8 <Menu_Init+0x820>)
 8002140:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	items_menu_4[4].updateScreen_up = p_print_rows_on_oled_if_up;
 8002144:	4a62      	ldr	r2, [pc, #392]	; (80022d0 <Menu_Init+0x7f8>)
 8002146:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002148:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
	items_menu_4[4].updateScreen_down = p_print_rows_on_oled_if_down;
 800214c:	4a60      	ldr	r2, [pc, #384]	; (80022d0 <Menu_Init+0x7f8>)
 800214e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002150:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
	items_menu_4[4].makeAction = p_items_menu_4_set_par_5;
 8002154:	4a5e      	ldr	r2, [pc, #376]	; (80022d0 <Menu_Init+0x7f8>)
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

	items_menu_4[5].up = &items_menu_4[4];
 800215c:	4b5c      	ldr	r3, [pc, #368]	; (80022d0 <Menu_Init+0x7f8>)
 800215e:	4a63      	ldr	r2, [pc, #396]	; (80022ec <Menu_Init+0x814>)
 8002160:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	items_menu_4[5].down = &items_menu_4[6];
 8002164:	4b5a      	ldr	r3, [pc, #360]	; (80022d0 <Menu_Init+0x7f8>)
 8002166:	4a65      	ldr	r2, [pc, #404]	; (80022fc <Menu_Init+0x824>)
 8002168:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	items_menu_4[5].child = 0;
 800216c:	4b58      	ldr	r3, [pc, #352]	; (80022d0 <Menu_Init+0x7f8>)
 800216e:	2200      	movs	r2, #0
 8002170:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	items_menu_4[5].parent = &items[3];
 8002174:	4b56      	ldr	r3, [pc, #344]	; (80022d0 <Menu_Init+0x7f8>)
 8002176:	4a5a      	ldr	r2, [pc, #360]	; (80022e0 <Menu_Init+0x808>)
 8002178:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	items_menu_4[5].id = 6;
 800217c:	4b54      	ldr	r3, [pc, #336]	; (80022d0 <Menu_Init+0x7f8>)
 800217e:	2206      	movs	r2, #6
 8002180:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
	items_menu_4[5].name = "set par 6";						// Name of item
 8002184:	4b52      	ldr	r3, [pc, #328]	; (80022d0 <Menu_Init+0x7f8>)
 8002186:	4a5e      	ldr	r2, [pc, #376]	; (8002300 <Menu_Init+0x828>)
 8002188:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	items_menu_4[5].updateScreen_up = p_print_rows_on_oled_if_up;
 800218c:	4a50      	ldr	r2, [pc, #320]	; (80022d0 <Menu_Init+0x7f8>)
 800218e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002190:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
	items_menu_4[5].updateScreen_down = p_print_rows_on_oled_if_down;
 8002194:	4a4e      	ldr	r2, [pc, #312]	; (80022d0 <Menu_Init+0x7f8>)
 8002196:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002198:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
	items_menu_4[5].makeAction = p_items_menu_4_set_par_6;
 800219c:	4a4c      	ldr	r2, [pc, #304]	; (80022d0 <Menu_Init+0x7f8>)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4

	items_menu_4[6].up = &items_menu_4[5];
 80021a4:	4b4a      	ldr	r3, [pc, #296]	; (80022d0 <Menu_Init+0x7f8>)
 80021a6:	4a53      	ldr	r2, [pc, #332]	; (80022f4 <Menu_Init+0x81c>)
 80021a8:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	items_menu_4[6].down = &items_menu_4[7];
 80021ac:	4b48      	ldr	r3, [pc, #288]	; (80022d0 <Menu_Init+0x7f8>)
 80021ae:	4a55      	ldr	r2, [pc, #340]	; (8002304 <Menu_Init+0x82c>)
 80021b0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	items_menu_4[6].child = 0;
 80021b4:	4b46      	ldr	r3, [pc, #280]	; (80022d0 <Menu_Init+0x7f8>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	items_menu_4[6].parent = &items[3];
 80021bc:	4b44      	ldr	r3, [pc, #272]	; (80022d0 <Menu_Init+0x7f8>)
 80021be:	4a48      	ldr	r2, [pc, #288]	; (80022e0 <Menu_Init+0x808>)
 80021c0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	items_menu_4[6].id = 7;
 80021c4:	4b42      	ldr	r3, [pc, #264]	; (80022d0 <Menu_Init+0x7f8>)
 80021c6:	2207      	movs	r2, #7
 80021c8:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
	items_menu_4[6].name = "set par 7";						// Name of item
 80021cc:	4b40      	ldr	r3, [pc, #256]	; (80022d0 <Menu_Init+0x7f8>)
 80021ce:	4a4e      	ldr	r2, [pc, #312]	; (8002308 <Menu_Init+0x830>)
 80021d0:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
	items_menu_4[6].updateScreen_up = p_print_rows_on_oled_if_up;
 80021d4:	4a3e      	ldr	r2, [pc, #248]	; (80022d0 <Menu_Init+0x7f8>)
 80021d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021d8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
	items_menu_4[6].updateScreen_down = p_print_rows_on_oled_if_down;
 80021dc:	4a3c      	ldr	r2, [pc, #240]	; (80022d0 <Menu_Init+0x7f8>)
 80021de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021e0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
	items_menu_4[6].makeAction = p_items_menu_4_set_par_7;
 80021e4:	4a3a      	ldr	r2, [pc, #232]	; (80022d0 <Menu_Init+0x7f8>)
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

	items_menu_4[7].up = &items_menu_4[6];
 80021ec:	4b38      	ldr	r3, [pc, #224]	; (80022d0 <Menu_Init+0x7f8>)
 80021ee:	4a43      	ldr	r2, [pc, #268]	; (80022fc <Menu_Init+0x824>)
 80021f0:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	items_menu_4[7].down = &items_menu_4[8];
 80021f4:	4b36      	ldr	r3, [pc, #216]	; (80022d0 <Menu_Init+0x7f8>)
 80021f6:	4a45      	ldr	r2, [pc, #276]	; (800230c <Menu_Init+0x834>)
 80021f8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	items_menu_4[7].child = 0;
 80021fc:	4b34      	ldr	r3, [pc, #208]	; (80022d0 <Menu_Init+0x7f8>)
 80021fe:	2200      	movs	r2, #0
 8002200:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	items_menu_4[7].parent = &items[3];
 8002204:	4b32      	ldr	r3, [pc, #200]	; (80022d0 <Menu_Init+0x7f8>)
 8002206:	4a36      	ldr	r2, [pc, #216]	; (80022e0 <Menu_Init+0x808>)
 8002208:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	items_menu_4[7].id = 8;
 800220c:	4b30      	ldr	r3, [pc, #192]	; (80022d0 <Menu_Init+0x7f8>)
 800220e:	2208      	movs	r2, #8
 8002210:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
	items_menu_4[7].name = "set par 8";						// Name of item
 8002214:	4b2e      	ldr	r3, [pc, #184]	; (80022d0 <Menu_Init+0x7f8>)
 8002216:	4a3e      	ldr	r2, [pc, #248]	; (8002310 <Menu_Init+0x838>)
 8002218:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	items_menu_4[7].updateScreen_up = p_print_rows_on_oled_if_up;
 800221c:	4a2c      	ldr	r2, [pc, #176]	; (80022d0 <Menu_Init+0x7f8>)
 800221e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002220:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	items_menu_4[7].updateScreen_down = p_print_rows_on_oled_if_down;
 8002224:	4a2a      	ldr	r2, [pc, #168]	; (80022d0 <Menu_Init+0x7f8>)
 8002226:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002228:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
	items_menu_4[7].makeAction = p_items_menu_4_set_par_8;
 800222c:	4a28      	ldr	r2, [pc, #160]	; (80022d0 <Menu_Init+0x7f8>)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c

	items_menu_4[8].up = &items_menu_4[7];
 8002234:	4b26      	ldr	r3, [pc, #152]	; (80022d0 <Menu_Init+0x7f8>)
 8002236:	4a33      	ldr	r2, [pc, #204]	; (8002304 <Menu_Init+0x82c>)
 8002238:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	items_menu_4[8].down = &items_menu_4[9];
 800223c:	4b24      	ldr	r3, [pc, #144]	; (80022d0 <Menu_Init+0x7f8>)
 800223e:	4a35      	ldr	r2, [pc, #212]	; (8002314 <Menu_Init+0x83c>)
 8002240:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	items_menu_4[8].child = 0;
 8002244:	4b22      	ldr	r3, [pc, #136]	; (80022d0 <Menu_Init+0x7f8>)
 8002246:	2200      	movs	r2, #0
 8002248:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	items_menu_4[8].parent = &items[3];
 800224c:	4b20      	ldr	r3, [pc, #128]	; (80022d0 <Menu_Init+0x7f8>)
 800224e:	4a24      	ldr	r2, [pc, #144]	; (80022e0 <Menu_Init+0x808>)
 8002250:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	items_menu_4[8].id = 9;
 8002254:	4b1e      	ldr	r3, [pc, #120]	; (80022d0 <Menu_Init+0x7f8>)
 8002256:	2209      	movs	r2, #9
 8002258:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	items_menu_4[8].name = "DO IT";						// Name of item
 800225c:	4b1c      	ldr	r3, [pc, #112]	; (80022d0 <Menu_Init+0x7f8>)
 800225e:	4a2e      	ldr	r2, [pc, #184]	; (8002318 <Menu_Init+0x840>)
 8002260:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
	items_menu_4[8].updateScreen_up = p_print_rows_on_oled_if_up;
 8002264:	4a1a      	ldr	r2, [pc, #104]	; (80022d0 <Menu_Init+0x7f8>)
 8002266:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002268:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
	items_menu_4[8].updateScreen_down = p_print_rows_on_oled_if_down;
 800226c:	4a18      	ldr	r2, [pc, #96]	; (80022d0 <Menu_Init+0x7f8>)
 800226e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002270:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
	items_menu_4[8].makeAction = p_do_it_function_menu_4;
 8002274:	4a16      	ldr	r2, [pc, #88]	; (80022d0 <Menu_Init+0x7f8>)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

	items_menu_4[9].up = &items_menu_4[8];
 800227c:	4b14      	ldr	r3, [pc, #80]	; (80022d0 <Menu_Init+0x7f8>)
 800227e:	4a23      	ldr	r2, [pc, #140]	; (800230c <Menu_Init+0x834>)
 8002280:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	items_menu_4[9].down = 0;
 8002284:	4b12      	ldr	r3, [pc, #72]	; (80022d0 <Menu_Init+0x7f8>)
 8002286:	2200      	movs	r2, #0
 8002288:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	items_menu_4[9].child = 0;
 800228c:	4b10      	ldr	r3, [pc, #64]	; (80022d0 <Menu_Init+0x7f8>)
 800228e:	2200      	movs	r2, #0
 8002290:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
	items_menu_4[9].parent = &items[3];
 8002294:	4b0e      	ldr	r3, [pc, #56]	; (80022d0 <Menu_Init+0x7f8>)
 8002296:	4a12      	ldr	r2, [pc, #72]	; (80022e0 <Menu_Init+0x808>)
 8002298:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	items_menu_4[9].id = 10;
 800229c:	4b0c      	ldr	r3, [pc, #48]	; (80022d0 <Menu_Init+0x7f8>)
 800229e:	220a      	movs	r2, #10
 80022a0:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
	items_menu_4[9].name = "EXIT";						// Name of item
 80022a4:	4b0a      	ldr	r3, [pc, #40]	; (80022d0 <Menu_Init+0x7f8>)
 80022a6:	4a1d      	ldr	r2, [pc, #116]	; (800231c <Menu_Init+0x844>)
 80022a8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	items_menu_4[9].updateScreen_up = p_print_rows_on_oled_if_up;
 80022ac:	4a08      	ldr	r2, [pc, #32]	; (80022d0 <Menu_Init+0x7f8>)
 80022ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022b0:	f8c2 315c 	str.w	r3, [r2, #348]	; 0x15c
	items_menu_4[9].updateScreen_down = p_print_rows_on_oled_if_down;
 80022b4:	4a06      	ldr	r2, [pc, #24]	; (80022d0 <Menu_Init+0x7f8>)
 80022b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022b8:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
	items_menu_4[9].makeAction = p_return_from_menu;
 80022bc:	4a04      	ldr	r2, [pc, #16]	; (80022d0 <Menu_Init+0x7f8>)
 80022be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022c0:	f8c2 3164 	str.w	r3, [r2, #356]	; 0x164
}
 80022c4:	bf00      	nop
 80022c6:	3754      	adds	r7, #84	; 0x54
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bc80      	pop	{r7}
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	20000568 	.word	0x20000568
 80022d4:	08004ca8 	.word	0x08004ca8
 80022d8:	2000058c 	.word	0x2000058c
 80022dc:	200005d4 	.word	0x200005d4
 80022e0:	20000838 	.word	0x20000838
 80022e4:	08004cb4 	.word	0x08004cb4
 80022e8:	200005b0 	.word	0x200005b0
 80022ec:	200005f8 	.word	0x200005f8
 80022f0:	08004cd0 	.word	0x08004cd0
 80022f4:	2000061c 	.word	0x2000061c
 80022f8:	08004cdc 	.word	0x08004cdc
 80022fc:	20000640 	.word	0x20000640
 8002300:	08004ce8 	.word	0x08004ce8
 8002304:	20000664 	.word	0x20000664
 8002308:	08004cf4 	.word	0x08004cf4
 800230c:	20000688 	.word	0x20000688
 8002310:	08004d00 	.word	0x08004d00
 8002314:	200006ac 	.word	0x200006ac
 8002318:	08004cc0 	.word	0x08004cc0
 800231c:	08004cc8 	.word	0x08004cc8

08002320 <up>:
// ----------------------------------------------------------------------------------------
void up(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
	if (currentItem->up)
 8002324:	4b0a      	ldr	r3, [pc, #40]	; (8002350 <up+0x30>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d00d      	beq.n	800234a <up+0x2a>
	{
	    currentItem = currentItem->up;
 800232e:	4b08      	ldr	r3, [pc, #32]	; (8002350 <up+0x30>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a06      	ldr	r2, [pc, #24]	; (8002350 <up+0x30>)
 8002336:	6013      	str	r3, [r2, #0]
	    if (currentItem->updateScreen_up )
 8002338:	4b05      	ldr	r3, [pc, #20]	; (8002350 <up+0x30>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d003      	beq.n	800234a <up+0x2a>
	    {
	        currentItem->updateScreen_up();
 8002342:	4b03      	ldr	r3, [pc, #12]	; (8002350 <up+0x30>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	4798      	blx	r3
	    }
	}
}
 800234a:	bf00      	nop
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	2000000c 	.word	0x2000000c

08002354 <down>:
// ----------------------------------------------------------------------------------------
void down(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
	if (currentItem->down)
 8002358:	4b0a      	ldr	r3, [pc, #40]	; (8002384 <down+0x30>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00d      	beq.n	800237e <down+0x2a>
	{
	    currentItem = currentItem->down;
 8002362:	4b08      	ldr	r3, [pc, #32]	; (8002384 <down+0x30>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	4a06      	ldr	r2, [pc, #24]	; (8002384 <down+0x30>)
 800236a:	6013      	str	r3, [r2, #0]
	    if (currentItem->updateScreen_down )
 800236c:	4b05      	ldr	r3, [pc, #20]	; (8002384 <down+0x30>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	69db      	ldr	r3, [r3, #28]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d003      	beq.n	800237e <down+0x2a>
	    {
	        currentItem->updateScreen_down();
 8002376:	4b03      	ldr	r3, [pc, #12]	; (8002384 <down+0x30>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	69db      	ldr	r3, [r3, #28]
 800237c:	4798      	blx	r3
	    }
	}
}
 800237e:	bf00      	nop
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	2000000c 	.word	0x2000000c

08002388 <enter>:
// ----------------------------------------------------------------------------------------
void enter(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
	bool status = true;
 800238e:	2301      	movs	r3, #1
 8002390:	71fb      	strb	r3, [r7, #7]
	// Якщо є функція "makeAction" тоді виконати її
	if (currentItem->makeAction)
 8002392:	4b0f      	ldr	r3, [pc, #60]	; (80023d0 <enter+0x48>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6a1b      	ldr	r3, [r3, #32]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d005      	beq.n	80023a8 <enter+0x20>
	{
		currentItem->makeAction();
 800239c:	4b0c      	ldr	r3, [pc, #48]	; (80023d0 <enter+0x48>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6a1b      	ldr	r3, [r3, #32]
 80023a2:	4798      	blx	r3
		status = false;
 80023a4:	2300      	movs	r3, #0
 80023a6:	71fb      	strb	r3, [r7, #7]
	}
	// Якщо є перехід на  "child" і "makeAction" не була виконана, тоді виконати перехід
	if((currentItem->child) && (status == true))
 80023a8:	4b09      	ldr	r3, [pc, #36]	; (80023d0 <enter+0x48>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d009      	beq.n	80023c6 <enter+0x3e>
 80023b2:	79fb      	ldrb	r3, [r7, #7]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d006      	beq.n	80023c6 <enter+0x3e>
	{
		currentItem = currentItem->child;
 80023b8:	4b05      	ldr	r3, [pc, #20]	; (80023d0 <enter+0x48>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	4a04      	ldr	r2, [pc, #16]	; (80023d0 <enter+0x48>)
 80023c0:	6013      	str	r3, [r2, #0]
		action();
 80023c2:	f7fe fc75 	bl	8000cb0 <action>
	}
}
 80023c6:	bf00      	nop
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	2000000c 	.word	0x2000000c

080023d4 <menu>:
// ----------------------------------------------------------------------------------------
void menu(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
	Menu_Init();									// Init all structures
 80023d8:	f7ff fb7e 	bl	8001ad8 <Menu_Init>

	print_menu_init();								// Print start menu and scrolingbar
 80023dc:	f7fe fbd2 	bl	8000b84 <print_menu_init>

	HAL_Delay(10);
 80023e0:	200a      	movs	r0, #10
 80023e2:	f000 fb83 	bl	8002aec <HAL_Delay>

	while(1)
	{
		if(button_processed_status == 1)			// If buttons was pressed
 80023e6:	4b0f      	ldr	r3, [pc, #60]	; (8002424 <menu+0x50>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d1fb      	bne.n	80023e6 <menu+0x12>
		{

			button_processed_status = 1;
 80023ee:	4b0d      	ldr	r3, [pc, #52]	; (8002424 <menu+0x50>)
 80023f0:	2201      	movs	r2, #1
 80023f2:	601a      	str	r2, [r3, #0]
			switch (button_status)
 80023f4:	4b0c      	ldr	r3, [pc, #48]	; (8002428 <menu+0x54>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	2b03      	cmp	r3, #3
 80023fa:	d00c      	beq.n	8002416 <menu+0x42>
 80023fc:	2b03      	cmp	r3, #3
 80023fe:	dc0d      	bgt.n	800241c <menu+0x48>
 8002400:	2b01      	cmp	r3, #1
 8002402:	d002      	beq.n	800240a <menu+0x36>
 8002404:	2b02      	cmp	r3, #2
 8002406:	d003      	beq.n	8002410 <menu+0x3c>
 8002408:	e008      	b.n	800241c <menu+0x48>
			{
				case BOTTON_UP:
					up();
 800240a:	f7ff ff89 	bl	8002320 <up>
					break;
 800240e:	e005      	b.n	800241c <menu+0x48>
				case BUTTON_ENTER:
					enter();
 8002410:	f7ff ffba 	bl	8002388 <enter>
					break;
 8002414:	e002      	b.n	800241c <menu+0x48>
				case BUTTON_DOWN:
					down();
 8002416:	f7ff ff9d 	bl	8002354 <down>
					break;
 800241a:	bf00      	nop
			}
			button_status = BOTTON_DOESENT_PRESS;
 800241c:	4b02      	ldr	r3, [pc, #8]	; (8002428 <menu+0x54>)
 800241e:	2200      	movs	r2, #0
 8002420:	701a      	strb	r2, [r3, #0]
		if(button_processed_status == 1)			// If buttons was pressed
 8002422:	e7e0      	b.n	80023e6 <menu+0x12>
 8002424:	20000004 	.word	0x20000004
 8002428:	20000055 	.word	0x20000055

0800242c <clearn_oled>:
	  ssd1306_Fill(Black);
	  ssd1306_UpdateScreen();
}
//----------------------------------------------------------------------------------------
void clearn_oled(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
	 ssd1306_Fill(Black);
 8002430:	2000      	movs	r0, #0
 8002432:	f000 f889 	bl	8002548 <ssd1306_Fill>
	 ssd1306_UpdateScreen();
 8002436:	f000 f8a9 	bl	800258c <ssd1306_UpdateScreen>
}
 800243a:	bf00      	nop
 800243c:	bd80      	pop	{r7, pc}
	...

08002440 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af04      	add	r7, sp, #16
 8002446:	4603      	mov	r3, r0
 8002448:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 800244a:	230a      	movs	r3, #10
 800244c:	9302      	str	r3, [sp, #8]
 800244e:	2301      	movs	r3, #1
 8002450:	9301      	str	r3, [sp, #4]
 8002452:	1dfb      	adds	r3, r7, #7
 8002454:	9300      	str	r3, [sp, #0]
 8002456:	2301      	movs	r3, #1
 8002458:	2200      	movs	r2, #0
 800245a:	2178      	movs	r1, #120	; 0x78
 800245c:	4803      	ldr	r0, [pc, #12]	; (800246c <ssd1306_WriteCommand+0x2c>)
 800245e:	f000 ff91 	bl	8003384 <HAL_I2C_Mem_Write>
}
 8002462:	bf00      	nop
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	20000460 	.word	0x20000460

08002470 <ssd1306_Init>:

//
//	Initialize the oled screen
//
uint8_t ssd1306_Init(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
	// Wait for the screen to boot
	HAL_Delay(100);
 8002474:	2064      	movs	r0, #100	; 0x64
 8002476:	f000 fb39 	bl	8002aec <HAL_Delay>

	/* Init LCD */
	ssd1306_WriteCommand(0xAE); //display off
 800247a:	20ae      	movs	r0, #174	; 0xae
 800247c:	f7ff ffe0 	bl	8002440 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002480:	2020      	movs	r0, #32
 8002482:	f7ff ffdd 	bl	8002440 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8002486:	2010      	movs	r0, #16
 8002488:	f7ff ffda 	bl	8002440 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800248c:	20b0      	movs	r0, #176	; 0xb0
 800248e:	f7ff ffd7 	bl	8002440 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002492:	20c8      	movs	r0, #200	; 0xc8
 8002494:	f7ff ffd4 	bl	8002440 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 8002498:	2000      	movs	r0, #0
 800249a:	f7ff ffd1 	bl	8002440 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 800249e:	2010      	movs	r0, #16
 80024a0:	f7ff ffce 	bl	8002440 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 80024a4:	2040      	movs	r0, #64	; 0x40
 80024a6:	f7ff ffcb 	bl	8002440 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 80024aa:	2081      	movs	r0, #129	; 0x81
 80024ac:	f7ff ffc8 	bl	8002440 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 80024b0:	20ff      	movs	r0, #255	; 0xff
 80024b2:	f7ff ffc5 	bl	8002440 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 80024b6:	20a1      	movs	r0, #161	; 0xa1
 80024b8:	f7ff ffc2 	bl	8002440 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 80024bc:	20a6      	movs	r0, #166	; 0xa6
 80024be:	f7ff ffbf 	bl	8002440 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 80024c2:	20a8      	movs	r0, #168	; 0xa8
 80024c4:	f7ff ffbc 	bl	8002440 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 80024c8:	203f      	movs	r0, #63	; 0x3f
 80024ca:	f7ff ffb9 	bl	8002440 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80024ce:	20a4      	movs	r0, #164	; 0xa4
 80024d0:	f7ff ffb6 	bl	8002440 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 80024d4:	20d3      	movs	r0, #211	; 0xd3
 80024d6:	f7ff ffb3 	bl	8002440 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 80024da:	2000      	movs	r0, #0
 80024dc:	f7ff ffb0 	bl	8002440 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80024e0:	20d5      	movs	r0, #213	; 0xd5
 80024e2:	f7ff ffad 	bl	8002440 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 80024e6:	20f0      	movs	r0, #240	; 0xf0
 80024e8:	f7ff ffaa 	bl	8002440 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80024ec:	20d9      	movs	r0, #217	; 0xd9
 80024ee:	f7ff ffa7 	bl	8002440 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 80024f2:	2022      	movs	r0, #34	; 0x22
 80024f4:	f7ff ffa4 	bl	8002440 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 80024f8:	20da      	movs	r0, #218	; 0xda
 80024fa:	f7ff ffa1 	bl	8002440 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 80024fe:	2012      	movs	r0, #18
 8002500:	f7ff ff9e 	bl	8002440 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 8002504:	20db      	movs	r0, #219	; 0xdb
 8002506:	f7ff ff9b 	bl	8002440 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800250a:	2020      	movs	r0, #32
 800250c:	f7ff ff98 	bl	8002440 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002510:	208d      	movs	r0, #141	; 0x8d
 8002512:	f7ff ff95 	bl	8002440 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 8002516:	2014      	movs	r0, #20
 8002518:	f7ff ff92 	bl	8002440 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 800251c:	20af      	movs	r0, #175	; 0xaf
 800251e:	f7ff ff8f 	bl	8002440 <ssd1306_WriteCommand>

	// Clear screen
	ssd1306_Fill(Black);
 8002522:	2000      	movs	r0, #0
 8002524:	f000 f810 	bl	8002548 <ssd1306_Fill>

	// Flush buffer to screen
	ssd1306_UpdateScreen();
 8002528:	f000 f830 	bl	800258c <ssd1306_UpdateScreen>

	// Set default values for screen object
	SSD1306.CurrentX = 0;
 800252c:	4b05      	ldr	r3, [pc, #20]	; (8002544 <ssd1306_Init+0xd4>)
 800252e:	2200      	movs	r2, #0
 8002530:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002532:	4b04      	ldr	r3, [pc, #16]	; (8002544 <ssd1306_Init+0xd4>)
 8002534:	2200      	movs	r2, #0
 8002536:	805a      	strh	r2, [r3, #2]

	SSD1306.Initialized = 1;
 8002538:	4b02      	ldr	r3, [pc, #8]	; (8002544 <ssd1306_Init+0xd4>)
 800253a:	2201      	movs	r2, #1
 800253c:	715a      	strb	r2, [r3, #5]

	return 1;
 800253e:	2301      	movs	r3, #1
}
 8002540:	4618      	mov	r0, r3
 8002542:	bd80      	pop	{r7, pc}
 8002544:	20000458 	.word	0x20000458

08002548 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8002548:	b480      	push	{r7}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 800254e:	4603      	mov	r3, r0
 8002550:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8002552:	2300      	movs	r3, #0
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	e00d      	b.n	8002574 <ssd1306_Fill+0x2c>
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8002558:	79fb      	ldrb	r3, [r7, #7]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d101      	bne.n	8002562 <ssd1306_Fill+0x1a>
 800255e:	2100      	movs	r1, #0
 8002560:	e000      	b.n	8002564 <ssd1306_Fill+0x1c>
 8002562:	21ff      	movs	r1, #255	; 0xff
 8002564:	4a08      	ldr	r2, [pc, #32]	; (8002588 <ssd1306_Fill+0x40>)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	4413      	add	r3, r2
 800256a:	460a      	mov	r2, r1
 800256c:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	3301      	adds	r3, #1
 8002572:	60fb      	str	r3, [r7, #12]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800257a:	d3ed      	bcc.n	8002558 <ssd1306_Fill+0x10>
	}
}
 800257c:	bf00      	nop
 800257e:	bf00      	nop
 8002580:	3714      	adds	r7, #20
 8002582:	46bd      	mov	sp, r7
 8002584:	bc80      	pop	{r7}
 8002586:	4770      	bx	lr
 8002588:	20000058 	.word	0x20000058

0800258c <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af04      	add	r7, sp, #16
	uint8_t i;

	for (i = 0; i < 8; i++) {
 8002592:	2300      	movs	r3, #0
 8002594:	71fb      	strb	r3, [r7, #7]
 8002596:	e01d      	b.n	80025d4 <ssd1306_UpdateScreen+0x48>
		ssd1306_WriteCommand(0xB0 + i);
 8002598:	79fb      	ldrb	r3, [r7, #7]
 800259a:	3b50      	subs	r3, #80	; 0x50
 800259c:	b2db      	uxtb	r3, r3
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff ff4e 	bl	8002440 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 80025a4:	2000      	movs	r0, #0
 80025a6:	f7ff ff4b 	bl	8002440 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 80025aa:	2010      	movs	r0, #16
 80025ac:	f7ff ff48 	bl	8002440 <ssd1306_WriteCommand>

		HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 80025b0:	79fb      	ldrb	r3, [r7, #7]
 80025b2:	01db      	lsls	r3, r3, #7
 80025b4:	4a0b      	ldr	r2, [pc, #44]	; (80025e4 <ssd1306_UpdateScreen+0x58>)
 80025b6:	4413      	add	r3, r2
 80025b8:	2264      	movs	r2, #100	; 0x64
 80025ba:	9202      	str	r2, [sp, #8]
 80025bc:	2280      	movs	r2, #128	; 0x80
 80025be:	9201      	str	r2, [sp, #4]
 80025c0:	9300      	str	r3, [sp, #0]
 80025c2:	2301      	movs	r3, #1
 80025c4:	2240      	movs	r2, #64	; 0x40
 80025c6:	2178      	movs	r1, #120	; 0x78
 80025c8:	4807      	ldr	r0, [pc, #28]	; (80025e8 <ssd1306_UpdateScreen+0x5c>)
 80025ca:	f000 fedb 	bl	8003384 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 80025ce:	79fb      	ldrb	r3, [r7, #7]
 80025d0:	3301      	adds	r3, #1
 80025d2:	71fb      	strb	r3, [r7, #7]
 80025d4:	79fb      	ldrb	r3, [r7, #7]
 80025d6:	2b07      	cmp	r3, #7
 80025d8:	d9de      	bls.n	8002598 <ssd1306_UpdateScreen+0xc>
	}
}
 80025da:	bf00      	nop
 80025dc:	bf00      	nop
 80025de:	3708      	adds	r7, #8
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	20000058 	.word	0x20000058
 80025e8:	20000460 	.word	0x20000460

080025ec <ssd1306_DrawPixel>:
//	X => X Coordinate
//	Y => Y Coordinate
//	color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	4603      	mov	r3, r0
 80025f4:	71fb      	strb	r3, [r7, #7]
 80025f6:	460b      	mov	r3, r1
 80025f8:	71bb      	strb	r3, [r7, #6]
 80025fa:	4613      	mov	r3, r2
 80025fc:	717b      	strb	r3, [r7, #5]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 80025fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002602:	2b00      	cmp	r3, #0
 8002604:	db48      	blt.n	8002698 <ssd1306_DrawPixel+0xac>
 8002606:	79bb      	ldrb	r3, [r7, #6]
 8002608:	2b3f      	cmp	r3, #63	; 0x3f
 800260a:	d845      	bhi.n	8002698 <ssd1306_DrawPixel+0xac>
		// Don't write outside the buffer
		return;
	}

	// Check if pixel should be inverted
	if (SSD1306.Inverted)
 800260c:	4b25      	ldr	r3, [pc, #148]	; (80026a4 <ssd1306_DrawPixel+0xb8>)
 800260e:	791b      	ldrb	r3, [r3, #4]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d006      	beq.n	8002622 <ssd1306_DrawPixel+0x36>
	{
		color = (SSD1306_COLOR)!color;
 8002614:	797b      	ldrb	r3, [r7, #5]
 8002616:	2b00      	cmp	r3, #0
 8002618:	bf0c      	ite	eq
 800261a:	2301      	moveq	r3, #1
 800261c:	2300      	movne	r3, #0
 800261e:	b2db      	uxtb	r3, r3
 8002620:	717b      	strb	r3, [r7, #5]
	}

	// Draw in the right color
	if (color == White)
 8002622:	797b      	ldrb	r3, [r7, #5]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d11a      	bne.n	800265e <ssd1306_DrawPixel+0x72>
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002628:	79fa      	ldrb	r2, [r7, #7]
 800262a:	79bb      	ldrb	r3, [r7, #6]
 800262c:	08db      	lsrs	r3, r3, #3
 800262e:	b2d8      	uxtb	r0, r3
 8002630:	4603      	mov	r3, r0
 8002632:	01db      	lsls	r3, r3, #7
 8002634:	4413      	add	r3, r2
 8002636:	4a1c      	ldr	r2, [pc, #112]	; (80026a8 <ssd1306_DrawPixel+0xbc>)
 8002638:	5cd3      	ldrb	r3, [r2, r3]
 800263a:	b25a      	sxtb	r2, r3
 800263c:	79bb      	ldrb	r3, [r7, #6]
 800263e:	f003 0307 	and.w	r3, r3, #7
 8002642:	2101      	movs	r1, #1
 8002644:	fa01 f303 	lsl.w	r3, r1, r3
 8002648:	b25b      	sxtb	r3, r3
 800264a:	4313      	orrs	r3, r2
 800264c:	b259      	sxtb	r1, r3
 800264e:	79fa      	ldrb	r2, [r7, #7]
 8002650:	4603      	mov	r3, r0
 8002652:	01db      	lsls	r3, r3, #7
 8002654:	4413      	add	r3, r2
 8002656:	b2c9      	uxtb	r1, r1
 8002658:	4a13      	ldr	r2, [pc, #76]	; (80026a8 <ssd1306_DrawPixel+0xbc>)
 800265a:	54d1      	strb	r1, [r2, r3]
 800265c:	e01d      	b.n	800269a <ssd1306_DrawPixel+0xae>
	}
	else
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800265e:	79fa      	ldrb	r2, [r7, #7]
 8002660:	79bb      	ldrb	r3, [r7, #6]
 8002662:	08db      	lsrs	r3, r3, #3
 8002664:	b2d8      	uxtb	r0, r3
 8002666:	4603      	mov	r3, r0
 8002668:	01db      	lsls	r3, r3, #7
 800266a:	4413      	add	r3, r2
 800266c:	4a0e      	ldr	r2, [pc, #56]	; (80026a8 <ssd1306_DrawPixel+0xbc>)
 800266e:	5cd3      	ldrb	r3, [r2, r3]
 8002670:	b25a      	sxtb	r2, r3
 8002672:	79bb      	ldrb	r3, [r7, #6]
 8002674:	f003 0307 	and.w	r3, r3, #7
 8002678:	2101      	movs	r1, #1
 800267a:	fa01 f303 	lsl.w	r3, r1, r3
 800267e:	b25b      	sxtb	r3, r3
 8002680:	43db      	mvns	r3, r3
 8002682:	b25b      	sxtb	r3, r3
 8002684:	4013      	ands	r3, r2
 8002686:	b259      	sxtb	r1, r3
 8002688:	79fa      	ldrb	r2, [r7, #7]
 800268a:	4603      	mov	r3, r0
 800268c:	01db      	lsls	r3, r3, #7
 800268e:	4413      	add	r3, r2
 8002690:	b2c9      	uxtb	r1, r1
 8002692:	4a05      	ldr	r2, [pc, #20]	; (80026a8 <ssd1306_DrawPixel+0xbc>)
 8002694:	54d1      	strb	r1, [r2, r3]
 8002696:	e000      	b.n	800269a <ssd1306_DrawPixel+0xae>
		return;
 8002698:	bf00      	nop
	}
}
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	bc80      	pop	{r7}
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	20000458 	.word	0x20000458
 80026a8:	20000058 	.word	0x20000058

080026ac <ssd1306_WriteChar>:
//	ch 		=> char om weg te schrijven
//	Font 	=> Font waarmee we gaan schrijven
//	color 	=> Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 80026ac:	b590      	push	{r4, r7, lr}
 80026ae:	b089      	sub	sp, #36	; 0x24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	4604      	mov	r4, r0
 80026b4:	1d38      	adds	r0, r7, #4
 80026b6:	e880 0006 	stmia.w	r0, {r1, r2}
 80026ba:	461a      	mov	r2, r3
 80026bc:	4623      	mov	r3, r4
 80026be:	73fb      	strb	r3, [r7, #15]
 80026c0:	4613      	mov	r3, r2
 80026c2:	73bb      	strb	r3, [r7, #14]
	uint32_t i, b, j;

	// Check remaining space on current line
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80026c4:	4b38      	ldr	r3, [pc, #224]	; (80027a8 <ssd1306_WriteChar+0xfc>)
 80026c6:	881b      	ldrh	r3, [r3, #0]
 80026c8:	461a      	mov	r2, r3
 80026ca:	793b      	ldrb	r3, [r7, #4]
 80026cc:	4413      	add	r3, r2
 80026ce:	2b7f      	cmp	r3, #127	; 0x7f
 80026d0:	dc06      	bgt.n	80026e0 <ssd1306_WriteChar+0x34>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 80026d2:	4b35      	ldr	r3, [pc, #212]	; (80027a8 <ssd1306_WriteChar+0xfc>)
 80026d4:	885b      	ldrh	r3, [r3, #2]
 80026d6:	461a      	mov	r2, r3
 80026d8:	797b      	ldrb	r3, [r7, #5]
 80026da:	4413      	add	r3, r2
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80026dc:	2b3f      	cmp	r3, #63	; 0x3f
 80026de:	dd01      	ble.n	80026e4 <ssd1306_WriteChar+0x38>
	{
		// Not enough space on current line
		return 0;
 80026e0:	2300      	movs	r3, #0
 80026e2:	e05d      	b.n	80027a0 <ssd1306_WriteChar+0xf4>
	}

	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++)
 80026e4:	2300      	movs	r3, #0
 80026e6:	61fb      	str	r3, [r7, #28]
 80026e8:	e04c      	b.n	8002784 <ssd1306_WriteChar+0xd8>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 80026ea:	68ba      	ldr	r2, [r7, #8]
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
 80026ee:	3b20      	subs	r3, #32
 80026f0:	7979      	ldrb	r1, [r7, #5]
 80026f2:	fb01 f303 	mul.w	r3, r1, r3
 80026f6:	4619      	mov	r1, r3
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	440b      	add	r3, r1
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	4413      	add	r3, r2
 8002700:	881b      	ldrh	r3, [r3, #0]
 8002702:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++)
 8002704:	2300      	movs	r3, #0
 8002706:	61bb      	str	r3, [r7, #24]
 8002708:	e034      	b.n	8002774 <ssd1306_WriteChar+0xc8>
		{
			if ((b << j) & 0x8000)
 800270a:	697a      	ldr	r2, [r7, #20]
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d012      	beq.n	8002740 <ssd1306_WriteChar+0x94>
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800271a:	4b23      	ldr	r3, [pc, #140]	; (80027a8 <ssd1306_WriteChar+0xfc>)
 800271c:	881b      	ldrh	r3, [r3, #0]
 800271e:	b2da      	uxtb	r2, r3
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	b2db      	uxtb	r3, r3
 8002724:	4413      	add	r3, r2
 8002726:	b2d8      	uxtb	r0, r3
 8002728:	4b1f      	ldr	r3, [pc, #124]	; (80027a8 <ssd1306_WriteChar+0xfc>)
 800272a:	885b      	ldrh	r3, [r3, #2]
 800272c:	b2da      	uxtb	r2, r3
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	b2db      	uxtb	r3, r3
 8002732:	4413      	add	r3, r2
 8002734:	b2db      	uxtb	r3, r3
 8002736:	7bba      	ldrb	r2, [r7, #14]
 8002738:	4619      	mov	r1, r3
 800273a:	f7ff ff57 	bl	80025ec <ssd1306_DrawPixel>
 800273e:	e016      	b.n	800276e <ssd1306_WriteChar+0xc2>
			}
			else
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002740:	4b19      	ldr	r3, [pc, #100]	; (80027a8 <ssd1306_WriteChar+0xfc>)
 8002742:	881b      	ldrh	r3, [r3, #0]
 8002744:	b2da      	uxtb	r2, r3
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	b2db      	uxtb	r3, r3
 800274a:	4413      	add	r3, r2
 800274c:	b2d8      	uxtb	r0, r3
 800274e:	4b16      	ldr	r3, [pc, #88]	; (80027a8 <ssd1306_WriteChar+0xfc>)
 8002750:	885b      	ldrh	r3, [r3, #2]
 8002752:	b2da      	uxtb	r2, r3
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	b2db      	uxtb	r3, r3
 8002758:	4413      	add	r3, r2
 800275a:	b2d9      	uxtb	r1, r3
 800275c:	7bbb      	ldrb	r3, [r7, #14]
 800275e:	2b00      	cmp	r3, #0
 8002760:	bf0c      	ite	eq
 8002762:	2301      	moveq	r3, #1
 8002764:	2300      	movne	r3, #0
 8002766:	b2db      	uxtb	r3, r3
 8002768:	461a      	mov	r2, r3
 800276a:	f7ff ff3f 	bl	80025ec <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	3301      	adds	r3, #1
 8002772:	61bb      	str	r3, [r7, #24]
 8002774:	793b      	ldrb	r3, [r7, #4]
 8002776:	461a      	mov	r2, r3
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	4293      	cmp	r3, r2
 800277c:	d3c5      	bcc.n	800270a <ssd1306_WriteChar+0x5e>
	for (i = 0; i < Font.FontHeight; i++)
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	3301      	adds	r3, #1
 8002782:	61fb      	str	r3, [r7, #28]
 8002784:	797b      	ldrb	r3, [r7, #5]
 8002786:	461a      	mov	r2, r3
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	4293      	cmp	r3, r2
 800278c:	d3ad      	bcc.n	80026ea <ssd1306_WriteChar+0x3e>
			}
		}
	}

	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
 800278e:	4b06      	ldr	r3, [pc, #24]	; (80027a8 <ssd1306_WriteChar+0xfc>)
 8002790:	881a      	ldrh	r2, [r3, #0]
 8002792:	793b      	ldrb	r3, [r7, #4]
 8002794:	b29b      	uxth	r3, r3
 8002796:	4413      	add	r3, r2
 8002798:	b29a      	uxth	r2, r3
 800279a:	4b03      	ldr	r3, [pc, #12]	; (80027a8 <ssd1306_WriteChar+0xfc>)
 800279c:	801a      	strh	r2, [r3, #0]

	// Return written char for validation
	return ch;
 800279e:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3724      	adds	r7, #36	; 0x24
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd90      	pop	{r4, r7, pc}
 80027a8:	20000458 	.word	0x20000458

080027ac <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	1d38      	adds	r0, r7, #4
 80027b6:	e880 0006 	stmia.w	r0, {r1, r2}
 80027ba:	70fb      	strb	r3, [r7, #3]
	// Write until null-byte
	while (*str)
 80027bc:	e012      	b.n	80027e4 <ssd1306_WriteString+0x38>
	{
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	7818      	ldrb	r0, [r3, #0]
 80027c2:	78fb      	ldrb	r3, [r7, #3]
 80027c4:	1d3a      	adds	r2, r7, #4
 80027c6:	ca06      	ldmia	r2, {r1, r2}
 80027c8:	f7ff ff70 	bl	80026ac <ssd1306_WriteChar>
 80027cc:	4603      	mov	r3, r0
 80027ce:	461a      	mov	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d002      	beq.n	80027de <ssd1306_WriteString+0x32>
		{
			// Char could not be written
			return *str;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	e008      	b.n	80027f0 <ssd1306_WriteString+0x44>
		}

		// Next char
		str++;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	3301      	adds	r3, #1
 80027e2:	60fb      	str	r3, [r7, #12]
	while (*str)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d1e8      	bne.n	80027be <ssd1306_WriteString+0x12>
	}

	// Everything ok
	return *str;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	781b      	ldrb	r3, [r3, #0]
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3710      	adds	r7, #16
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <ssd1306_SetCursor>:

//
//	Position the cursor
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	4603      	mov	r3, r0
 8002800:	460a      	mov	r2, r1
 8002802:	71fb      	strb	r3, [r7, #7]
 8002804:	4613      	mov	r3, r2
 8002806:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 8002808:	79fb      	ldrb	r3, [r7, #7]
 800280a:	b29a      	uxth	r2, r3
 800280c:	4b05      	ldr	r3, [pc, #20]	; (8002824 <ssd1306_SetCursor+0x2c>)
 800280e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8002810:	79bb      	ldrb	r3, [r7, #6]
 8002812:	b29a      	uxth	r2, r3
 8002814:	4b03      	ldr	r3, [pc, #12]	; (8002824 <ssd1306_SetCursor+0x2c>)
 8002816:	805a      	strh	r2, [r3, #2]
}
 8002818:	bf00      	nop
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	bc80      	pop	{r7}
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	20000458 	.word	0x20000458

08002828 <ssd1306_Line>:

void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002828:	b590      	push	{r4, r7, lr}
 800282a:	b089      	sub	sp, #36	; 0x24
 800282c:	af00      	add	r7, sp, #0
 800282e:	4604      	mov	r4, r0
 8002830:	4608      	mov	r0, r1
 8002832:	4611      	mov	r1, r2
 8002834:	461a      	mov	r2, r3
 8002836:	4623      	mov	r3, r4
 8002838:	71fb      	strb	r3, [r7, #7]
 800283a:	4603      	mov	r3, r0
 800283c:	71bb      	strb	r3, [r7, #6]
 800283e:	460b      	mov	r3, r1
 8002840:	717b      	strb	r3, [r7, #5]
 8002842:	4613      	mov	r3, r2
 8002844:	713b      	strb	r3, [r7, #4]
  int32_t deltaX = abs(x2 - x1);
 8002846:	797a      	ldrb	r2, [r7, #5]
 8002848:	79fb      	ldrb	r3, [r7, #7]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b00      	cmp	r3, #0
 800284e:	bfb8      	it	lt
 8002850:	425b      	neglt	r3, r3
 8002852:	61bb      	str	r3, [r7, #24]
  int32_t deltaY = abs(y2 - y1);
 8002854:	793a      	ldrb	r2, [r7, #4]
 8002856:	79bb      	ldrb	r3, [r7, #6]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	bfb8      	it	lt
 800285e:	425b      	neglt	r3, r3
 8002860:	617b      	str	r3, [r7, #20]
  int32_t signX = ((x1 < x2) ? 1 : -1);
 8002862:	79fa      	ldrb	r2, [r7, #7]
 8002864:	797b      	ldrb	r3, [r7, #5]
 8002866:	429a      	cmp	r2, r3
 8002868:	d201      	bcs.n	800286e <ssd1306_Line+0x46>
 800286a:	2301      	movs	r3, #1
 800286c:	e001      	b.n	8002872 <ssd1306_Line+0x4a>
 800286e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002872:	613b      	str	r3, [r7, #16]
  int32_t signY = ((y1 < y2) ? 1 : -1);
 8002874:	79ba      	ldrb	r2, [r7, #6]
 8002876:	793b      	ldrb	r3, [r7, #4]
 8002878:	429a      	cmp	r2, r3
 800287a:	d201      	bcs.n	8002880 <ssd1306_Line+0x58>
 800287c:	2301      	movs	r3, #1
 800287e:	e001      	b.n	8002884 <ssd1306_Line+0x5c>
 8002880:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002884:	60fb      	str	r3, [r7, #12]
  int32_t error = deltaX - deltaY;
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	61fb      	str	r3, [r7, #28]
  int32_t error2;

  ssd1306_DrawPixel(x2, y2, color);
 800288e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8002892:	7939      	ldrb	r1, [r7, #4]
 8002894:	797b      	ldrb	r3, [r7, #5]
 8002896:	4618      	mov	r0, r3
 8002898:	f7ff fea8 	bl	80025ec <ssd1306_DrawPixel>
    while((x1 != x2) || (y1 != y2))
 800289c:	e024      	b.n	80028e8 <ssd1306_Line+0xc0>
    {
    ssd1306_DrawPixel(x1, y1, color);
 800289e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80028a2:	79b9      	ldrb	r1, [r7, #6]
 80028a4:	79fb      	ldrb	r3, [r7, #7]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7ff fea0 	bl	80025ec <ssd1306_DrawPixel>
    error2 = error * 2;
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	60bb      	str	r3, [r7, #8]
    if(error2 > -deltaY)
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	425b      	negs	r3, r3
 80028b6:	68ba      	ldr	r2, [r7, #8]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	dd08      	ble.n	80028ce <ssd1306_Line+0xa6>
    {
      error -= deltaY;
 80028bc:	69fa      	ldr	r2, [r7, #28]
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	61fb      	str	r3, [r7, #28]
      x1 += signX;
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	b2da      	uxtb	r2, r3
 80028c8:	79fb      	ldrb	r3, [r7, #7]
 80028ca:	4413      	add	r3, r2
 80028cc:	71fb      	strb	r3, [r7, #7]
    else
    {
    /*nothing to do*/
    }

    if(error2 < deltaX)
 80028ce:	68ba      	ldr	r2, [r7, #8]
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	da08      	bge.n	80028e8 <ssd1306_Line+0xc0>
    {
      error += deltaX;
 80028d6:	69fa      	ldr	r2, [r7, #28]
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	4413      	add	r3, r2
 80028dc:	61fb      	str	r3, [r7, #28]
      y1 += signY;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	b2da      	uxtb	r2, r3
 80028e2:	79bb      	ldrb	r3, [r7, #6]
 80028e4:	4413      	add	r3, r2
 80028e6:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2))
 80028e8:	79fa      	ldrb	r2, [r7, #7]
 80028ea:	797b      	ldrb	r3, [r7, #5]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d1d6      	bne.n	800289e <ssd1306_Line+0x76>
 80028f0:	79ba      	ldrb	r2, [r7, #6]
 80028f2:	793b      	ldrb	r3, [r7, #4]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d1d2      	bne.n	800289e <ssd1306_Line+0x76>
    else
    {
    /*nothing to do*/
    }
  }
  return;
 80028f8:	bf00      	nop
}
 80028fa:	3724      	adds	r7, #36	; 0x24
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd90      	pop	{r4, r7, pc}

08002900 <ssd1306_DrawRectangle>:

    return;
}

//Draw rectangle
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002900:	b590      	push	{r4, r7, lr}
 8002902:	b085      	sub	sp, #20
 8002904:	af02      	add	r7, sp, #8
 8002906:	4604      	mov	r4, r0
 8002908:	4608      	mov	r0, r1
 800290a:	4611      	mov	r1, r2
 800290c:	461a      	mov	r2, r3
 800290e:	4623      	mov	r3, r4
 8002910:	71fb      	strb	r3, [r7, #7]
 8002912:	4603      	mov	r3, r0
 8002914:	71bb      	strb	r3, [r7, #6]
 8002916:	460b      	mov	r3, r1
 8002918:	717b      	strb	r3, [r7, #5]
 800291a:	4613      	mov	r3, r2
 800291c:	713b      	strb	r3, [r7, #4]
  ssd1306_Line(x1,y1,x2,y1,color);
 800291e:	79bc      	ldrb	r4, [r7, #6]
 8002920:	797a      	ldrb	r2, [r7, #5]
 8002922:	79b9      	ldrb	r1, [r7, #6]
 8002924:	79f8      	ldrb	r0, [r7, #7]
 8002926:	7e3b      	ldrb	r3, [r7, #24]
 8002928:	9300      	str	r3, [sp, #0]
 800292a:	4623      	mov	r3, r4
 800292c:	f7ff ff7c 	bl	8002828 <ssd1306_Line>
  ssd1306_Line(x2,y1,x2,y2,color);
 8002930:	793c      	ldrb	r4, [r7, #4]
 8002932:	797a      	ldrb	r2, [r7, #5]
 8002934:	79b9      	ldrb	r1, [r7, #6]
 8002936:	7978      	ldrb	r0, [r7, #5]
 8002938:	7e3b      	ldrb	r3, [r7, #24]
 800293a:	9300      	str	r3, [sp, #0]
 800293c:	4623      	mov	r3, r4
 800293e:	f7ff ff73 	bl	8002828 <ssd1306_Line>
  ssd1306_Line(x2,y2,x1,y2,color);
 8002942:	793c      	ldrb	r4, [r7, #4]
 8002944:	79fa      	ldrb	r2, [r7, #7]
 8002946:	7939      	ldrb	r1, [r7, #4]
 8002948:	7978      	ldrb	r0, [r7, #5]
 800294a:	7e3b      	ldrb	r3, [r7, #24]
 800294c:	9300      	str	r3, [sp, #0]
 800294e:	4623      	mov	r3, r4
 8002950:	f7ff ff6a 	bl	8002828 <ssd1306_Line>
  ssd1306_Line(x1,y2,x1,y1,color);
 8002954:	79bc      	ldrb	r4, [r7, #6]
 8002956:	79fa      	ldrb	r2, [r7, #7]
 8002958:	7939      	ldrb	r1, [r7, #4]
 800295a:	79f8      	ldrb	r0, [r7, #7]
 800295c:	7e3b      	ldrb	r3, [r7, #24]
 800295e:	9300      	str	r3, [sp, #0]
 8002960:	4623      	mov	r3, r4
 8002962:	f7ff ff61 	bl	8002828 <ssd1306_Line>

  return;
 8002966:	bf00      	nop
}
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	bd90      	pop	{r4, r7, pc}

0800296e <ssd1306FillRect>:
void ssd1306FillRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint16_t color) {
 800296e:	b590      	push	{r4, r7, lr}
 8002970:	b085      	sub	sp, #20
 8002972:	af00      	add	r7, sp, #0
 8002974:	4604      	mov	r4, r0
 8002976:	4608      	mov	r0, r1
 8002978:	4611      	mov	r1, r2
 800297a:	461a      	mov	r2, r3
 800297c:	4623      	mov	r3, r4
 800297e:	71fb      	strb	r3, [r7, #7]
 8002980:	4603      	mov	r3, r0
 8002982:	71bb      	strb	r3, [r7, #6]
 8002984:	460b      	mov	r3, r1
 8002986:	717b      	strb	r3, [r7, #5]
 8002988:	4613      	mov	r3, r2
 800298a:	713b      	strb	r3, [r7, #4]
    uint8_t x0, x1, y1;

    x0 = x;
 800298c:	79fb      	ldrb	r3, [r7, #7]
 800298e:	73fb      	strb	r3, [r7, #15]
    x1 = x + w;
 8002990:	79fa      	ldrb	r2, [r7, #7]
 8002992:	797b      	ldrb	r3, [r7, #5]
 8002994:	4413      	add	r3, r2
 8002996:	73bb      	strb	r3, [r7, #14]
    y1 = y + h;
 8002998:	79ba      	ldrb	r2, [r7, #6]
 800299a:	793b      	ldrb	r3, [r7, #4]
 800299c:	4413      	add	r3, r2
 800299e:	737b      	strb	r3, [r7, #13]
    for(; y < y1; y++)
 80029a0:	e013      	b.n	80029ca <ssd1306FillRect+0x5c>
        for(x = x0; x < x1; x++)
 80029a2:	7bfb      	ldrb	r3, [r7, #15]
 80029a4:	71fb      	strb	r3, [r7, #7]
 80029a6:	e009      	b.n	80029bc <ssd1306FillRect+0x4e>
        	ssd1306_DrawPixel(x, y, color);
 80029a8:	8c3b      	ldrh	r3, [r7, #32]
 80029aa:	b2da      	uxtb	r2, r3
 80029ac:	79b9      	ldrb	r1, [r7, #6]
 80029ae:	79fb      	ldrb	r3, [r7, #7]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7ff fe1b 	bl	80025ec <ssd1306_DrawPixel>
        for(x = x0; x < x1; x++)
 80029b6:	79fb      	ldrb	r3, [r7, #7]
 80029b8:	3301      	adds	r3, #1
 80029ba:	71fb      	strb	r3, [r7, #7]
 80029bc:	79fa      	ldrb	r2, [r7, #7]
 80029be:	7bbb      	ldrb	r3, [r7, #14]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d3f1      	bcc.n	80029a8 <ssd1306FillRect+0x3a>
    for(; y < y1; y++)
 80029c4:	79bb      	ldrb	r3, [r7, #6]
 80029c6:	3301      	adds	r3, #1
 80029c8:	71bb      	strb	r3, [r7, #6]
 80029ca:	79ba      	ldrb	r2, [r7, #6]
 80029cc:	7b7b      	ldrb	r3, [r7, #13]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d3e7      	bcc.n	80029a2 <ssd1306FillRect+0x34>
            //ssd1306DrawPixel( x, y, color, layer);
}
 80029d2:	bf00      	nop
 80029d4:	bf00      	nop
 80029d6:	3714      	adds	r7, #20
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd90      	pop	{r4, r7, pc}

080029dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029dc:	480c      	ldr	r0, [pc, #48]	; (8002a10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80029de:	490d      	ldr	r1, [pc, #52]	; (8002a14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80029e0:	4a0d      	ldr	r2, [pc, #52]	; (8002a18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80029e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029e4:	e002      	b.n	80029ec <LoopCopyDataInit>

080029e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029ea:	3304      	adds	r3, #4

080029ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029f0:	d3f9      	bcc.n	80029e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029f2:	4a0a      	ldr	r2, [pc, #40]	; (8002a1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80029f4:	4c0a      	ldr	r4, [pc, #40]	; (8002a20 <LoopFillZerobss+0x22>)
  movs r3, #0
 80029f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029f8:	e001      	b.n	80029fe <LoopFillZerobss>

080029fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029fc:	3204      	adds	r2, #4

080029fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a00:	d3fb      	bcc.n	80029fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002a02:	f7fd fec1 	bl	8000788 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a06:	f002 f80b 	bl	8004a20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a0a:	f7fd fb9f 	bl	800014c <main>
  bx lr
 8002a0e:	4770      	bx	lr
  ldr r0, =_sdata
 8002a10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a14:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8002a18:	080054d0 	.word	0x080054d0
  ldr r2, =_sbss
 8002a1c:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8002a20:	200008cc 	.word	0x200008cc

08002a24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a24:	e7fe      	b.n	8002a24 <ADC1_2_IRQHandler>
	...

08002a28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a2c:	4b08      	ldr	r3, [pc, #32]	; (8002a50 <HAL_Init+0x28>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a07      	ldr	r2, [pc, #28]	; (8002a50 <HAL_Init+0x28>)
 8002a32:	f043 0310 	orr.w	r3, r3, #16
 8002a36:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a38:	2003      	movs	r0, #3
 8002a3a:	f000 f947 	bl	8002ccc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a3e:	2000      	movs	r0, #0
 8002a40:	f000 f808 	bl	8002a54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a44:	f7fd fcf2 	bl	800042c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	40022000 	.word	0x40022000

08002a54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a5c:	4b12      	ldr	r3, [pc, #72]	; (8002aa8 <HAL_InitTick+0x54>)
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	4b12      	ldr	r3, [pc, #72]	; (8002aac <HAL_InitTick+0x58>)
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	4619      	mov	r1, r3
 8002a66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a72:	4618      	mov	r0, r3
 8002a74:	f000 f95f 	bl	8002d36 <HAL_SYSTICK_Config>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e00e      	b.n	8002aa0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2b0f      	cmp	r3, #15
 8002a86:	d80a      	bhi.n	8002a9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a88:	2200      	movs	r2, #0
 8002a8a:	6879      	ldr	r1, [r7, #4]
 8002a8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a90:	f000 f927 	bl	8002ce2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a94:	4a06      	ldr	r2, [pc, #24]	; (8002ab0 <HAL_InitTick+0x5c>)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	e000      	b.n	8002aa0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3708      	adds	r7, #8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	20000008 	.word	0x20000008
 8002aac:	20000030 	.word	0x20000030
 8002ab0:	2000002c 	.word	0x2000002c

08002ab4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ab8:	4b05      	ldr	r3, [pc, #20]	; (8002ad0 <HAL_IncTick+0x1c>)
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	461a      	mov	r2, r3
 8002abe:	4b05      	ldr	r3, [pc, #20]	; (8002ad4 <HAL_IncTick+0x20>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	4a03      	ldr	r2, [pc, #12]	; (8002ad4 <HAL_IncTick+0x20>)
 8002ac6:	6013      	str	r3, [r2, #0]
}
 8002ac8:	bf00      	nop
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr
 8002ad0:	20000030 	.word	0x20000030
 8002ad4:	200008c8 	.word	0x200008c8

08002ad8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  return uwTick;
 8002adc:	4b02      	ldr	r3, [pc, #8]	; (8002ae8 <HAL_GetTick+0x10>)
 8002ade:	681b      	ldr	r3, [r3, #0]
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bc80      	pop	{r7}
 8002ae6:	4770      	bx	lr
 8002ae8:	200008c8 	.word	0x200008c8

08002aec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002af4:	f7ff fff0 	bl	8002ad8 <HAL_GetTick>
 8002af8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b04:	d005      	beq.n	8002b12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b06:	4b0a      	ldr	r3, [pc, #40]	; (8002b30 <HAL_Delay+0x44>)
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	4413      	add	r3, r2
 8002b10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b12:	bf00      	nop
 8002b14:	f7ff ffe0 	bl	8002ad8 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d8f7      	bhi.n	8002b14 <HAL_Delay+0x28>
  {
  }
}
 8002b24:	bf00      	nop
 8002b26:	bf00      	nop
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	20000030 	.word	0x20000030

08002b34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f003 0307 	and.w	r3, r3, #7
 8002b42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b44:	4b0c      	ldr	r3, [pc, #48]	; (8002b78 <__NVIC_SetPriorityGrouping+0x44>)
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b4a:	68ba      	ldr	r2, [r7, #8]
 8002b4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b50:	4013      	ands	r3, r2
 8002b52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b66:	4a04      	ldr	r2, [pc, #16]	; (8002b78 <__NVIC_SetPriorityGrouping+0x44>)
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	60d3      	str	r3, [r2, #12]
}
 8002b6c:	bf00      	nop
 8002b6e:	3714      	adds	r7, #20
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bc80      	pop	{r7}
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	e000ed00 	.word	0xe000ed00

08002b7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b80:	4b04      	ldr	r3, [pc, #16]	; (8002b94 <__NVIC_GetPriorityGrouping+0x18>)
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	0a1b      	lsrs	r3, r3, #8
 8002b86:	f003 0307 	and.w	r3, r3, #7
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bc80      	pop	{r7}
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	e000ed00 	.word	0xe000ed00

08002b98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	db0b      	blt.n	8002bc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002baa:	79fb      	ldrb	r3, [r7, #7]
 8002bac:	f003 021f 	and.w	r2, r3, #31
 8002bb0:	4906      	ldr	r1, [pc, #24]	; (8002bcc <__NVIC_EnableIRQ+0x34>)
 8002bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb6:	095b      	lsrs	r3, r3, #5
 8002bb8:	2001      	movs	r0, #1
 8002bba:	fa00 f202 	lsl.w	r2, r0, r2
 8002bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bc2:	bf00      	nop
 8002bc4:	370c      	adds	r7, #12
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bc80      	pop	{r7}
 8002bca:	4770      	bx	lr
 8002bcc:	e000e100 	.word	0xe000e100

08002bd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	6039      	str	r1, [r7, #0]
 8002bda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	db0a      	blt.n	8002bfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	b2da      	uxtb	r2, r3
 8002be8:	490c      	ldr	r1, [pc, #48]	; (8002c1c <__NVIC_SetPriority+0x4c>)
 8002bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bee:	0112      	lsls	r2, r2, #4
 8002bf0:	b2d2      	uxtb	r2, r2
 8002bf2:	440b      	add	r3, r1
 8002bf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bf8:	e00a      	b.n	8002c10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	4908      	ldr	r1, [pc, #32]	; (8002c20 <__NVIC_SetPriority+0x50>)
 8002c00:	79fb      	ldrb	r3, [r7, #7]
 8002c02:	f003 030f 	and.w	r3, r3, #15
 8002c06:	3b04      	subs	r3, #4
 8002c08:	0112      	lsls	r2, r2, #4
 8002c0a:	b2d2      	uxtb	r2, r2
 8002c0c:	440b      	add	r3, r1
 8002c0e:	761a      	strb	r2, [r3, #24]
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bc80      	pop	{r7}
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	e000e100 	.word	0xe000e100
 8002c20:	e000ed00 	.word	0xe000ed00

08002c24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b089      	sub	sp, #36	; 0x24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	f1c3 0307 	rsb	r3, r3, #7
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	bf28      	it	cs
 8002c42:	2304      	movcs	r3, #4
 8002c44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	3304      	adds	r3, #4
 8002c4a:	2b06      	cmp	r3, #6
 8002c4c:	d902      	bls.n	8002c54 <NVIC_EncodePriority+0x30>
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	3b03      	subs	r3, #3
 8002c52:	e000      	b.n	8002c56 <NVIC_EncodePriority+0x32>
 8002c54:	2300      	movs	r3, #0
 8002c56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c62:	43da      	mvns	r2, r3
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	401a      	ands	r2, r3
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	fa01 f303 	lsl.w	r3, r1, r3
 8002c76:	43d9      	mvns	r1, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c7c:	4313      	orrs	r3, r2
         );
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3724      	adds	r7, #36	; 0x24
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bc80      	pop	{r7}
 8002c86:	4770      	bx	lr

08002c88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	3b01      	subs	r3, #1
 8002c94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c98:	d301      	bcc.n	8002c9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e00f      	b.n	8002cbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c9e:	4a0a      	ldr	r2, [pc, #40]	; (8002cc8 <SysTick_Config+0x40>)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ca6:	210f      	movs	r1, #15
 8002ca8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002cac:	f7ff ff90 	bl	8002bd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cb0:	4b05      	ldr	r3, [pc, #20]	; (8002cc8 <SysTick_Config+0x40>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cb6:	4b04      	ldr	r3, [pc, #16]	; (8002cc8 <SysTick_Config+0x40>)
 8002cb8:	2207      	movs	r2, #7
 8002cba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	e000e010 	.word	0xe000e010

08002ccc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f7ff ff2d 	bl	8002b34 <__NVIC_SetPriorityGrouping>
}
 8002cda:	bf00      	nop
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b086      	sub	sp, #24
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	4603      	mov	r3, r0
 8002cea:	60b9      	str	r1, [r7, #8]
 8002cec:	607a      	str	r2, [r7, #4]
 8002cee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cf4:	f7ff ff42 	bl	8002b7c <__NVIC_GetPriorityGrouping>
 8002cf8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	68b9      	ldr	r1, [r7, #8]
 8002cfe:	6978      	ldr	r0, [r7, #20]
 8002d00:	f7ff ff90 	bl	8002c24 <NVIC_EncodePriority>
 8002d04:	4602      	mov	r2, r0
 8002d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d0a:	4611      	mov	r1, r2
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7ff ff5f 	bl	8002bd0 <__NVIC_SetPriority>
}
 8002d12:	bf00      	nop
 8002d14:	3718      	adds	r7, #24
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b082      	sub	sp, #8
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	4603      	mov	r3, r0
 8002d22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7ff ff35 	bl	8002b98 <__NVIC_EnableIRQ>
}
 8002d2e:	bf00      	nop
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b082      	sub	sp, #8
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f7ff ffa2 	bl	8002c88 <SysTick_Config>
 8002d44:	4603      	mov	r3, r0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3708      	adds	r7, #8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
	...

08002d50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b08b      	sub	sp, #44	; 0x2c
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d62:	e169      	b.n	8003038 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002d64:	2201      	movs	r2, #1
 8002d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	69fa      	ldr	r2, [r7, #28]
 8002d74:	4013      	ands	r3, r2
 8002d76:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	f040 8158 	bne.w	8003032 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	4a9a      	ldr	r2, [pc, #616]	; (8002ff0 <HAL_GPIO_Init+0x2a0>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d05e      	beq.n	8002e4a <HAL_GPIO_Init+0xfa>
 8002d8c:	4a98      	ldr	r2, [pc, #608]	; (8002ff0 <HAL_GPIO_Init+0x2a0>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d875      	bhi.n	8002e7e <HAL_GPIO_Init+0x12e>
 8002d92:	4a98      	ldr	r2, [pc, #608]	; (8002ff4 <HAL_GPIO_Init+0x2a4>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d058      	beq.n	8002e4a <HAL_GPIO_Init+0xfa>
 8002d98:	4a96      	ldr	r2, [pc, #600]	; (8002ff4 <HAL_GPIO_Init+0x2a4>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d86f      	bhi.n	8002e7e <HAL_GPIO_Init+0x12e>
 8002d9e:	4a96      	ldr	r2, [pc, #600]	; (8002ff8 <HAL_GPIO_Init+0x2a8>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d052      	beq.n	8002e4a <HAL_GPIO_Init+0xfa>
 8002da4:	4a94      	ldr	r2, [pc, #592]	; (8002ff8 <HAL_GPIO_Init+0x2a8>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d869      	bhi.n	8002e7e <HAL_GPIO_Init+0x12e>
 8002daa:	4a94      	ldr	r2, [pc, #592]	; (8002ffc <HAL_GPIO_Init+0x2ac>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d04c      	beq.n	8002e4a <HAL_GPIO_Init+0xfa>
 8002db0:	4a92      	ldr	r2, [pc, #584]	; (8002ffc <HAL_GPIO_Init+0x2ac>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d863      	bhi.n	8002e7e <HAL_GPIO_Init+0x12e>
 8002db6:	4a92      	ldr	r2, [pc, #584]	; (8003000 <HAL_GPIO_Init+0x2b0>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d046      	beq.n	8002e4a <HAL_GPIO_Init+0xfa>
 8002dbc:	4a90      	ldr	r2, [pc, #576]	; (8003000 <HAL_GPIO_Init+0x2b0>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d85d      	bhi.n	8002e7e <HAL_GPIO_Init+0x12e>
 8002dc2:	2b12      	cmp	r3, #18
 8002dc4:	d82a      	bhi.n	8002e1c <HAL_GPIO_Init+0xcc>
 8002dc6:	2b12      	cmp	r3, #18
 8002dc8:	d859      	bhi.n	8002e7e <HAL_GPIO_Init+0x12e>
 8002dca:	a201      	add	r2, pc, #4	; (adr r2, 8002dd0 <HAL_GPIO_Init+0x80>)
 8002dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd0:	08002e4b 	.word	0x08002e4b
 8002dd4:	08002e25 	.word	0x08002e25
 8002dd8:	08002e37 	.word	0x08002e37
 8002ddc:	08002e79 	.word	0x08002e79
 8002de0:	08002e7f 	.word	0x08002e7f
 8002de4:	08002e7f 	.word	0x08002e7f
 8002de8:	08002e7f 	.word	0x08002e7f
 8002dec:	08002e7f 	.word	0x08002e7f
 8002df0:	08002e7f 	.word	0x08002e7f
 8002df4:	08002e7f 	.word	0x08002e7f
 8002df8:	08002e7f 	.word	0x08002e7f
 8002dfc:	08002e7f 	.word	0x08002e7f
 8002e00:	08002e7f 	.word	0x08002e7f
 8002e04:	08002e7f 	.word	0x08002e7f
 8002e08:	08002e7f 	.word	0x08002e7f
 8002e0c:	08002e7f 	.word	0x08002e7f
 8002e10:	08002e7f 	.word	0x08002e7f
 8002e14:	08002e2d 	.word	0x08002e2d
 8002e18:	08002e41 	.word	0x08002e41
 8002e1c:	4a79      	ldr	r2, [pc, #484]	; (8003004 <HAL_GPIO_Init+0x2b4>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d013      	beq.n	8002e4a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002e22:	e02c      	b.n	8002e7e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	623b      	str	r3, [r7, #32]
          break;
 8002e2a:	e029      	b.n	8002e80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	3304      	adds	r3, #4
 8002e32:	623b      	str	r3, [r7, #32]
          break;
 8002e34:	e024      	b.n	8002e80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	3308      	adds	r3, #8
 8002e3c:	623b      	str	r3, [r7, #32]
          break;
 8002e3e:	e01f      	b.n	8002e80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	330c      	adds	r3, #12
 8002e46:	623b      	str	r3, [r7, #32]
          break;
 8002e48:	e01a      	b.n	8002e80 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d102      	bne.n	8002e58 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002e52:	2304      	movs	r3, #4
 8002e54:	623b      	str	r3, [r7, #32]
          break;
 8002e56:	e013      	b.n	8002e80 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d105      	bne.n	8002e6c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e60:	2308      	movs	r3, #8
 8002e62:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	69fa      	ldr	r2, [r7, #28]
 8002e68:	611a      	str	r2, [r3, #16]
          break;
 8002e6a:	e009      	b.n	8002e80 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e6c:	2308      	movs	r3, #8
 8002e6e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	69fa      	ldr	r2, [r7, #28]
 8002e74:	615a      	str	r2, [r3, #20]
          break;
 8002e76:	e003      	b.n	8002e80 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	623b      	str	r3, [r7, #32]
          break;
 8002e7c:	e000      	b.n	8002e80 <HAL_GPIO_Init+0x130>
          break;
 8002e7e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	2bff      	cmp	r3, #255	; 0xff
 8002e84:	d801      	bhi.n	8002e8a <HAL_GPIO_Init+0x13a>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	e001      	b.n	8002e8e <HAL_GPIO_Init+0x13e>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	3304      	adds	r3, #4
 8002e8e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	2bff      	cmp	r3, #255	; 0xff
 8002e94:	d802      	bhi.n	8002e9c <HAL_GPIO_Init+0x14c>
 8002e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	e002      	b.n	8002ea2 <HAL_GPIO_Init+0x152>
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9e:	3b08      	subs	r3, #8
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	210f      	movs	r1, #15
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb0:	43db      	mvns	r3, r3
 8002eb2:	401a      	ands	r2, r3
 8002eb4:	6a39      	ldr	r1, [r7, #32]
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ebc:	431a      	orrs	r2, r3
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f000 80b1 	beq.w	8003032 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ed0:	4b4d      	ldr	r3, [pc, #308]	; (8003008 <HAL_GPIO_Init+0x2b8>)
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	4a4c      	ldr	r2, [pc, #304]	; (8003008 <HAL_GPIO_Init+0x2b8>)
 8002ed6:	f043 0301 	orr.w	r3, r3, #1
 8002eda:	6193      	str	r3, [r2, #24]
 8002edc:	4b4a      	ldr	r3, [pc, #296]	; (8003008 <HAL_GPIO_Init+0x2b8>)
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	60bb      	str	r3, [r7, #8]
 8002ee6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002ee8:	4a48      	ldr	r2, [pc, #288]	; (800300c <HAL_GPIO_Init+0x2bc>)
 8002eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eec:	089b      	lsrs	r3, r3, #2
 8002eee:	3302      	adds	r3, #2
 8002ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ef4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef8:	f003 0303 	and.w	r3, r3, #3
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	220f      	movs	r2, #15
 8002f00:	fa02 f303 	lsl.w	r3, r2, r3
 8002f04:	43db      	mvns	r3, r3
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4a40      	ldr	r2, [pc, #256]	; (8003010 <HAL_GPIO_Init+0x2c0>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d013      	beq.n	8002f3c <HAL_GPIO_Init+0x1ec>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a3f      	ldr	r2, [pc, #252]	; (8003014 <HAL_GPIO_Init+0x2c4>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d00d      	beq.n	8002f38 <HAL_GPIO_Init+0x1e8>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a3e      	ldr	r2, [pc, #248]	; (8003018 <HAL_GPIO_Init+0x2c8>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d007      	beq.n	8002f34 <HAL_GPIO_Init+0x1e4>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a3d      	ldr	r2, [pc, #244]	; (800301c <HAL_GPIO_Init+0x2cc>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d101      	bne.n	8002f30 <HAL_GPIO_Init+0x1e0>
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e006      	b.n	8002f3e <HAL_GPIO_Init+0x1ee>
 8002f30:	2304      	movs	r3, #4
 8002f32:	e004      	b.n	8002f3e <HAL_GPIO_Init+0x1ee>
 8002f34:	2302      	movs	r3, #2
 8002f36:	e002      	b.n	8002f3e <HAL_GPIO_Init+0x1ee>
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e000      	b.n	8002f3e <HAL_GPIO_Init+0x1ee>
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f40:	f002 0203 	and.w	r2, r2, #3
 8002f44:	0092      	lsls	r2, r2, #2
 8002f46:	4093      	lsls	r3, r2
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002f4e:	492f      	ldr	r1, [pc, #188]	; (800300c <HAL_GPIO_Init+0x2bc>)
 8002f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f52:	089b      	lsrs	r3, r3, #2
 8002f54:	3302      	adds	r3, #2
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d006      	beq.n	8002f76 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002f68:	4b2d      	ldr	r3, [pc, #180]	; (8003020 <HAL_GPIO_Init+0x2d0>)
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	492c      	ldr	r1, [pc, #176]	; (8003020 <HAL_GPIO_Init+0x2d0>)
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	600b      	str	r3, [r1, #0]
 8002f74:	e006      	b.n	8002f84 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f76:	4b2a      	ldr	r3, [pc, #168]	; (8003020 <HAL_GPIO_Init+0x2d0>)
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	43db      	mvns	r3, r3
 8002f7e:	4928      	ldr	r1, [pc, #160]	; (8003020 <HAL_GPIO_Init+0x2d0>)
 8002f80:	4013      	ands	r3, r2
 8002f82:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d006      	beq.n	8002f9e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002f90:	4b23      	ldr	r3, [pc, #140]	; (8003020 <HAL_GPIO_Init+0x2d0>)
 8002f92:	685a      	ldr	r2, [r3, #4]
 8002f94:	4922      	ldr	r1, [pc, #136]	; (8003020 <HAL_GPIO_Init+0x2d0>)
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	604b      	str	r3, [r1, #4]
 8002f9c:	e006      	b.n	8002fac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002f9e:	4b20      	ldr	r3, [pc, #128]	; (8003020 <HAL_GPIO_Init+0x2d0>)
 8002fa0:	685a      	ldr	r2, [r3, #4]
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	43db      	mvns	r3, r3
 8002fa6:	491e      	ldr	r1, [pc, #120]	; (8003020 <HAL_GPIO_Init+0x2d0>)
 8002fa8:	4013      	ands	r3, r2
 8002faa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d006      	beq.n	8002fc6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002fb8:	4b19      	ldr	r3, [pc, #100]	; (8003020 <HAL_GPIO_Init+0x2d0>)
 8002fba:	689a      	ldr	r2, [r3, #8]
 8002fbc:	4918      	ldr	r1, [pc, #96]	; (8003020 <HAL_GPIO_Init+0x2d0>)
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	608b      	str	r3, [r1, #8]
 8002fc4:	e006      	b.n	8002fd4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002fc6:	4b16      	ldr	r3, [pc, #88]	; (8003020 <HAL_GPIO_Init+0x2d0>)
 8002fc8:	689a      	ldr	r2, [r3, #8]
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	43db      	mvns	r3, r3
 8002fce:	4914      	ldr	r1, [pc, #80]	; (8003020 <HAL_GPIO_Init+0x2d0>)
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d021      	beq.n	8003024 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002fe0:	4b0f      	ldr	r3, [pc, #60]	; (8003020 <HAL_GPIO_Init+0x2d0>)
 8002fe2:	68da      	ldr	r2, [r3, #12]
 8002fe4:	490e      	ldr	r1, [pc, #56]	; (8003020 <HAL_GPIO_Init+0x2d0>)
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	60cb      	str	r3, [r1, #12]
 8002fec:	e021      	b.n	8003032 <HAL_GPIO_Init+0x2e2>
 8002fee:	bf00      	nop
 8002ff0:	10320000 	.word	0x10320000
 8002ff4:	10310000 	.word	0x10310000
 8002ff8:	10220000 	.word	0x10220000
 8002ffc:	10210000 	.word	0x10210000
 8003000:	10120000 	.word	0x10120000
 8003004:	10110000 	.word	0x10110000
 8003008:	40021000 	.word	0x40021000
 800300c:	40010000 	.word	0x40010000
 8003010:	40010800 	.word	0x40010800
 8003014:	40010c00 	.word	0x40010c00
 8003018:	40011000 	.word	0x40011000
 800301c:	40011400 	.word	0x40011400
 8003020:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003024:	4b0b      	ldr	r3, [pc, #44]	; (8003054 <HAL_GPIO_Init+0x304>)
 8003026:	68da      	ldr	r2, [r3, #12]
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	43db      	mvns	r3, r3
 800302c:	4909      	ldr	r1, [pc, #36]	; (8003054 <HAL_GPIO_Init+0x304>)
 800302e:	4013      	ands	r3, r2
 8003030:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003034:	3301      	adds	r3, #1
 8003036:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303e:	fa22 f303 	lsr.w	r3, r2, r3
 8003042:	2b00      	cmp	r3, #0
 8003044:	f47f ae8e 	bne.w	8002d64 <HAL_GPIO_Init+0x14>
  }
}
 8003048:	bf00      	nop
 800304a:	bf00      	nop
 800304c:	372c      	adds	r7, #44	; 0x2c
 800304e:	46bd      	mov	sp, r7
 8003050:	bc80      	pop	{r7}
 8003052:	4770      	bx	lr
 8003054:	40010400 	.word	0x40010400

08003058 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003058:	b480      	push	{r7}
 800305a:	b085      	sub	sp, #20
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	460b      	mov	r3, r1
 8003062:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689a      	ldr	r2, [r3, #8]
 8003068:	887b      	ldrh	r3, [r7, #2]
 800306a:	4013      	ands	r3, r2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d002      	beq.n	8003076 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003070:	2301      	movs	r3, #1
 8003072:	73fb      	strb	r3, [r7, #15]
 8003074:	e001      	b.n	800307a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003076:	2300      	movs	r3, #0
 8003078:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800307a:	7bfb      	ldrb	r3, [r7, #15]
}
 800307c:	4618      	mov	r0, r3
 800307e:	3714      	adds	r7, #20
 8003080:	46bd      	mov	sp, r7
 8003082:	bc80      	pop	{r7}
 8003084:	4770      	bx	lr

08003086 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003086:	b480      	push	{r7}
 8003088:	b083      	sub	sp, #12
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
 800308e:	460b      	mov	r3, r1
 8003090:	807b      	strh	r3, [r7, #2]
 8003092:	4613      	mov	r3, r2
 8003094:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003096:	787b      	ldrb	r3, [r7, #1]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d003      	beq.n	80030a4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800309c:	887a      	ldrh	r2, [r7, #2]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80030a2:	e003      	b.n	80030ac <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80030a4:	887b      	ldrh	r3, [r7, #2]
 80030a6:	041a      	lsls	r2, r3, #16
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	611a      	str	r2, [r3, #16]
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bc80      	pop	{r7}
 80030b4:	4770      	bx	lr
	...

080030b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	4603      	mov	r3, r0
 80030c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80030c2:	4b08      	ldr	r3, [pc, #32]	; (80030e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030c4:	695a      	ldr	r2, [r3, #20]
 80030c6:	88fb      	ldrh	r3, [r7, #6]
 80030c8:	4013      	ands	r3, r2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d006      	beq.n	80030dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80030ce:	4a05      	ldr	r2, [pc, #20]	; (80030e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030d0:	88fb      	ldrh	r3, [r7, #6]
 80030d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80030d4:	88fb      	ldrh	r3, [r7, #6]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f000 f806 	bl	80030e8 <HAL_GPIO_EXTI_Callback>
  }
}
 80030dc:	bf00      	nop
 80030de:	3708      	adds	r7, #8
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	40010400 	.word	0x40010400

080030e8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	4603      	mov	r3, r0
 80030f0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80030f2:	bf00      	nop
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bc80      	pop	{r7}
 80030fa:	4770      	bx	lr

080030fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e12b      	b.n	8003366 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d106      	bne.n	8003128 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f7fd f9b4 	bl	8000490 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2224      	movs	r2, #36	; 0x24
 800312c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f022 0201 	bic.w	r2, r2, #1
 800313e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800314e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800315e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003160:	f000 fffa 	bl	8004158 <HAL_RCC_GetPCLK1Freq>
 8003164:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	4a81      	ldr	r2, [pc, #516]	; (8003370 <HAL_I2C_Init+0x274>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d807      	bhi.n	8003180 <HAL_I2C_Init+0x84>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	4a80      	ldr	r2, [pc, #512]	; (8003374 <HAL_I2C_Init+0x278>)
 8003174:	4293      	cmp	r3, r2
 8003176:	bf94      	ite	ls
 8003178:	2301      	movls	r3, #1
 800317a:	2300      	movhi	r3, #0
 800317c:	b2db      	uxtb	r3, r3
 800317e:	e006      	b.n	800318e <HAL_I2C_Init+0x92>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	4a7d      	ldr	r2, [pc, #500]	; (8003378 <HAL_I2C_Init+0x27c>)
 8003184:	4293      	cmp	r3, r2
 8003186:	bf94      	ite	ls
 8003188:	2301      	movls	r3, #1
 800318a:	2300      	movhi	r3, #0
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e0e7      	b.n	8003366 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	4a78      	ldr	r2, [pc, #480]	; (800337c <HAL_I2C_Init+0x280>)
 800319a:	fba2 2303 	umull	r2, r3, r2, r3
 800319e:	0c9b      	lsrs	r3, r3, #18
 80031a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68ba      	ldr	r2, [r7, #8]
 80031b2:	430a      	orrs	r2, r1
 80031b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	4a6a      	ldr	r2, [pc, #424]	; (8003370 <HAL_I2C_Init+0x274>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d802      	bhi.n	80031d0 <HAL_I2C_Init+0xd4>
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	3301      	adds	r3, #1
 80031ce:	e009      	b.n	80031e4 <HAL_I2C_Init+0xe8>
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80031d6:	fb02 f303 	mul.w	r3, r2, r3
 80031da:	4a69      	ldr	r2, [pc, #420]	; (8003380 <HAL_I2C_Init+0x284>)
 80031dc:	fba2 2303 	umull	r2, r3, r2, r3
 80031e0:	099b      	lsrs	r3, r3, #6
 80031e2:	3301      	adds	r3, #1
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	6812      	ldr	r2, [r2, #0]
 80031e8:	430b      	orrs	r3, r1
 80031ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	69db      	ldr	r3, [r3, #28]
 80031f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80031f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	495c      	ldr	r1, [pc, #368]	; (8003370 <HAL_I2C_Init+0x274>)
 8003200:	428b      	cmp	r3, r1
 8003202:	d819      	bhi.n	8003238 <HAL_I2C_Init+0x13c>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	1e59      	subs	r1, r3, #1
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003212:	1c59      	adds	r1, r3, #1
 8003214:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003218:	400b      	ands	r3, r1
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00a      	beq.n	8003234 <HAL_I2C_Init+0x138>
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	1e59      	subs	r1, r3, #1
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	005b      	lsls	r3, r3, #1
 8003228:	fbb1 f3f3 	udiv	r3, r1, r3
 800322c:	3301      	adds	r3, #1
 800322e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003232:	e051      	b.n	80032d8 <HAL_I2C_Init+0x1dc>
 8003234:	2304      	movs	r3, #4
 8003236:	e04f      	b.n	80032d8 <HAL_I2C_Init+0x1dc>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d111      	bne.n	8003264 <HAL_I2C_Init+0x168>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	1e58      	subs	r0, r3, #1
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6859      	ldr	r1, [r3, #4]
 8003248:	460b      	mov	r3, r1
 800324a:	005b      	lsls	r3, r3, #1
 800324c:	440b      	add	r3, r1
 800324e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003252:	3301      	adds	r3, #1
 8003254:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003258:	2b00      	cmp	r3, #0
 800325a:	bf0c      	ite	eq
 800325c:	2301      	moveq	r3, #1
 800325e:	2300      	movne	r3, #0
 8003260:	b2db      	uxtb	r3, r3
 8003262:	e012      	b.n	800328a <HAL_I2C_Init+0x18e>
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	1e58      	subs	r0, r3, #1
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6859      	ldr	r1, [r3, #4]
 800326c:	460b      	mov	r3, r1
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	440b      	add	r3, r1
 8003272:	0099      	lsls	r1, r3, #2
 8003274:	440b      	add	r3, r1
 8003276:	fbb0 f3f3 	udiv	r3, r0, r3
 800327a:	3301      	adds	r3, #1
 800327c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003280:	2b00      	cmp	r3, #0
 8003282:	bf0c      	ite	eq
 8003284:	2301      	moveq	r3, #1
 8003286:	2300      	movne	r3, #0
 8003288:	b2db      	uxtb	r3, r3
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <HAL_I2C_Init+0x196>
 800328e:	2301      	movs	r3, #1
 8003290:	e022      	b.n	80032d8 <HAL_I2C_Init+0x1dc>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d10e      	bne.n	80032b8 <HAL_I2C_Init+0x1bc>
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	1e58      	subs	r0, r3, #1
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6859      	ldr	r1, [r3, #4]
 80032a2:	460b      	mov	r3, r1
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	440b      	add	r3, r1
 80032a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80032ac:	3301      	adds	r3, #1
 80032ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032b6:	e00f      	b.n	80032d8 <HAL_I2C_Init+0x1dc>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	1e58      	subs	r0, r3, #1
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6859      	ldr	r1, [r3, #4]
 80032c0:	460b      	mov	r3, r1
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	440b      	add	r3, r1
 80032c6:	0099      	lsls	r1, r3, #2
 80032c8:	440b      	add	r3, r1
 80032ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80032ce:	3301      	adds	r3, #1
 80032d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032d8:	6879      	ldr	r1, [r7, #4]
 80032da:	6809      	ldr	r1, [r1, #0]
 80032dc:	4313      	orrs	r3, r2
 80032de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	69da      	ldr	r2, [r3, #28]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a1b      	ldr	r3, [r3, #32]
 80032f2:	431a      	orrs	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	430a      	orrs	r2, r1
 80032fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003306:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	6911      	ldr	r1, [r2, #16]
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	68d2      	ldr	r2, [r2, #12]
 8003312:	4311      	orrs	r1, r2
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	6812      	ldr	r2, [r2, #0]
 8003318:	430b      	orrs	r3, r1
 800331a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	695a      	ldr	r2, [r3, #20]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	431a      	orrs	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	430a      	orrs	r2, r1
 8003336:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f042 0201 	orr.w	r2, r2, #1
 8003346:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2220      	movs	r2, #32
 8003352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	000186a0 	.word	0x000186a0
 8003374:	001e847f 	.word	0x001e847f
 8003378:	003d08ff 	.word	0x003d08ff
 800337c:	431bde83 	.word	0x431bde83
 8003380:	10624dd3 	.word	0x10624dd3

08003384 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b088      	sub	sp, #32
 8003388:	af02      	add	r7, sp, #8
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	4608      	mov	r0, r1
 800338e:	4611      	mov	r1, r2
 8003390:	461a      	mov	r2, r3
 8003392:	4603      	mov	r3, r0
 8003394:	817b      	strh	r3, [r7, #10]
 8003396:	460b      	mov	r3, r1
 8003398:	813b      	strh	r3, [r7, #8]
 800339a:	4613      	mov	r3, r2
 800339c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800339e:	f7ff fb9b 	bl	8002ad8 <HAL_GetTick>
 80033a2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	2b20      	cmp	r3, #32
 80033ae:	f040 80d9 	bne.w	8003564 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	9300      	str	r3, [sp, #0]
 80033b6:	2319      	movs	r3, #25
 80033b8:	2201      	movs	r2, #1
 80033ba:	496d      	ldr	r1, [pc, #436]	; (8003570 <HAL_I2C_Mem_Write+0x1ec>)
 80033bc:	68f8      	ldr	r0, [r7, #12]
 80033be:	f000 f971 	bl	80036a4 <I2C_WaitOnFlagUntilTimeout>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d001      	beq.n	80033cc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80033c8:	2302      	movs	r3, #2
 80033ca:	e0cc      	b.n	8003566 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d101      	bne.n	80033da <HAL_I2C_Mem_Write+0x56>
 80033d6:	2302      	movs	r3, #2
 80033d8:	e0c5      	b.n	8003566 <HAL_I2C_Mem_Write+0x1e2>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2201      	movs	r2, #1
 80033de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0301 	and.w	r3, r3, #1
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d007      	beq.n	8003400 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f042 0201 	orr.w	r2, r2, #1
 80033fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800340e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2221      	movs	r2, #33	; 0x21
 8003414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2240      	movs	r2, #64	; 0x40
 800341c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6a3a      	ldr	r2, [r7, #32]
 800342a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003430:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003436:	b29a      	uxth	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	4a4d      	ldr	r2, [pc, #308]	; (8003574 <HAL_I2C_Mem_Write+0x1f0>)
 8003440:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003442:	88f8      	ldrh	r0, [r7, #6]
 8003444:	893a      	ldrh	r2, [r7, #8]
 8003446:	8979      	ldrh	r1, [r7, #10]
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	9301      	str	r3, [sp, #4]
 800344c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800344e:	9300      	str	r3, [sp, #0]
 8003450:	4603      	mov	r3, r0
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f000 f890 	bl	8003578 <I2C_RequestMemoryWrite>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d052      	beq.n	8003504 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e081      	b.n	8003566 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003462:	697a      	ldr	r2, [r7, #20]
 8003464:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f000 f9f2 	bl	8003850 <I2C_WaitOnTXEFlagUntilTimeout>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00d      	beq.n	800348e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003476:	2b04      	cmp	r3, #4
 8003478:	d107      	bne.n	800348a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003488:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e06b      	b.n	8003566 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003492:	781a      	ldrb	r2, [r3, #0]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349e:	1c5a      	adds	r2, r3, #1
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a8:	3b01      	subs	r3, #1
 80034aa:	b29a      	uxth	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	3b01      	subs	r3, #1
 80034b8:	b29a      	uxth	r2, r3
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	695b      	ldr	r3, [r3, #20]
 80034c4:	f003 0304 	and.w	r3, r3, #4
 80034c8:	2b04      	cmp	r3, #4
 80034ca:	d11b      	bne.n	8003504 <HAL_I2C_Mem_Write+0x180>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d017      	beq.n	8003504 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d8:	781a      	ldrb	r2, [r3, #0]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e4:	1c5a      	adds	r2, r3, #1
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ee:	3b01      	subs	r3, #1
 80034f0:	b29a      	uxth	r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	3b01      	subs	r3, #1
 80034fe:	b29a      	uxth	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1aa      	bne.n	8003462 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800350c:	697a      	ldr	r2, [r7, #20]
 800350e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	f000 f9de 	bl	80038d2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00d      	beq.n	8003538 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003520:	2b04      	cmp	r3, #4
 8003522:	d107      	bne.n	8003534 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003532:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e016      	b.n	8003566 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003546:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2220      	movs	r2, #32
 800354c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003560:	2300      	movs	r3, #0
 8003562:	e000      	b.n	8003566 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003564:	2302      	movs	r3, #2
  }
}
 8003566:	4618      	mov	r0, r3
 8003568:	3718      	adds	r7, #24
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	00100002 	.word	0x00100002
 8003574:	ffff0000 	.word	0xffff0000

08003578 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b088      	sub	sp, #32
 800357c:	af02      	add	r7, sp, #8
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	4608      	mov	r0, r1
 8003582:	4611      	mov	r1, r2
 8003584:	461a      	mov	r2, r3
 8003586:	4603      	mov	r3, r0
 8003588:	817b      	strh	r3, [r7, #10]
 800358a:	460b      	mov	r3, r1
 800358c:	813b      	strh	r3, [r7, #8]
 800358e:	4613      	mov	r3, r2
 8003590:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a4:	9300      	str	r3, [sp, #0]
 80035a6:	6a3b      	ldr	r3, [r7, #32]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035ae:	68f8      	ldr	r0, [r7, #12]
 80035b0:	f000 f878 	bl	80036a4 <I2C_WaitOnFlagUntilTimeout>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00d      	beq.n	80035d6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035c8:	d103      	bne.n	80035d2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e05f      	b.n	8003696 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035d6:	897b      	ldrh	r3, [r7, #10]
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	461a      	mov	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80035e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e8:	6a3a      	ldr	r2, [r7, #32]
 80035ea:	492d      	ldr	r1, [pc, #180]	; (80036a0 <I2C_RequestMemoryWrite+0x128>)
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	f000 f8b0 	bl	8003752 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d001      	beq.n	80035fc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e04c      	b.n	8003696 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035fc:	2300      	movs	r3, #0
 80035fe:	617b      	str	r3, [r7, #20]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	617b      	str	r3, [r7, #20]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	699b      	ldr	r3, [r3, #24]
 800360e:	617b      	str	r3, [r7, #20]
 8003610:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003614:	6a39      	ldr	r1, [r7, #32]
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	f000 f91a 	bl	8003850 <I2C_WaitOnTXEFlagUntilTimeout>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00d      	beq.n	800363e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003626:	2b04      	cmp	r3, #4
 8003628:	d107      	bne.n	800363a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003638:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e02b      	b.n	8003696 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800363e:	88fb      	ldrh	r3, [r7, #6]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d105      	bne.n	8003650 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003644:	893b      	ldrh	r3, [r7, #8]
 8003646:	b2da      	uxtb	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	611a      	str	r2, [r3, #16]
 800364e:	e021      	b.n	8003694 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003650:	893b      	ldrh	r3, [r7, #8]
 8003652:	0a1b      	lsrs	r3, r3, #8
 8003654:	b29b      	uxth	r3, r3
 8003656:	b2da      	uxtb	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800365e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003660:	6a39      	ldr	r1, [r7, #32]
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f000 f8f4 	bl	8003850 <I2C_WaitOnTXEFlagUntilTimeout>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00d      	beq.n	800368a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003672:	2b04      	cmp	r3, #4
 8003674:	d107      	bne.n	8003686 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003684:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e005      	b.n	8003696 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800368a:	893b      	ldrh	r3, [r7, #8]
 800368c:	b2da      	uxtb	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3718      	adds	r7, #24
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	00010002 	.word	0x00010002

080036a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	603b      	str	r3, [r7, #0]
 80036b0:	4613      	mov	r3, r2
 80036b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036b4:	e025      	b.n	8003702 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036bc:	d021      	beq.n	8003702 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036be:	f7ff fa0b 	bl	8002ad8 <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	683a      	ldr	r2, [r7, #0]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d302      	bcc.n	80036d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d116      	bne.n	8003702 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2220      	movs	r2, #32
 80036de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ee:	f043 0220 	orr.w	r2, r3, #32
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e023      	b.n	800374a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	0c1b      	lsrs	r3, r3, #16
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b01      	cmp	r3, #1
 800370a:	d10d      	bne.n	8003728 <I2C_WaitOnFlagUntilTimeout+0x84>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	43da      	mvns	r2, r3
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	4013      	ands	r3, r2
 8003718:	b29b      	uxth	r3, r3
 800371a:	2b00      	cmp	r3, #0
 800371c:	bf0c      	ite	eq
 800371e:	2301      	moveq	r3, #1
 8003720:	2300      	movne	r3, #0
 8003722:	b2db      	uxtb	r3, r3
 8003724:	461a      	mov	r2, r3
 8003726:	e00c      	b.n	8003742 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	43da      	mvns	r2, r3
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	4013      	ands	r3, r2
 8003734:	b29b      	uxth	r3, r3
 8003736:	2b00      	cmp	r3, #0
 8003738:	bf0c      	ite	eq
 800373a:	2301      	moveq	r3, #1
 800373c:	2300      	movne	r3, #0
 800373e:	b2db      	uxtb	r3, r3
 8003740:	461a      	mov	r2, r3
 8003742:	79fb      	ldrb	r3, [r7, #7]
 8003744:	429a      	cmp	r2, r3
 8003746:	d0b6      	beq.n	80036b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3710      	adds	r7, #16
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003752:	b580      	push	{r7, lr}
 8003754:	b084      	sub	sp, #16
 8003756:	af00      	add	r7, sp, #0
 8003758:	60f8      	str	r0, [r7, #12]
 800375a:	60b9      	str	r1, [r7, #8]
 800375c:	607a      	str	r2, [r7, #4]
 800375e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003760:	e051      	b.n	8003806 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	695b      	ldr	r3, [r3, #20]
 8003768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800376c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003770:	d123      	bne.n	80037ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003780:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800378a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2220      	movs	r2, #32
 8003796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	f043 0204 	orr.w	r2, r3, #4
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e046      	b.n	8003848 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037c0:	d021      	beq.n	8003806 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037c2:	f7ff f989 	bl	8002ad8 <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d302      	bcc.n	80037d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d116      	bne.n	8003806 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2220      	movs	r2, #32
 80037e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f2:	f043 0220 	orr.w	r2, r3, #32
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e020      	b.n	8003848 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	0c1b      	lsrs	r3, r3, #16
 800380a:	b2db      	uxtb	r3, r3
 800380c:	2b01      	cmp	r3, #1
 800380e:	d10c      	bne.n	800382a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	43da      	mvns	r2, r3
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	4013      	ands	r3, r2
 800381c:	b29b      	uxth	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	bf14      	ite	ne
 8003822:	2301      	movne	r3, #1
 8003824:	2300      	moveq	r3, #0
 8003826:	b2db      	uxtb	r3, r3
 8003828:	e00b      	b.n	8003842 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	43da      	mvns	r2, r3
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	4013      	ands	r3, r2
 8003836:	b29b      	uxth	r3, r3
 8003838:	2b00      	cmp	r3, #0
 800383a:	bf14      	ite	ne
 800383c:	2301      	movne	r3, #1
 800383e:	2300      	moveq	r3, #0
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	d18d      	bne.n	8003762 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	3710      	adds	r7, #16
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800385c:	e02d      	b.n	80038ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800385e:	68f8      	ldr	r0, [r7, #12]
 8003860:	f000 f878 	bl	8003954 <I2C_IsAcknowledgeFailed>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e02d      	b.n	80038ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003874:	d021      	beq.n	80038ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003876:	f7ff f92f 	bl	8002ad8 <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	68ba      	ldr	r2, [r7, #8]
 8003882:	429a      	cmp	r2, r3
 8003884:	d302      	bcc.n	800388c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d116      	bne.n	80038ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2220      	movs	r2, #32
 8003896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a6:	f043 0220 	orr.w	r2, r3, #32
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e007      	b.n	80038ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c4:	2b80      	cmp	r3, #128	; 0x80
 80038c6:	d1ca      	bne.n	800385e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b084      	sub	sp, #16
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	60f8      	str	r0, [r7, #12]
 80038da:	60b9      	str	r1, [r7, #8]
 80038dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038de:	e02d      	b.n	800393c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038e0:	68f8      	ldr	r0, [r7, #12]
 80038e2:	f000 f837 	bl	8003954 <I2C_IsAcknowledgeFailed>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d001      	beq.n	80038f0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e02d      	b.n	800394c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038f6:	d021      	beq.n	800393c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038f8:	f7ff f8ee 	bl	8002ad8 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	68ba      	ldr	r2, [r7, #8]
 8003904:	429a      	cmp	r2, r3
 8003906:	d302      	bcc.n	800390e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d116      	bne.n	800393c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2200      	movs	r2, #0
 8003912:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2220      	movs	r2, #32
 8003918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003928:	f043 0220 	orr.w	r2, r3, #32
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e007      	b.n	800394c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	f003 0304 	and.w	r3, r3, #4
 8003946:	2b04      	cmp	r3, #4
 8003948:	d1ca      	bne.n	80038e0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800394a:	2300      	movs	r3, #0
}
 800394c:	4618      	mov	r0, r3
 800394e:	3710      	adds	r7, #16
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003966:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800396a:	d11b      	bne.n	80039a4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003974:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2220      	movs	r2, #32
 8003980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003990:	f043 0204 	orr.w	r2, r3, #4
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e000      	b.n	80039a6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	370c      	adds	r7, #12
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bc80      	pop	{r7}
 80039ae:	4770      	bx	lr

080039b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b086      	sub	sp, #24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d101      	bne.n	80039c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e26c      	b.n	8003e9c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f000 8087 	beq.w	8003ade <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80039d0:	4b92      	ldr	r3, [pc, #584]	; (8003c1c <HAL_RCC_OscConfig+0x26c>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f003 030c 	and.w	r3, r3, #12
 80039d8:	2b04      	cmp	r3, #4
 80039da:	d00c      	beq.n	80039f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80039dc:	4b8f      	ldr	r3, [pc, #572]	; (8003c1c <HAL_RCC_OscConfig+0x26c>)
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f003 030c 	and.w	r3, r3, #12
 80039e4:	2b08      	cmp	r3, #8
 80039e6:	d112      	bne.n	8003a0e <HAL_RCC_OscConfig+0x5e>
 80039e8:	4b8c      	ldr	r3, [pc, #560]	; (8003c1c <HAL_RCC_OscConfig+0x26c>)
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039f4:	d10b      	bne.n	8003a0e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039f6:	4b89      	ldr	r3, [pc, #548]	; (8003c1c <HAL_RCC_OscConfig+0x26c>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d06c      	beq.n	8003adc <HAL_RCC_OscConfig+0x12c>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d168      	bne.n	8003adc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e246      	b.n	8003e9c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a16:	d106      	bne.n	8003a26 <HAL_RCC_OscConfig+0x76>
 8003a18:	4b80      	ldr	r3, [pc, #512]	; (8003c1c <HAL_RCC_OscConfig+0x26c>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a7f      	ldr	r2, [pc, #508]	; (8003c1c <HAL_RCC_OscConfig+0x26c>)
 8003a1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a22:	6013      	str	r3, [r2, #0]
 8003a24:	e02e      	b.n	8003a84 <HAL_RCC_OscConfig+0xd4>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d10c      	bne.n	8003a48 <HAL_RCC_OscConfig+0x98>
 8003a2e:	4b7b      	ldr	r3, [pc, #492]	; (8003c1c <HAL_RCC_OscConfig+0x26c>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a7a      	ldr	r2, [pc, #488]	; (8003c1c <HAL_RCC_OscConfig+0x26c>)
 8003a34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a38:	6013      	str	r3, [r2, #0]
 8003a3a:	4b78      	ldr	r3, [pc, #480]	; (8003c1c <HAL_RCC_OscConfig+0x26c>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a77      	ldr	r2, [pc, #476]	; (8003c1c <HAL_RCC_OscConfig+0x26c>)
 8003a40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a44:	6013      	str	r3, [r2, #0]
 8003a46:	e01d      	b.n	8003a84 <HAL_RCC_OscConfig+0xd4>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a50:	d10c      	bne.n	8003a6c <HAL_RCC_OscConfig+0xbc>
 8003a52:	4b72      	ldr	r3, [pc, #456]	; (8003c1c <HAL_RCC_OscConfig+0x26c>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a71      	ldr	r2, [pc, #452]	; (8003c1c <HAL_RCC_OscConfig+0x26c>)
 8003a58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a5c:	6013      	str	r3, [r2, #0]
 8003a5e:	4b6f      	ldr	r3, [pc, #444]	; (8003c1c <HAL_RCC_OscConfig+0x26c>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a6e      	ldr	r2, [pc, #440]	; (8003c1c <HAL_RCC_OscConfig+0x26c>)
 8003a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a68:	6013      	str	r3, [r2, #0]
 8003a6a:	e00b      	b.n	8003a84 <HAL_RCC_OscConfig+0xd4>
 8003a6c:	4b6b      	ldr	r3, [pc, #428]	; (8003c1c <HAL_RCC_OscConfig+0x26c>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a6a      	ldr	r2, [pc, #424]	; (8003c1c <HAL_RCC_OscConfig+0x26c>)
 8003a72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a76:	6013      	str	r3, [r2, #0]
 8003a78:	4b68      	ldr	r3, [pc, #416]	; (8003c1c <HAL_RCC_OscConfig+0x26c>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a67      	ldr	r2, [pc, #412]	; (8003c1c <HAL_RCC_OscConfig+0x26c>)
 8003a7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a82:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d013      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a8c:	f7ff f824 	bl	8002ad8 <HAL_GetTick>
 8003a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a92:	e008      	b.n	8003aa6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a94:	f7ff f820 	bl	8002ad8 <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	2b64      	cmp	r3, #100	; 0x64
 8003aa0:	d901      	bls.n	8003aa6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e1fa      	b.n	8003e9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aa6:	4b5d      	ldr	r3, [pc, #372]	; (8003c1c <HAL_RCC_OscConfig+0x26c>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d0f0      	beq.n	8003a94 <HAL_RCC_OscConfig+0xe4>
 8003ab2:	e014      	b.n	8003ade <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab4:	f7ff f810 	bl	8002ad8 <HAL_GetTick>
 8003ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aba:	e008      	b.n	8003ace <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003abc:	f7ff f80c 	bl	8002ad8 <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	2b64      	cmp	r3, #100	; 0x64
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e1e6      	b.n	8003e9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ace:	4b53      	ldr	r3, [pc, #332]	; (8003c1c <HAL_RCC_OscConfig+0x26c>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1f0      	bne.n	8003abc <HAL_RCC_OscConfig+0x10c>
 8003ada:	e000      	b.n	8003ade <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003adc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d063      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003aea:	4b4c      	ldr	r3, [pc, #304]	; (8003c1c <HAL_RCC_OscConfig+0x26c>)
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f003 030c 	and.w	r3, r3, #12
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00b      	beq.n	8003b0e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003af6:	4b49      	ldr	r3, [pc, #292]	; (8003c1c <HAL_RCC_OscConfig+0x26c>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f003 030c 	and.w	r3, r3, #12
 8003afe:	2b08      	cmp	r3, #8
 8003b00:	d11c      	bne.n	8003b3c <HAL_RCC_OscConfig+0x18c>
 8003b02:	4b46      	ldr	r3, [pc, #280]	; (8003c1c <HAL_RCC_OscConfig+0x26c>)
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d116      	bne.n	8003b3c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b0e:	4b43      	ldr	r3, [pc, #268]	; (8003c1c <HAL_RCC_OscConfig+0x26c>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d005      	beq.n	8003b26 <HAL_RCC_OscConfig+0x176>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d001      	beq.n	8003b26 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e1ba      	b.n	8003e9c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b26:	4b3d      	ldr	r3, [pc, #244]	; (8003c1c <HAL_RCC_OscConfig+0x26c>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	695b      	ldr	r3, [r3, #20]
 8003b32:	00db      	lsls	r3, r3, #3
 8003b34:	4939      	ldr	r1, [pc, #228]	; (8003c1c <HAL_RCC_OscConfig+0x26c>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b3a:	e03a      	b.n	8003bb2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d020      	beq.n	8003b86 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b44:	4b36      	ldr	r3, [pc, #216]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003b46:	2201      	movs	r2, #1
 8003b48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b4a:	f7fe ffc5 	bl	8002ad8 <HAL_GetTick>
 8003b4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b50:	e008      	b.n	8003b64 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b52:	f7fe ffc1 	bl	8002ad8 <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d901      	bls.n	8003b64 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e19b      	b.n	8003e9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b64:	4b2d      	ldr	r3, [pc, #180]	; (8003c1c <HAL_RCC_OscConfig+0x26c>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0302 	and.w	r3, r3, #2
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d0f0      	beq.n	8003b52 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b70:	4b2a      	ldr	r3, [pc, #168]	; (8003c1c <HAL_RCC_OscConfig+0x26c>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	695b      	ldr	r3, [r3, #20]
 8003b7c:	00db      	lsls	r3, r3, #3
 8003b7e:	4927      	ldr	r1, [pc, #156]	; (8003c1c <HAL_RCC_OscConfig+0x26c>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	600b      	str	r3, [r1, #0]
 8003b84:	e015      	b.n	8003bb2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b86:	4b26      	ldr	r3, [pc, #152]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b8c:	f7fe ffa4 	bl	8002ad8 <HAL_GetTick>
 8003b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b92:	e008      	b.n	8003ba6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b94:	f7fe ffa0 	bl	8002ad8 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e17a      	b.n	8003e9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ba6:	4b1d      	ldr	r3, [pc, #116]	; (8003c1c <HAL_RCC_OscConfig+0x26c>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1f0      	bne.n	8003b94 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0308 	and.w	r3, r3, #8
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d03a      	beq.n	8003c34 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d019      	beq.n	8003bfa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bc6:	4b17      	ldr	r3, [pc, #92]	; (8003c24 <HAL_RCC_OscConfig+0x274>)
 8003bc8:	2201      	movs	r2, #1
 8003bca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bcc:	f7fe ff84 	bl	8002ad8 <HAL_GetTick>
 8003bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bd2:	e008      	b.n	8003be6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bd4:	f7fe ff80 	bl	8002ad8 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e15a      	b.n	8003e9c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003be6:	4b0d      	ldr	r3, [pc, #52]	; (8003c1c <HAL_RCC_OscConfig+0x26c>)
 8003be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bea:	f003 0302 	and.w	r3, r3, #2
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d0f0      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003bf2:	2001      	movs	r0, #1
 8003bf4:	f000 fac4 	bl	8004180 <RCC_Delay>
 8003bf8:	e01c      	b.n	8003c34 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bfa:	4b0a      	ldr	r3, [pc, #40]	; (8003c24 <HAL_RCC_OscConfig+0x274>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c00:	f7fe ff6a 	bl	8002ad8 <HAL_GetTick>
 8003c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c06:	e00f      	b.n	8003c28 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c08:	f7fe ff66 	bl	8002ad8 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d908      	bls.n	8003c28 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e140      	b.n	8003e9c <HAL_RCC_OscConfig+0x4ec>
 8003c1a:	bf00      	nop
 8003c1c:	40021000 	.word	0x40021000
 8003c20:	42420000 	.word	0x42420000
 8003c24:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c28:	4b9e      	ldr	r3, [pc, #632]	; (8003ea4 <HAL_RCC_OscConfig+0x4f4>)
 8003c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1e9      	bne.n	8003c08 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0304 	and.w	r3, r3, #4
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f000 80a6 	beq.w	8003d8e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c42:	2300      	movs	r3, #0
 8003c44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c46:	4b97      	ldr	r3, [pc, #604]	; (8003ea4 <HAL_RCC_OscConfig+0x4f4>)
 8003c48:	69db      	ldr	r3, [r3, #28]
 8003c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d10d      	bne.n	8003c6e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c52:	4b94      	ldr	r3, [pc, #592]	; (8003ea4 <HAL_RCC_OscConfig+0x4f4>)
 8003c54:	69db      	ldr	r3, [r3, #28]
 8003c56:	4a93      	ldr	r2, [pc, #588]	; (8003ea4 <HAL_RCC_OscConfig+0x4f4>)
 8003c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c5c:	61d3      	str	r3, [r2, #28]
 8003c5e:	4b91      	ldr	r3, [pc, #580]	; (8003ea4 <HAL_RCC_OscConfig+0x4f4>)
 8003c60:	69db      	ldr	r3, [r3, #28]
 8003c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c66:	60bb      	str	r3, [r7, #8]
 8003c68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c6e:	4b8e      	ldr	r3, [pc, #568]	; (8003ea8 <HAL_RCC_OscConfig+0x4f8>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d118      	bne.n	8003cac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c7a:	4b8b      	ldr	r3, [pc, #556]	; (8003ea8 <HAL_RCC_OscConfig+0x4f8>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a8a      	ldr	r2, [pc, #552]	; (8003ea8 <HAL_RCC_OscConfig+0x4f8>)
 8003c80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c86:	f7fe ff27 	bl	8002ad8 <HAL_GetTick>
 8003c8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c8c:	e008      	b.n	8003ca0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c8e:	f7fe ff23 	bl	8002ad8 <HAL_GetTick>
 8003c92:	4602      	mov	r2, r0
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	2b64      	cmp	r3, #100	; 0x64
 8003c9a:	d901      	bls.n	8003ca0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e0fd      	b.n	8003e9c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ca0:	4b81      	ldr	r3, [pc, #516]	; (8003ea8 <HAL_RCC_OscConfig+0x4f8>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d0f0      	beq.n	8003c8e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d106      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x312>
 8003cb4:	4b7b      	ldr	r3, [pc, #492]	; (8003ea4 <HAL_RCC_OscConfig+0x4f4>)
 8003cb6:	6a1b      	ldr	r3, [r3, #32]
 8003cb8:	4a7a      	ldr	r2, [pc, #488]	; (8003ea4 <HAL_RCC_OscConfig+0x4f4>)
 8003cba:	f043 0301 	orr.w	r3, r3, #1
 8003cbe:	6213      	str	r3, [r2, #32]
 8003cc0:	e02d      	b.n	8003d1e <HAL_RCC_OscConfig+0x36e>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d10c      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x334>
 8003cca:	4b76      	ldr	r3, [pc, #472]	; (8003ea4 <HAL_RCC_OscConfig+0x4f4>)
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	4a75      	ldr	r2, [pc, #468]	; (8003ea4 <HAL_RCC_OscConfig+0x4f4>)
 8003cd0:	f023 0301 	bic.w	r3, r3, #1
 8003cd4:	6213      	str	r3, [r2, #32]
 8003cd6:	4b73      	ldr	r3, [pc, #460]	; (8003ea4 <HAL_RCC_OscConfig+0x4f4>)
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	4a72      	ldr	r2, [pc, #456]	; (8003ea4 <HAL_RCC_OscConfig+0x4f4>)
 8003cdc:	f023 0304 	bic.w	r3, r3, #4
 8003ce0:	6213      	str	r3, [r2, #32]
 8003ce2:	e01c      	b.n	8003d1e <HAL_RCC_OscConfig+0x36e>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	2b05      	cmp	r3, #5
 8003cea:	d10c      	bne.n	8003d06 <HAL_RCC_OscConfig+0x356>
 8003cec:	4b6d      	ldr	r3, [pc, #436]	; (8003ea4 <HAL_RCC_OscConfig+0x4f4>)
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	4a6c      	ldr	r2, [pc, #432]	; (8003ea4 <HAL_RCC_OscConfig+0x4f4>)
 8003cf2:	f043 0304 	orr.w	r3, r3, #4
 8003cf6:	6213      	str	r3, [r2, #32]
 8003cf8:	4b6a      	ldr	r3, [pc, #424]	; (8003ea4 <HAL_RCC_OscConfig+0x4f4>)
 8003cfa:	6a1b      	ldr	r3, [r3, #32]
 8003cfc:	4a69      	ldr	r2, [pc, #420]	; (8003ea4 <HAL_RCC_OscConfig+0x4f4>)
 8003cfe:	f043 0301 	orr.w	r3, r3, #1
 8003d02:	6213      	str	r3, [r2, #32]
 8003d04:	e00b      	b.n	8003d1e <HAL_RCC_OscConfig+0x36e>
 8003d06:	4b67      	ldr	r3, [pc, #412]	; (8003ea4 <HAL_RCC_OscConfig+0x4f4>)
 8003d08:	6a1b      	ldr	r3, [r3, #32]
 8003d0a:	4a66      	ldr	r2, [pc, #408]	; (8003ea4 <HAL_RCC_OscConfig+0x4f4>)
 8003d0c:	f023 0301 	bic.w	r3, r3, #1
 8003d10:	6213      	str	r3, [r2, #32]
 8003d12:	4b64      	ldr	r3, [pc, #400]	; (8003ea4 <HAL_RCC_OscConfig+0x4f4>)
 8003d14:	6a1b      	ldr	r3, [r3, #32]
 8003d16:	4a63      	ldr	r2, [pc, #396]	; (8003ea4 <HAL_RCC_OscConfig+0x4f4>)
 8003d18:	f023 0304 	bic.w	r3, r3, #4
 8003d1c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d015      	beq.n	8003d52 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d26:	f7fe fed7 	bl	8002ad8 <HAL_GetTick>
 8003d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d2c:	e00a      	b.n	8003d44 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d2e:	f7fe fed3 	bl	8002ad8 <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d901      	bls.n	8003d44 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e0ab      	b.n	8003e9c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d44:	4b57      	ldr	r3, [pc, #348]	; (8003ea4 <HAL_RCC_OscConfig+0x4f4>)
 8003d46:	6a1b      	ldr	r3, [r3, #32]
 8003d48:	f003 0302 	and.w	r3, r3, #2
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d0ee      	beq.n	8003d2e <HAL_RCC_OscConfig+0x37e>
 8003d50:	e014      	b.n	8003d7c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d52:	f7fe fec1 	bl	8002ad8 <HAL_GetTick>
 8003d56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d58:	e00a      	b.n	8003d70 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d5a:	f7fe febd 	bl	8002ad8 <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d901      	bls.n	8003d70 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e095      	b.n	8003e9c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d70:	4b4c      	ldr	r3, [pc, #304]	; (8003ea4 <HAL_RCC_OscConfig+0x4f4>)
 8003d72:	6a1b      	ldr	r3, [r3, #32]
 8003d74:	f003 0302 	and.w	r3, r3, #2
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1ee      	bne.n	8003d5a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d7c:	7dfb      	ldrb	r3, [r7, #23]
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d105      	bne.n	8003d8e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d82:	4b48      	ldr	r3, [pc, #288]	; (8003ea4 <HAL_RCC_OscConfig+0x4f4>)
 8003d84:	69db      	ldr	r3, [r3, #28]
 8003d86:	4a47      	ldr	r2, [pc, #284]	; (8003ea4 <HAL_RCC_OscConfig+0x4f4>)
 8003d88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d8c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	69db      	ldr	r3, [r3, #28]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f000 8081 	beq.w	8003e9a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d98:	4b42      	ldr	r3, [pc, #264]	; (8003ea4 <HAL_RCC_OscConfig+0x4f4>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f003 030c 	and.w	r3, r3, #12
 8003da0:	2b08      	cmp	r3, #8
 8003da2:	d061      	beq.n	8003e68 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	69db      	ldr	r3, [r3, #28]
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d146      	bne.n	8003e3a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dac:	4b3f      	ldr	r3, [pc, #252]	; (8003eac <HAL_RCC_OscConfig+0x4fc>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db2:	f7fe fe91 	bl	8002ad8 <HAL_GetTick>
 8003db6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003db8:	e008      	b.n	8003dcc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dba:	f7fe fe8d 	bl	8002ad8 <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d901      	bls.n	8003dcc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e067      	b.n	8003e9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dcc:	4b35      	ldr	r3, [pc, #212]	; (8003ea4 <HAL_RCC_OscConfig+0x4f4>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d1f0      	bne.n	8003dba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a1b      	ldr	r3, [r3, #32]
 8003ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003de0:	d108      	bne.n	8003df4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003de2:	4b30      	ldr	r3, [pc, #192]	; (8003ea4 <HAL_RCC_OscConfig+0x4f4>)
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	492d      	ldr	r1, [pc, #180]	; (8003ea4 <HAL_RCC_OscConfig+0x4f4>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003df4:	4b2b      	ldr	r3, [pc, #172]	; (8003ea4 <HAL_RCC_OscConfig+0x4f4>)
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a19      	ldr	r1, [r3, #32]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e04:	430b      	orrs	r3, r1
 8003e06:	4927      	ldr	r1, [pc, #156]	; (8003ea4 <HAL_RCC_OscConfig+0x4f4>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e0c:	4b27      	ldr	r3, [pc, #156]	; (8003eac <HAL_RCC_OscConfig+0x4fc>)
 8003e0e:	2201      	movs	r2, #1
 8003e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e12:	f7fe fe61 	bl	8002ad8 <HAL_GetTick>
 8003e16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e18:	e008      	b.n	8003e2c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e1a:	f7fe fe5d 	bl	8002ad8 <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d901      	bls.n	8003e2c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e037      	b.n	8003e9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e2c:	4b1d      	ldr	r3, [pc, #116]	; (8003ea4 <HAL_RCC_OscConfig+0x4f4>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d0f0      	beq.n	8003e1a <HAL_RCC_OscConfig+0x46a>
 8003e38:	e02f      	b.n	8003e9a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e3a:	4b1c      	ldr	r3, [pc, #112]	; (8003eac <HAL_RCC_OscConfig+0x4fc>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e40:	f7fe fe4a 	bl	8002ad8 <HAL_GetTick>
 8003e44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e46:	e008      	b.n	8003e5a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e48:	f7fe fe46 	bl	8002ad8 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d901      	bls.n	8003e5a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e020      	b.n	8003e9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e5a:	4b12      	ldr	r3, [pc, #72]	; (8003ea4 <HAL_RCC_OscConfig+0x4f4>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1f0      	bne.n	8003e48 <HAL_RCC_OscConfig+0x498>
 8003e66:	e018      	b.n	8003e9a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	69db      	ldr	r3, [r3, #28]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d101      	bne.n	8003e74 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e013      	b.n	8003e9c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003e74:	4b0b      	ldr	r3, [pc, #44]	; (8003ea4 <HAL_RCC_OscConfig+0x4f4>)
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a1b      	ldr	r3, [r3, #32]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d106      	bne.n	8003e96 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d001      	beq.n	8003e9a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e000      	b.n	8003e9c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3718      	adds	r7, #24
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	40021000 	.word	0x40021000
 8003ea8:	40007000 	.word	0x40007000
 8003eac:	42420060 	.word	0x42420060

08003eb0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d101      	bne.n	8003ec4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e0d0      	b.n	8004066 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ec4:	4b6a      	ldr	r3, [pc, #424]	; (8004070 <HAL_RCC_ClockConfig+0x1c0>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0307 	and.w	r3, r3, #7
 8003ecc:	683a      	ldr	r2, [r7, #0]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d910      	bls.n	8003ef4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ed2:	4b67      	ldr	r3, [pc, #412]	; (8004070 <HAL_RCC_ClockConfig+0x1c0>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f023 0207 	bic.w	r2, r3, #7
 8003eda:	4965      	ldr	r1, [pc, #404]	; (8004070 <HAL_RCC_ClockConfig+0x1c0>)
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ee2:	4b63      	ldr	r3, [pc, #396]	; (8004070 <HAL_RCC_ClockConfig+0x1c0>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0307 	and.w	r3, r3, #7
 8003eea:	683a      	ldr	r2, [r7, #0]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d001      	beq.n	8003ef4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e0b8      	b.n	8004066 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0302 	and.w	r3, r3, #2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d020      	beq.n	8003f42 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0304 	and.w	r3, r3, #4
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d005      	beq.n	8003f18 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f0c:	4b59      	ldr	r3, [pc, #356]	; (8004074 <HAL_RCC_ClockConfig+0x1c4>)
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	4a58      	ldr	r2, [pc, #352]	; (8004074 <HAL_RCC_ClockConfig+0x1c4>)
 8003f12:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003f16:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0308 	and.w	r3, r3, #8
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d005      	beq.n	8003f30 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f24:	4b53      	ldr	r3, [pc, #332]	; (8004074 <HAL_RCC_ClockConfig+0x1c4>)
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	4a52      	ldr	r2, [pc, #328]	; (8004074 <HAL_RCC_ClockConfig+0x1c4>)
 8003f2a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003f2e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f30:	4b50      	ldr	r3, [pc, #320]	; (8004074 <HAL_RCC_ClockConfig+0x1c4>)
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	494d      	ldr	r1, [pc, #308]	; (8004074 <HAL_RCC_ClockConfig+0x1c4>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d040      	beq.n	8003fd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d107      	bne.n	8003f66 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f56:	4b47      	ldr	r3, [pc, #284]	; (8004074 <HAL_RCC_ClockConfig+0x1c4>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d115      	bne.n	8003f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e07f      	b.n	8004066 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d107      	bne.n	8003f7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f6e:	4b41      	ldr	r3, [pc, #260]	; (8004074 <HAL_RCC_ClockConfig+0x1c4>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d109      	bne.n	8003f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e073      	b.n	8004066 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f7e:	4b3d      	ldr	r3, [pc, #244]	; (8004074 <HAL_RCC_ClockConfig+0x1c4>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0302 	and.w	r3, r3, #2
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e06b      	b.n	8004066 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f8e:	4b39      	ldr	r3, [pc, #228]	; (8004074 <HAL_RCC_ClockConfig+0x1c4>)
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f023 0203 	bic.w	r2, r3, #3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	4936      	ldr	r1, [pc, #216]	; (8004074 <HAL_RCC_ClockConfig+0x1c4>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fa0:	f7fe fd9a 	bl	8002ad8 <HAL_GetTick>
 8003fa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fa6:	e00a      	b.n	8003fbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fa8:	f7fe fd96 	bl	8002ad8 <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d901      	bls.n	8003fbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e053      	b.n	8004066 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fbe:	4b2d      	ldr	r3, [pc, #180]	; (8004074 <HAL_RCC_ClockConfig+0x1c4>)
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f003 020c 	and.w	r2, r3, #12
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d1eb      	bne.n	8003fa8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fd0:	4b27      	ldr	r3, [pc, #156]	; (8004070 <HAL_RCC_ClockConfig+0x1c0>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0307 	and.w	r3, r3, #7
 8003fd8:	683a      	ldr	r2, [r7, #0]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d210      	bcs.n	8004000 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fde:	4b24      	ldr	r3, [pc, #144]	; (8004070 <HAL_RCC_ClockConfig+0x1c0>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f023 0207 	bic.w	r2, r3, #7
 8003fe6:	4922      	ldr	r1, [pc, #136]	; (8004070 <HAL_RCC_ClockConfig+0x1c0>)
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fee:	4b20      	ldr	r3, [pc, #128]	; (8004070 <HAL_RCC_ClockConfig+0x1c0>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0307 	and.w	r3, r3, #7
 8003ff6:	683a      	ldr	r2, [r7, #0]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d001      	beq.n	8004000 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e032      	b.n	8004066 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0304 	and.w	r3, r3, #4
 8004008:	2b00      	cmp	r3, #0
 800400a:	d008      	beq.n	800401e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800400c:	4b19      	ldr	r3, [pc, #100]	; (8004074 <HAL_RCC_ClockConfig+0x1c4>)
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	4916      	ldr	r1, [pc, #88]	; (8004074 <HAL_RCC_ClockConfig+0x1c4>)
 800401a:	4313      	orrs	r3, r2
 800401c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0308 	and.w	r3, r3, #8
 8004026:	2b00      	cmp	r3, #0
 8004028:	d009      	beq.n	800403e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800402a:	4b12      	ldr	r3, [pc, #72]	; (8004074 <HAL_RCC_ClockConfig+0x1c4>)
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	00db      	lsls	r3, r3, #3
 8004038:	490e      	ldr	r1, [pc, #56]	; (8004074 <HAL_RCC_ClockConfig+0x1c4>)
 800403a:	4313      	orrs	r3, r2
 800403c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800403e:	f000 f821 	bl	8004084 <HAL_RCC_GetSysClockFreq>
 8004042:	4602      	mov	r2, r0
 8004044:	4b0b      	ldr	r3, [pc, #44]	; (8004074 <HAL_RCC_ClockConfig+0x1c4>)
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	091b      	lsrs	r3, r3, #4
 800404a:	f003 030f 	and.w	r3, r3, #15
 800404e:	490a      	ldr	r1, [pc, #40]	; (8004078 <HAL_RCC_ClockConfig+0x1c8>)
 8004050:	5ccb      	ldrb	r3, [r1, r3]
 8004052:	fa22 f303 	lsr.w	r3, r2, r3
 8004056:	4a09      	ldr	r2, [pc, #36]	; (800407c <HAL_RCC_ClockConfig+0x1cc>)
 8004058:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800405a:	4b09      	ldr	r3, [pc, #36]	; (8004080 <HAL_RCC_ClockConfig+0x1d0>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4618      	mov	r0, r3
 8004060:	f7fe fcf8 	bl	8002a54 <HAL_InitTick>

  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3710      	adds	r7, #16
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	40022000 	.word	0x40022000
 8004074:	40021000 	.word	0x40021000
 8004078:	08004d1c 	.word	0x08004d1c
 800407c:	20000008 	.word	0x20000008
 8004080:	2000002c 	.word	0x2000002c

08004084 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004084:	b490      	push	{r4, r7}
 8004086:	b08a      	sub	sp, #40	; 0x28
 8004088:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800408a:	4b2a      	ldr	r3, [pc, #168]	; (8004134 <HAL_RCC_GetSysClockFreq+0xb0>)
 800408c:	1d3c      	adds	r4, r7, #4
 800408e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004090:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004094:	f240 2301 	movw	r3, #513	; 0x201
 8004098:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800409a:	2300      	movs	r3, #0
 800409c:	61fb      	str	r3, [r7, #28]
 800409e:	2300      	movs	r3, #0
 80040a0:	61bb      	str	r3, [r7, #24]
 80040a2:	2300      	movs	r3, #0
 80040a4:	627b      	str	r3, [r7, #36]	; 0x24
 80040a6:	2300      	movs	r3, #0
 80040a8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80040aa:	2300      	movs	r3, #0
 80040ac:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80040ae:	4b22      	ldr	r3, [pc, #136]	; (8004138 <HAL_RCC_GetSysClockFreq+0xb4>)
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	f003 030c 	and.w	r3, r3, #12
 80040ba:	2b04      	cmp	r3, #4
 80040bc:	d002      	beq.n	80040c4 <HAL_RCC_GetSysClockFreq+0x40>
 80040be:	2b08      	cmp	r3, #8
 80040c0:	d003      	beq.n	80040ca <HAL_RCC_GetSysClockFreq+0x46>
 80040c2:	e02d      	b.n	8004120 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80040c4:	4b1d      	ldr	r3, [pc, #116]	; (800413c <HAL_RCC_GetSysClockFreq+0xb8>)
 80040c6:	623b      	str	r3, [r7, #32]
      break;
 80040c8:	e02d      	b.n	8004126 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	0c9b      	lsrs	r3, r3, #18
 80040ce:	f003 030f 	and.w	r3, r3, #15
 80040d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80040d6:	4413      	add	r3, r2
 80040d8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80040dc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d013      	beq.n	8004110 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80040e8:	4b13      	ldr	r3, [pc, #76]	; (8004138 <HAL_RCC_GetSysClockFreq+0xb4>)
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	0c5b      	lsrs	r3, r3, #17
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80040f6:	4413      	add	r3, r2
 80040f8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80040fc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	4a0e      	ldr	r2, [pc, #56]	; (800413c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004102:	fb02 f203 	mul.w	r2, r2, r3
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	fbb2 f3f3 	udiv	r3, r2, r3
 800410c:	627b      	str	r3, [r7, #36]	; 0x24
 800410e:	e004      	b.n	800411a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	4a0b      	ldr	r2, [pc, #44]	; (8004140 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004114:	fb02 f303 	mul.w	r3, r2, r3
 8004118:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800411a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411c:	623b      	str	r3, [r7, #32]
      break;
 800411e:	e002      	b.n	8004126 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004120:	4b06      	ldr	r3, [pc, #24]	; (800413c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004122:	623b      	str	r3, [r7, #32]
      break;
 8004124:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004126:	6a3b      	ldr	r3, [r7, #32]
}
 8004128:	4618      	mov	r0, r3
 800412a:	3728      	adds	r7, #40	; 0x28
 800412c:	46bd      	mov	sp, r7
 800412e:	bc90      	pop	{r4, r7}
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	08004d0c 	.word	0x08004d0c
 8004138:	40021000 	.word	0x40021000
 800413c:	007a1200 	.word	0x007a1200
 8004140:	003d0900 	.word	0x003d0900

08004144 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004144:	b480      	push	{r7}
 8004146:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004148:	4b02      	ldr	r3, [pc, #8]	; (8004154 <HAL_RCC_GetHCLKFreq+0x10>)
 800414a:	681b      	ldr	r3, [r3, #0]
}
 800414c:	4618      	mov	r0, r3
 800414e:	46bd      	mov	sp, r7
 8004150:	bc80      	pop	{r7}
 8004152:	4770      	bx	lr
 8004154:	20000008 	.word	0x20000008

08004158 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800415c:	f7ff fff2 	bl	8004144 <HAL_RCC_GetHCLKFreq>
 8004160:	4602      	mov	r2, r0
 8004162:	4b05      	ldr	r3, [pc, #20]	; (8004178 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	0a1b      	lsrs	r3, r3, #8
 8004168:	f003 0307 	and.w	r3, r3, #7
 800416c:	4903      	ldr	r1, [pc, #12]	; (800417c <HAL_RCC_GetPCLK1Freq+0x24>)
 800416e:	5ccb      	ldrb	r3, [r1, r3]
 8004170:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004174:	4618      	mov	r0, r3
 8004176:	bd80      	pop	{r7, pc}
 8004178:	40021000 	.word	0x40021000
 800417c:	08004d2c 	.word	0x08004d2c

08004180 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004188:	4b0a      	ldr	r3, [pc, #40]	; (80041b4 <RCC_Delay+0x34>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a0a      	ldr	r2, [pc, #40]	; (80041b8 <RCC_Delay+0x38>)
 800418e:	fba2 2303 	umull	r2, r3, r2, r3
 8004192:	0a5b      	lsrs	r3, r3, #9
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	fb02 f303 	mul.w	r3, r2, r3
 800419a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800419c:	bf00      	nop
  }
  while (Delay --);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	1e5a      	subs	r2, r3, #1
 80041a2:	60fa      	str	r2, [r7, #12]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1f9      	bne.n	800419c <RCC_Delay+0x1c>
}
 80041a8:	bf00      	nop
 80041aa:	bf00      	nop
 80041ac:	3714      	adds	r7, #20
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bc80      	pop	{r7}
 80041b2:	4770      	bx	lr
 80041b4:	20000008 	.word	0x20000008
 80041b8:	10624dd3 	.word	0x10624dd3

080041bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d101      	bne.n	80041ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e041      	b.n	8004252 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d106      	bne.n	80041e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f7fc f992 	bl	800050c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2202      	movs	r2, #2
 80041ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	3304      	adds	r3, #4
 80041f8:	4619      	mov	r1, r3
 80041fa:	4610      	mov	r0, r2
 80041fc:	f000 faa8 	bl	8004750 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3708      	adds	r7, #8
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
	...

0800425c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800425c:	b480      	push	{r7}
 800425e:	b085      	sub	sp, #20
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800426a:	b2db      	uxtb	r3, r3
 800426c:	2b01      	cmp	r3, #1
 800426e:	d001      	beq.n	8004274 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e03a      	b.n	80042ea <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2202      	movs	r2, #2
 8004278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68da      	ldr	r2, [r3, #12]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f042 0201 	orr.w	r2, r2, #1
 800428a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a18      	ldr	r2, [pc, #96]	; (80042f4 <HAL_TIM_Base_Start_IT+0x98>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d00e      	beq.n	80042b4 <HAL_TIM_Base_Start_IT+0x58>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800429e:	d009      	beq.n	80042b4 <HAL_TIM_Base_Start_IT+0x58>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a14      	ldr	r2, [pc, #80]	; (80042f8 <HAL_TIM_Base_Start_IT+0x9c>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d004      	beq.n	80042b4 <HAL_TIM_Base_Start_IT+0x58>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a13      	ldr	r2, [pc, #76]	; (80042fc <HAL_TIM_Base_Start_IT+0xa0>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d111      	bne.n	80042d8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f003 0307 	and.w	r3, r3, #7
 80042be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2b06      	cmp	r3, #6
 80042c4:	d010      	beq.n	80042e8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f042 0201 	orr.w	r2, r2, #1
 80042d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042d6:	e007      	b.n	80042e8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f042 0201 	orr.w	r2, r2, #1
 80042e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3714      	adds	r7, #20
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bc80      	pop	{r7}
 80042f2:	4770      	bx	lr
 80042f4:	40012c00 	.word	0x40012c00
 80042f8:	40000400 	.word	0x40000400
 80042fc:	40000800 	.word	0x40000800

08004300 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68da      	ldr	r2, [r3, #12]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f022 0201 	bic.w	r2, r2, #1
 8004316:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	6a1a      	ldr	r2, [r3, #32]
 800431e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004322:	4013      	ands	r3, r2
 8004324:	2b00      	cmp	r3, #0
 8004326:	d10f      	bne.n	8004348 <HAL_TIM_Base_Stop_IT+0x48>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	6a1a      	ldr	r2, [r3, #32]
 800432e:	f240 4344 	movw	r3, #1092	; 0x444
 8004332:	4013      	ands	r3, r2
 8004334:	2b00      	cmp	r3, #0
 8004336:	d107      	bne.n	8004348 <HAL_TIM_Base_Stop_IT+0x48>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f022 0201 	bic.w	r2, r2, #1
 8004346:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	370c      	adds	r7, #12
 8004356:	46bd      	mov	sp, r7
 8004358:	bc80      	pop	{r7}
 800435a:	4770      	bx	lr

0800435c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	f003 0302 	and.w	r3, r3, #2
 800436e:	2b02      	cmp	r3, #2
 8004370:	d122      	bne.n	80043b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	f003 0302 	and.w	r3, r3, #2
 800437c:	2b02      	cmp	r3, #2
 800437e:	d11b      	bne.n	80043b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f06f 0202 	mvn.w	r2, #2
 8004388:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2201      	movs	r2, #1
 800438e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	699b      	ldr	r3, [r3, #24]
 8004396:	f003 0303 	and.w	r3, r3, #3
 800439a:	2b00      	cmp	r3, #0
 800439c:	d003      	beq.n	80043a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 f9ba 	bl	8004718 <HAL_TIM_IC_CaptureCallback>
 80043a4:	e005      	b.n	80043b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 f9ad 	bl	8004706 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f000 f9bc 	bl	800472a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	f003 0304 	and.w	r3, r3, #4
 80043c2:	2b04      	cmp	r3, #4
 80043c4:	d122      	bne.n	800440c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	f003 0304 	and.w	r3, r3, #4
 80043d0:	2b04      	cmp	r3, #4
 80043d2:	d11b      	bne.n	800440c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f06f 0204 	mvn.w	r2, #4
 80043dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2202      	movs	r2, #2
 80043e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d003      	beq.n	80043fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 f990 	bl	8004718 <HAL_TIM_IC_CaptureCallback>
 80043f8:	e005      	b.n	8004406 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 f983 	bl	8004706 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f000 f992 	bl	800472a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	f003 0308 	and.w	r3, r3, #8
 8004416:	2b08      	cmp	r3, #8
 8004418:	d122      	bne.n	8004460 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	f003 0308 	and.w	r3, r3, #8
 8004424:	2b08      	cmp	r3, #8
 8004426:	d11b      	bne.n	8004460 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f06f 0208 	mvn.w	r2, #8
 8004430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2204      	movs	r2, #4
 8004436:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	69db      	ldr	r3, [r3, #28]
 800443e:	f003 0303 	and.w	r3, r3, #3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d003      	beq.n	800444e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 f966 	bl	8004718 <HAL_TIM_IC_CaptureCallback>
 800444c:	e005      	b.n	800445a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 f959 	bl	8004706 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f000 f968 	bl	800472a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	f003 0310 	and.w	r3, r3, #16
 800446a:	2b10      	cmp	r3, #16
 800446c:	d122      	bne.n	80044b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	f003 0310 	and.w	r3, r3, #16
 8004478:	2b10      	cmp	r3, #16
 800447a:	d11b      	bne.n	80044b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f06f 0210 	mvn.w	r2, #16
 8004484:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2208      	movs	r2, #8
 800448a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	69db      	ldr	r3, [r3, #28]
 8004492:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004496:	2b00      	cmp	r3, #0
 8004498:	d003      	beq.n	80044a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 f93c 	bl	8004718 <HAL_TIM_IC_CaptureCallback>
 80044a0:	e005      	b.n	80044ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 f92f 	bl	8004706 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f000 f93e 	bl	800472a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	f003 0301 	and.w	r3, r3, #1
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d10e      	bne.n	80044e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	f003 0301 	and.w	r3, r3, #1
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d107      	bne.n	80044e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f06f 0201 	mvn.w	r2, #1
 80044d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 f90a 	bl	80046f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ea:	2b80      	cmp	r3, #128	; 0x80
 80044ec:	d10e      	bne.n	800450c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044f8:	2b80      	cmp	r3, #128	; 0x80
 80044fa:	d107      	bne.n	800450c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004504:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 fa81 	bl	8004a0e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004516:	2b40      	cmp	r3, #64	; 0x40
 8004518:	d10e      	bne.n	8004538 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004524:	2b40      	cmp	r3, #64	; 0x40
 8004526:	d107      	bne.n	8004538 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004530:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 f902 	bl	800473c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	f003 0320 	and.w	r3, r3, #32
 8004542:	2b20      	cmp	r3, #32
 8004544:	d10e      	bne.n	8004564 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	f003 0320 	and.w	r3, r3, #32
 8004550:	2b20      	cmp	r3, #32
 8004552:	d107      	bne.n	8004564 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f06f 0220 	mvn.w	r2, #32
 800455c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 fa4c 	bl	80049fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004564:	bf00      	nop
 8004566:	3708      	adds	r7, #8
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800457c:	2b01      	cmp	r3, #1
 800457e:	d101      	bne.n	8004584 <HAL_TIM_ConfigClockSource+0x18>
 8004580:	2302      	movs	r3, #2
 8004582:	e0b3      	b.n	80046ec <HAL_TIM_ConfigClockSource+0x180>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2202      	movs	r2, #2
 8004590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80045a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045aa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68fa      	ldr	r2, [r7, #12]
 80045b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045bc:	d03e      	beq.n	800463c <HAL_TIM_ConfigClockSource+0xd0>
 80045be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045c2:	f200 8087 	bhi.w	80046d4 <HAL_TIM_ConfigClockSource+0x168>
 80045c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045ca:	f000 8085 	beq.w	80046d8 <HAL_TIM_ConfigClockSource+0x16c>
 80045ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045d2:	d87f      	bhi.n	80046d4 <HAL_TIM_ConfigClockSource+0x168>
 80045d4:	2b70      	cmp	r3, #112	; 0x70
 80045d6:	d01a      	beq.n	800460e <HAL_TIM_ConfigClockSource+0xa2>
 80045d8:	2b70      	cmp	r3, #112	; 0x70
 80045da:	d87b      	bhi.n	80046d4 <HAL_TIM_ConfigClockSource+0x168>
 80045dc:	2b60      	cmp	r3, #96	; 0x60
 80045de:	d050      	beq.n	8004682 <HAL_TIM_ConfigClockSource+0x116>
 80045e0:	2b60      	cmp	r3, #96	; 0x60
 80045e2:	d877      	bhi.n	80046d4 <HAL_TIM_ConfigClockSource+0x168>
 80045e4:	2b50      	cmp	r3, #80	; 0x50
 80045e6:	d03c      	beq.n	8004662 <HAL_TIM_ConfigClockSource+0xf6>
 80045e8:	2b50      	cmp	r3, #80	; 0x50
 80045ea:	d873      	bhi.n	80046d4 <HAL_TIM_ConfigClockSource+0x168>
 80045ec:	2b40      	cmp	r3, #64	; 0x40
 80045ee:	d058      	beq.n	80046a2 <HAL_TIM_ConfigClockSource+0x136>
 80045f0:	2b40      	cmp	r3, #64	; 0x40
 80045f2:	d86f      	bhi.n	80046d4 <HAL_TIM_ConfigClockSource+0x168>
 80045f4:	2b30      	cmp	r3, #48	; 0x30
 80045f6:	d064      	beq.n	80046c2 <HAL_TIM_ConfigClockSource+0x156>
 80045f8:	2b30      	cmp	r3, #48	; 0x30
 80045fa:	d86b      	bhi.n	80046d4 <HAL_TIM_ConfigClockSource+0x168>
 80045fc:	2b20      	cmp	r3, #32
 80045fe:	d060      	beq.n	80046c2 <HAL_TIM_ConfigClockSource+0x156>
 8004600:	2b20      	cmp	r3, #32
 8004602:	d867      	bhi.n	80046d4 <HAL_TIM_ConfigClockSource+0x168>
 8004604:	2b00      	cmp	r3, #0
 8004606:	d05c      	beq.n	80046c2 <HAL_TIM_ConfigClockSource+0x156>
 8004608:	2b10      	cmp	r3, #16
 800460a:	d05a      	beq.n	80046c2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800460c:	e062      	b.n	80046d4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6818      	ldr	r0, [r3, #0]
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	6899      	ldr	r1, [r3, #8]
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	685a      	ldr	r2, [r3, #4]
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	f000 f970 	bl	8004902 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004630:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	609a      	str	r2, [r3, #8]
      break;
 800463a:	e04e      	b.n	80046da <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6818      	ldr	r0, [r3, #0]
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	6899      	ldr	r1, [r3, #8]
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	685a      	ldr	r2, [r3, #4]
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	f000 f959 	bl	8004902 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	689a      	ldr	r2, [r3, #8]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800465e:	609a      	str	r2, [r3, #8]
      break;
 8004660:	e03b      	b.n	80046da <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6818      	ldr	r0, [r3, #0]
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	6859      	ldr	r1, [r3, #4]
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	461a      	mov	r2, r3
 8004670:	f000 f8d0 	bl	8004814 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2150      	movs	r1, #80	; 0x50
 800467a:	4618      	mov	r0, r3
 800467c:	f000 f927 	bl	80048ce <TIM_ITRx_SetConfig>
      break;
 8004680:	e02b      	b.n	80046da <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6818      	ldr	r0, [r3, #0]
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	6859      	ldr	r1, [r3, #4]
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	461a      	mov	r2, r3
 8004690:	f000 f8ee 	bl	8004870 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2160      	movs	r1, #96	; 0x60
 800469a:	4618      	mov	r0, r3
 800469c:	f000 f917 	bl	80048ce <TIM_ITRx_SetConfig>
      break;
 80046a0:	e01b      	b.n	80046da <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6818      	ldr	r0, [r3, #0]
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	6859      	ldr	r1, [r3, #4]
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	461a      	mov	r2, r3
 80046b0:	f000 f8b0 	bl	8004814 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2140      	movs	r1, #64	; 0x40
 80046ba:	4618      	mov	r0, r3
 80046bc:	f000 f907 	bl	80048ce <TIM_ITRx_SetConfig>
      break;
 80046c0:	e00b      	b.n	80046da <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4619      	mov	r1, r3
 80046cc:	4610      	mov	r0, r2
 80046ce:	f000 f8fe 	bl	80048ce <TIM_ITRx_SetConfig>
        break;
 80046d2:	e002      	b.n	80046da <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80046d4:	bf00      	nop
 80046d6:	e000      	b.n	80046da <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80046d8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2201      	movs	r2, #1
 80046de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3710      	adds	r7, #16
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	bc80      	pop	{r7}
 8004704:	4770      	bx	lr

08004706 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004706:	b480      	push	{r7}
 8004708:	b083      	sub	sp, #12
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800470e:	bf00      	nop
 8004710:	370c      	adds	r7, #12
 8004712:	46bd      	mov	sp, r7
 8004714:	bc80      	pop	{r7}
 8004716:	4770      	bx	lr

08004718 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004720:	bf00      	nop
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	bc80      	pop	{r7}
 8004728:	4770      	bx	lr

0800472a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800472a:	b480      	push	{r7}
 800472c:	b083      	sub	sp, #12
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004732:	bf00      	nop
 8004734:	370c      	adds	r7, #12
 8004736:	46bd      	mov	sp, r7
 8004738:	bc80      	pop	{r7}
 800473a:	4770      	bx	lr

0800473c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004744:	bf00      	nop
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	bc80      	pop	{r7}
 800474c:	4770      	bx	lr
	...

08004750 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004750:	b480      	push	{r7}
 8004752:	b085      	sub	sp, #20
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a29      	ldr	r2, [pc, #164]	; (8004808 <TIM_Base_SetConfig+0xb8>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d00b      	beq.n	8004780 <TIM_Base_SetConfig+0x30>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800476e:	d007      	beq.n	8004780 <TIM_Base_SetConfig+0x30>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a26      	ldr	r2, [pc, #152]	; (800480c <TIM_Base_SetConfig+0xbc>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d003      	beq.n	8004780 <TIM_Base_SetConfig+0x30>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4a25      	ldr	r2, [pc, #148]	; (8004810 <TIM_Base_SetConfig+0xc0>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d108      	bne.n	8004792 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004786:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	68fa      	ldr	r2, [r7, #12]
 800478e:	4313      	orrs	r3, r2
 8004790:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a1c      	ldr	r2, [pc, #112]	; (8004808 <TIM_Base_SetConfig+0xb8>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d00b      	beq.n	80047b2 <TIM_Base_SetConfig+0x62>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047a0:	d007      	beq.n	80047b2 <TIM_Base_SetConfig+0x62>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a19      	ldr	r2, [pc, #100]	; (800480c <TIM_Base_SetConfig+0xbc>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d003      	beq.n	80047b2 <TIM_Base_SetConfig+0x62>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a18      	ldr	r2, [pc, #96]	; (8004810 <TIM_Base_SetConfig+0xc0>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d108      	bne.n	80047c4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	695b      	ldr	r3, [r3, #20]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	689a      	ldr	r2, [r3, #8]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a07      	ldr	r2, [pc, #28]	; (8004808 <TIM_Base_SetConfig+0xb8>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d103      	bne.n	80047f8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	691a      	ldr	r2, [r3, #16]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	615a      	str	r2, [r3, #20]
}
 80047fe:	bf00      	nop
 8004800:	3714      	adds	r7, #20
 8004802:	46bd      	mov	sp, r7
 8004804:	bc80      	pop	{r7}
 8004806:	4770      	bx	lr
 8004808:	40012c00 	.word	0x40012c00
 800480c:	40000400 	.word	0x40000400
 8004810:	40000800 	.word	0x40000800

08004814 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004814:	b480      	push	{r7}
 8004816:	b087      	sub	sp, #28
 8004818:	af00      	add	r7, sp, #0
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	60b9      	str	r1, [r7, #8]
 800481e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6a1b      	ldr	r3, [r3, #32]
 8004824:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6a1b      	ldr	r3, [r3, #32]
 800482a:	f023 0201 	bic.w	r2, r3, #1
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800483e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	011b      	lsls	r3, r3, #4
 8004844:	693a      	ldr	r2, [r7, #16]
 8004846:	4313      	orrs	r3, r2
 8004848:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	f023 030a 	bic.w	r3, r3, #10
 8004850:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004852:	697a      	ldr	r2, [r7, #20]
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	4313      	orrs	r3, r2
 8004858:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	693a      	ldr	r2, [r7, #16]
 800485e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	621a      	str	r2, [r3, #32]
}
 8004866:	bf00      	nop
 8004868:	371c      	adds	r7, #28
 800486a:	46bd      	mov	sp, r7
 800486c:	bc80      	pop	{r7}
 800486e:	4770      	bx	lr

08004870 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004870:	b480      	push	{r7}
 8004872:	b087      	sub	sp, #28
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6a1b      	ldr	r3, [r3, #32]
 8004880:	f023 0210 	bic.w	r2, r3, #16
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	699b      	ldr	r3, [r3, #24]
 800488c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6a1b      	ldr	r3, [r3, #32]
 8004892:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800489a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	031b      	lsls	r3, r3, #12
 80048a0:	697a      	ldr	r2, [r7, #20]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80048ac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	011b      	lsls	r3, r3, #4
 80048b2:	693a      	ldr	r2, [r7, #16]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	697a      	ldr	r2, [r7, #20]
 80048bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	693a      	ldr	r2, [r7, #16]
 80048c2:	621a      	str	r2, [r3, #32]
}
 80048c4:	bf00      	nop
 80048c6:	371c      	adds	r7, #28
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bc80      	pop	{r7}
 80048cc:	4770      	bx	lr

080048ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048ce:	b480      	push	{r7}
 80048d0:	b085      	sub	sp, #20
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
 80048d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048e6:	683a      	ldr	r2, [r7, #0]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	f043 0307 	orr.w	r3, r3, #7
 80048f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	68fa      	ldr	r2, [r7, #12]
 80048f6:	609a      	str	r2, [r3, #8]
}
 80048f8:	bf00      	nop
 80048fa:	3714      	adds	r7, #20
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bc80      	pop	{r7}
 8004900:	4770      	bx	lr

08004902 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004902:	b480      	push	{r7}
 8004904:	b087      	sub	sp, #28
 8004906:	af00      	add	r7, sp, #0
 8004908:	60f8      	str	r0, [r7, #12]
 800490a:	60b9      	str	r1, [r7, #8]
 800490c:	607a      	str	r2, [r7, #4]
 800490e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800491c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	021a      	lsls	r2, r3, #8
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	431a      	orrs	r2, r3
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	4313      	orrs	r3, r2
 800492a:	697a      	ldr	r2, [r7, #20]
 800492c:	4313      	orrs	r3, r2
 800492e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	697a      	ldr	r2, [r7, #20]
 8004934:	609a      	str	r2, [r3, #8]
}
 8004936:	bf00      	nop
 8004938:	371c      	adds	r7, #28
 800493a:	46bd      	mov	sp, r7
 800493c:	bc80      	pop	{r7}
 800493e:	4770      	bx	lr

08004940 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004940:	b480      	push	{r7}
 8004942:	b085      	sub	sp, #20
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004950:	2b01      	cmp	r3, #1
 8004952:	d101      	bne.n	8004958 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004954:	2302      	movs	r3, #2
 8004956:	e046      	b.n	80049e6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2202      	movs	r2, #2
 8004964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800497e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	4313      	orrs	r3, r2
 8004988:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a16      	ldr	r2, [pc, #88]	; (80049f0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d00e      	beq.n	80049ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049a4:	d009      	beq.n	80049ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a12      	ldr	r2, [pc, #72]	; (80049f4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d004      	beq.n	80049ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a10      	ldr	r2, [pc, #64]	; (80049f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d10c      	bne.n	80049d4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	68ba      	ldr	r2, [r7, #8]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68ba      	ldr	r2, [r7, #8]
 80049d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3714      	adds	r7, #20
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bc80      	pop	{r7}
 80049ee:	4770      	bx	lr
 80049f0:	40012c00 	.word	0x40012c00
 80049f4:	40000400 	.word	0x40000400
 80049f8:	40000800 	.word	0x40000800

080049fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a04:	bf00      	nop
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bc80      	pop	{r7}
 8004a0c:	4770      	bx	lr

08004a0e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a0e:	b480      	push	{r7}
 8004a10:	b083      	sub	sp, #12
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a16:	bf00      	nop
 8004a18:	370c      	adds	r7, #12
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bc80      	pop	{r7}
 8004a1e:	4770      	bx	lr

08004a20 <__libc_init_array>:
 8004a20:	b570      	push	{r4, r5, r6, lr}
 8004a22:	2600      	movs	r6, #0
 8004a24:	4d0c      	ldr	r5, [pc, #48]	; (8004a58 <__libc_init_array+0x38>)
 8004a26:	4c0d      	ldr	r4, [pc, #52]	; (8004a5c <__libc_init_array+0x3c>)
 8004a28:	1b64      	subs	r4, r4, r5
 8004a2a:	10a4      	asrs	r4, r4, #2
 8004a2c:	42a6      	cmp	r6, r4
 8004a2e:	d109      	bne.n	8004a44 <__libc_init_array+0x24>
 8004a30:	f000 f892 	bl	8004b58 <_init>
 8004a34:	2600      	movs	r6, #0
 8004a36:	4d0a      	ldr	r5, [pc, #40]	; (8004a60 <__libc_init_array+0x40>)
 8004a38:	4c0a      	ldr	r4, [pc, #40]	; (8004a64 <__libc_init_array+0x44>)
 8004a3a:	1b64      	subs	r4, r4, r5
 8004a3c:	10a4      	asrs	r4, r4, #2
 8004a3e:	42a6      	cmp	r6, r4
 8004a40:	d105      	bne.n	8004a4e <__libc_init_array+0x2e>
 8004a42:	bd70      	pop	{r4, r5, r6, pc}
 8004a44:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a48:	4798      	blx	r3
 8004a4a:	3601      	adds	r6, #1
 8004a4c:	e7ee      	b.n	8004a2c <__libc_init_array+0xc>
 8004a4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a52:	4798      	blx	r3
 8004a54:	3601      	adds	r6, #1
 8004a56:	e7f2      	b.n	8004a3e <__libc_init_array+0x1e>
 8004a58:	080054c8 	.word	0x080054c8
 8004a5c:	080054c8 	.word	0x080054c8
 8004a60:	080054c8 	.word	0x080054c8
 8004a64:	080054cc 	.word	0x080054cc

08004a68 <__itoa>:
 8004a68:	1e93      	subs	r3, r2, #2
 8004a6a:	2b22      	cmp	r3, #34	; 0x22
 8004a6c:	b510      	push	{r4, lr}
 8004a6e:	460c      	mov	r4, r1
 8004a70:	d904      	bls.n	8004a7c <__itoa+0x14>
 8004a72:	2300      	movs	r3, #0
 8004a74:	461c      	mov	r4, r3
 8004a76:	700b      	strb	r3, [r1, #0]
 8004a78:	4620      	mov	r0, r4
 8004a7a:	bd10      	pop	{r4, pc}
 8004a7c:	2a0a      	cmp	r2, #10
 8004a7e:	d109      	bne.n	8004a94 <__itoa+0x2c>
 8004a80:	2800      	cmp	r0, #0
 8004a82:	da07      	bge.n	8004a94 <__itoa+0x2c>
 8004a84:	232d      	movs	r3, #45	; 0x2d
 8004a86:	700b      	strb	r3, [r1, #0]
 8004a88:	2101      	movs	r1, #1
 8004a8a:	4240      	negs	r0, r0
 8004a8c:	4421      	add	r1, r4
 8004a8e:	f000 f821 	bl	8004ad4 <__utoa>
 8004a92:	e7f1      	b.n	8004a78 <__itoa+0x10>
 8004a94:	2100      	movs	r1, #0
 8004a96:	e7f9      	b.n	8004a8c <__itoa+0x24>

08004a98 <itoa>:
 8004a98:	f7ff bfe6 	b.w	8004a68 <__itoa>

08004a9c <memset>:
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	4402      	add	r2, r0
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d100      	bne.n	8004aa6 <memset+0xa>
 8004aa4:	4770      	bx	lr
 8004aa6:	f803 1b01 	strb.w	r1, [r3], #1
 8004aaa:	e7f9      	b.n	8004aa0 <memset+0x4>

08004aac <strncpy>:
 8004aac:	4603      	mov	r3, r0
 8004aae:	b510      	push	{r4, lr}
 8004ab0:	3901      	subs	r1, #1
 8004ab2:	b132      	cbz	r2, 8004ac2 <strncpy+0x16>
 8004ab4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004ab8:	3a01      	subs	r2, #1
 8004aba:	f803 4b01 	strb.w	r4, [r3], #1
 8004abe:	2c00      	cmp	r4, #0
 8004ac0:	d1f7      	bne.n	8004ab2 <strncpy+0x6>
 8004ac2:	2100      	movs	r1, #0
 8004ac4:	441a      	add	r2, r3
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d100      	bne.n	8004acc <strncpy+0x20>
 8004aca:	bd10      	pop	{r4, pc}
 8004acc:	f803 1b01 	strb.w	r1, [r3], #1
 8004ad0:	e7f9      	b.n	8004ac6 <strncpy+0x1a>
	...

08004ad4 <__utoa>:
 8004ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ad6:	b08b      	sub	sp, #44	; 0x2c
 8004ad8:	4605      	mov	r5, r0
 8004ada:	460b      	mov	r3, r1
 8004adc:	466e      	mov	r6, sp
 8004ade:	4c1d      	ldr	r4, [pc, #116]	; (8004b54 <__utoa+0x80>)
 8004ae0:	f104 0c20 	add.w	ip, r4, #32
 8004ae4:	4637      	mov	r7, r6
 8004ae6:	6820      	ldr	r0, [r4, #0]
 8004ae8:	6861      	ldr	r1, [r4, #4]
 8004aea:	3408      	adds	r4, #8
 8004aec:	c703      	stmia	r7!, {r0, r1}
 8004aee:	4564      	cmp	r4, ip
 8004af0:	463e      	mov	r6, r7
 8004af2:	d1f7      	bne.n	8004ae4 <__utoa+0x10>
 8004af4:	7921      	ldrb	r1, [r4, #4]
 8004af6:	6820      	ldr	r0, [r4, #0]
 8004af8:	7139      	strb	r1, [r7, #4]
 8004afa:	1e91      	subs	r1, r2, #2
 8004afc:	2922      	cmp	r1, #34	; 0x22
 8004afe:	6038      	str	r0, [r7, #0]
 8004b00:	f04f 0100 	mov.w	r1, #0
 8004b04:	d904      	bls.n	8004b10 <__utoa+0x3c>
 8004b06:	7019      	strb	r1, [r3, #0]
 8004b08:	460b      	mov	r3, r1
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	b00b      	add	sp, #44	; 0x2c
 8004b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b10:	1e58      	subs	r0, r3, #1
 8004b12:	4684      	mov	ip, r0
 8004b14:	fbb5 f7f2 	udiv	r7, r5, r2
 8004b18:	fb02 5617 	mls	r6, r2, r7, r5
 8004b1c:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8004b20:	4476      	add	r6, lr
 8004b22:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8004b26:	460c      	mov	r4, r1
 8004b28:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8004b2c:	462e      	mov	r6, r5
 8004b2e:	42b2      	cmp	r2, r6
 8004b30:	463d      	mov	r5, r7
 8004b32:	f101 0101 	add.w	r1, r1, #1
 8004b36:	d9ed      	bls.n	8004b14 <__utoa+0x40>
 8004b38:	2200      	movs	r2, #0
 8004b3a:	545a      	strb	r2, [r3, r1]
 8004b3c:	1919      	adds	r1, r3, r4
 8004b3e:	1aa5      	subs	r5, r4, r2
 8004b40:	42aa      	cmp	r2, r5
 8004b42:	dae2      	bge.n	8004b0a <__utoa+0x36>
 8004b44:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8004b48:	780e      	ldrb	r6, [r1, #0]
 8004b4a:	3201      	adds	r2, #1
 8004b4c:	7006      	strb	r6, [r0, #0]
 8004b4e:	f801 5901 	strb.w	r5, [r1], #-1
 8004b52:	e7f4      	b.n	8004b3e <__utoa+0x6a>
 8004b54:	080054a0 	.word	0x080054a0

08004b58 <_init>:
 8004b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b5a:	bf00      	nop
 8004b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b5e:	bc08      	pop	{r3}
 8004b60:	469e      	mov	lr, r3
 8004b62:	4770      	bx	lr

08004b64 <_fini>:
 8004b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b66:	bf00      	nop
 8004b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b6a:	bc08      	pop	{r3}
 8004b6c:	469e      	mov	lr, r3
 8004b6e:	4770      	bx	lr
